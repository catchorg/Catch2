{"version":3,"file":"index.development.js","sources":["../../../autocomplete-shared/dist/esm/getAttributeValueByPath.js","../../../autocomplete-shared/dist/esm/version.js","../../../autocomplete-shared/dist/esm/userAgents.js","../../../autocomplete-shared/dist/esm/warn.js","../../src/constants/index.ts","../../src/highlight/parseAttribute.ts","../../src/highlight/parseAlgoliaHitHighlight.ts","../../src/highlight/isPartHighlighted.ts","../../src/highlight/reverseHighlightedParts.ts","../../src/highlight/parseAlgoliaHitReverseHighlight.ts","../../src/highlight/parseAlgoliaHitSnippet.ts","../../src/highlight/parseAlgoliaHitReverseSnippet.ts","../../src/requester/createRequester.ts","../../src/search/fetchAlgoliaResults.ts","../../src/requester/createAlgoliaRequester.ts","../../src/requester/getAlgoliaFacets.ts","../../src/requester/getAlgoliaResults.ts"],"sourcesContent":["export function getAttributeValueByPath(record, path) {\n  return path.reduce(function (current, key) {\n    return current && current[key];\n  }, record);\n}","export var version = '1.7.1';","import { version } from './version';\nexport var userAgents = [{\n  segment: 'autocomplete-core',\n  version: version\n}];","export var warnCache = {\n  current: {}\n};\n/**\n * Logs a warning if the condition is not met.\n * This is used to log issues in development environment only.\n */\n\nexport function warn(condition, message) {\n  if (!(process.env.NODE_ENV !== 'production')) {\n    return;\n  }\n\n  if (condition) {\n    return;\n  }\n\n  var sanitizedMessage = message.trim();\n  var hasAlreadyPrinted = warnCache.current[sanitizedMessage];\n\n  if (!hasAlreadyPrinted) {\n    warnCache.current[sanitizedMessage] = true; // eslint-disable-next-line no-console\n\n    console.warn(\"[Autocomplete] \".concat(sanitizedMessage));\n  }\n}","export const HIGHLIGHT_PRE_TAG = '__aa-highlight__';\nexport const HIGHLIGHT_POST_TAG = '__/aa-highlight__';\n","import { HIGHLIGHT_PRE_TAG, HIGHLIGHT_POST_TAG } from '../constants';\n\nimport { ParsedAttribute } from './ParsedAttribute';\n\n/**\n * Creates a data structure that allows to concatenate similar highlighting\n * parts in a single value.\n */\nfunction createAttributeSet(initialValue: ParsedAttribute[] = []) {\n  const value = initialValue;\n\n  return {\n    get() {\n      return value;\n    },\n    add(part: ParsedAttribute) {\n      const lastPart: ParsedAttribute | undefined = value[value.length - 1];\n\n      if (lastPart?.isHighlighted === part.isHighlighted) {\n        value[value.length - 1] = {\n          value: lastPart.value + part.value,\n          isHighlighted: lastPart.isHighlighted,\n        };\n      } else {\n        value.push(part);\n      }\n    },\n  };\n}\n\ntype ParseAttributeParams = {\n  highlightedValue: string;\n};\n\nexport function parseAttribute({\n  highlightedValue,\n}: ParseAttributeParams): ParsedAttribute[] {\n  const preTagParts = highlightedValue.split(HIGHLIGHT_PRE_TAG);\n  const firstValue = preTagParts.shift();\n  const parts = createAttributeSet(\n    firstValue ? [{ value: firstValue, isHighlighted: false }] : []\n  );\n\n  preTagParts.forEach((part) => {\n    const postTagParts = part.split(HIGHLIGHT_POST_TAG);\n\n    parts.add({\n      value: postTagParts[0],\n      isHighlighted: true,\n    });\n\n    if (postTagParts[1] !== '') {\n      parts.add({\n        value: postTagParts[1],\n        isHighlighted: false,\n      });\n    }\n  });\n\n  return parts.get();\n}\n","import { getAttributeValueByPath, warn } from '@algolia/autocomplete-shared';\n\nimport { HighlightedHit } from './HighlightedHit';\nimport { ParseAlgoliaHitParams } from './ParseAlgoliaHitParams';\nimport { parseAttribute } from './parseAttribute';\nimport { ParsedAttribute } from './ParsedAttribute';\n\nexport function parseAlgoliaHitHighlight<THit extends HighlightedHit<unknown>>({\n  hit,\n  attribute,\n}: ParseAlgoliaHitParams<THit>): ParsedAttribute[] {\n  const path = Array.isArray(attribute) ? attribute : ([attribute] as string[]);\n  let highlightedValue = getAttributeValueByPath(hit, [\n    '_highlightResult',\n    ...path,\n    'value',\n  ]);\n\n  if (typeof highlightedValue !== 'string') {\n    warn(\n      false,\n      `The attribute \"${path.join('.')}\" described by the path ${JSON.stringify(\n        path\n      )} does not exist on the hit. Did you set it in \\`attributesToHighlight\\`?` +\n        '\\nSee https://www.algolia.com/doc/api-reference/api-parameters/attributesToHighlight/'\n    );\n\n    highlightedValue = getAttributeValueByPath(hit, path) || '';\n  }\n\n  return parseAttribute({ highlightedValue });\n}\n","import { ParsedAttribute } from './ParsedAttribute';\n\nconst htmlEscapes = {\n  '&amp;': '&',\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&#39;': \"'\",\n};\nconst hasAlphanumeric = new RegExp(/\\w/i);\nconst regexEscapedHtml = /&(amp|quot|lt|gt|#39);/g;\nconst regexHasEscapedHtml = RegExp(regexEscapedHtml.source);\n\nfunction unescape(value: string): string {\n  return value && regexHasEscapedHtml.test(value)\n    ? value.replace(regexEscapedHtml, (character) => htmlEscapes[character])\n    : value;\n}\n\nexport function isPartHighlighted(parts: ParsedAttribute[], i: number) {\n  const current = parts[i];\n  const isNextHighlighted = parts[i + 1]?.isHighlighted || true;\n  const isPreviousHighlighted = parts[i - 1]?.isHighlighted || true;\n\n  if (\n    !hasAlphanumeric.test(unescape(current.value)) &&\n    isPreviousHighlighted === isNextHighlighted\n  ) {\n    return isPreviousHighlighted;\n  }\n\n  return current.isHighlighted;\n}\n","import { isPartHighlighted } from './isPartHighlighted';\nimport { ParsedAttribute } from './ParsedAttribute';\n\nexport function reverseHighlightedParts(parts: ParsedAttribute[]) {\n  // We don't want to highlight the whole word when no parts match.\n  if (!parts.some((part) => part.isHighlighted)) {\n    return parts.map((part) => ({ ...part, isHighlighted: false }));\n  }\n\n  return parts.map((part, i) => ({\n    ...part,\n    isHighlighted: !isPartHighlighted(parts, i),\n  }));\n}\n","import { HighlightedHit } from './HighlightedHit';\nimport { parseAlgoliaHitHighlight } from './parseAlgoliaHitHighlight';\nimport { ParseAlgoliaHitParams } from './ParseAlgoliaHitParams';\nimport { ParsedAttribute } from './ParsedAttribute';\nimport { reverseHighlightedParts } from './reverseHighlightedParts';\n\nexport function parseAlgoliaHitReverseHighlight<\n  THit extends HighlightedHit<unknown>\n>(props: ParseAlgoliaHitParams<THit>): ParsedAttribute[] {\n  return reverseHighlightedParts(parseAlgoliaHitHighlight<THit>(props));\n}\n","import { getAttributeValueByPath, warn } from '@algolia/autocomplete-shared';\n\nimport { ParseAlgoliaHitParams } from './ParseAlgoliaHitParams';\nimport { parseAttribute } from './parseAttribute';\nimport { ParsedAttribute } from './ParsedAttribute';\nimport { SnippetedHit } from './SnippetedHit';\n\nexport function parseAlgoliaHitSnippet<THit extends SnippetedHit<unknown>>({\n  hit,\n  attribute,\n}: ParseAlgoliaHitParams<THit>): ParsedAttribute[] {\n  const path = Array.isArray(attribute) ? attribute : ([attribute] as string[]);\n  let highlightedValue = getAttributeValueByPath(hit, [\n    '_snippetResult',\n    ...path,\n    'value',\n  ]);\n\n  if (typeof highlightedValue !== 'string') {\n    warn(\n      false,\n      `The attribute \"${path.join('.')}\" described by the path ${JSON.stringify(\n        path\n      )} does not exist on the hit. Did you set it in \\`attributesToSnippet\\`?` +\n        '\\nSee https://www.algolia.com/doc/api-reference/api-parameters/attributesToSnippet/'\n    );\n\n    highlightedValue = getAttributeValueByPath(hit, path) || '';\n  }\n\n  return parseAttribute({ highlightedValue });\n}\n","import { ParseAlgoliaHitParams } from './ParseAlgoliaHitParams';\nimport { parseAlgoliaHitSnippet } from './parseAlgoliaHitSnippet';\nimport { ParsedAttribute } from './ParsedAttribute';\nimport { reverseHighlightedParts } from './reverseHighlightedParts';\nimport { SnippetedHit } from './SnippetedHit';\n\nexport function parseAlgoliaHitReverseSnippet<\n  THit extends SnippetedHit<unknown>\n>(props: ParseAlgoliaHitParams<THit>): ParsedAttribute[] {\n  return reverseHighlightedParts(parseAlgoliaHitSnippet<THit>(props));\n}\n","import {\n  MultipleQueriesQuery,\n  SearchForFacetValuesResponse,\n  SearchResponse,\n} from '@algolia/client-search';\nimport { SearchClient } from 'algoliasearch/lite';\n\nimport { fetchAlgoliaResults } from '../search';\n\ntype Fetcher = typeof fetchAlgoliaResults;\n\ntype FacetHit = {\n  label: string;\n  count: number;\n  _highlightResult: {\n    label: {\n      value: string;\n    };\n  };\n};\n\nexport type FetcherParams = Pick<\n  Parameters<Fetcher>[0],\n  'searchClient' | 'queries'\n>;\n\nexport type RequesterParams<THit> = {\n  transformResponse(\n    response: TransformResponseParams<THit>\n  ): TransformedRequesterResponse<THit>;\n};\n\ntype TransformResponseParams<THit> = {\n  results: Array<SearchResponse<THit> | SearchForFacetValuesResponse>;\n  hits: Array<SearchResponse<THit>['hits']>;\n  facetHits: FacetHit[][];\n};\n\nexport type TransformedRequesterResponse<THit> =\n  | Array<SearchResponse<THit>['hits']>\n  | SearchResponse<THit>['hits']\n  | FacetHit[][]\n  | FacetHit[];\n\nexport type TransformResponse<THit> = (\n  response: TransformResponseParams<THit>\n) => TransformedRequesterResponse<THit>;\n\ntype FetcherParamsQuery<THit> = {\n  query: MultipleQueriesQuery;\n  sourceId: string;\n  transformResponse: TransformResponse<THit>;\n};\n\ntype ExecuteParams<THit> = {\n  searchClient: SearchClient;\n  requests: Array<FetcherParamsQuery<THit>>;\n};\n\nexport type Execute<THit> = (\n  params: ExecuteParams<THit>\n) => Promise<ExecuteResponse<THit>>;\n\nexport type ExecuteResponse<THit> = Array<{\n  items: SearchResponse<THit> | SearchForFacetValuesResponse;\n  sourceId: string;\n  transformResponse: TransformResponse<THit>;\n}>;\n\nexport type RequestParams<THit> = FetcherParams & {\n  /**\n   * The function to transform the Algolia response before passing it to the Autocomplete state. You have access to the full Algolia results, as well as the pre-computed hits and facet hits.\n   *\n   * This is useful to manipulate the hits, or store data from the results in the [context](https://www.algolia.com/doc/ui-libraries/autocomplete/core-concepts/context/).\n   */\n  transformResponse?: TransformResponse<THit>;\n};\n\nexport type RequesterDescription<THit> = {\n  /**\n   * The search client used for this request. Multiple queries with the same client are batched (if `requesterId` is also the same).\n   */\n  searchClient: SearchClient;\n  /**\n   * Identifies requesters to confirm their queries should be batched.\n   * This ensures that requesters with the same client but different\n   * post-processing functions don't get batched.\n   * When falsy, batching is disabled.\n   * For example, the Algolia requesters use \"algolia\".\n   */\n  requesterId?: string;\n  /**\n   * The search parameters used for this query.\n   */\n  queries: MultipleQueriesQuery[];\n  /**\n   * Transforms the response of this search before returning it to the caller.\n   */\n  transformResponse: TransformResponse<THit>;\n  /**\n   * Post-processing function for multi-queries.\n   */\n  execute: Execute<THit>;\n};\n\nexport function createRequester(fetcher: Fetcher, requesterId?: string) {\n  function execute<THit>(fetcherParams: ExecuteParams<THit>) {\n    return fetcher<THit>({\n      searchClient: fetcherParams.searchClient,\n      queries: fetcherParams.requests.map((x) => x.query),\n    }).then((responses) =>\n      responses.map((response, index) => {\n        const { sourceId, transformResponse } = fetcherParams.requests[index];\n\n        return {\n          items: response,\n          sourceId,\n          transformResponse,\n        };\n      })\n    );\n  }\n\n  return function createSpecifiedRequester(\n    requesterParams: RequesterParams<any>\n  ) {\n    return function requester<TTHit>(\n      requestParams: RequestParams<TTHit>\n    ): RequesterDescription<TTHit> {\n      return {\n        requesterId,\n        execute,\n        ...requesterParams,\n        ...requestParams,\n      };\n    };\n  };\n}\n","import {\n  userAgents as coreUserAgents,\n  UserAgent,\n} from '@algolia/autocomplete-shared';\nimport {\n  MultipleQueriesQuery,\n  SearchForFacetValuesResponse,\n  SearchResponse,\n} from '@algolia/client-search';\nimport type { SearchClient } from 'algoliasearch/lite';\n\nimport { HIGHLIGHT_PRE_TAG, HIGHLIGHT_POST_TAG } from '../constants';\n\nexport interface SearchParams {\n  /**\n   * The initialized Algolia search client.\n   */\n  searchClient: SearchClient;\n  /**\n   * A list of queries to execute.\n   */\n  queries: MultipleQueriesQuery[];\n  /**\n   * A list of user agents to add to the search client.\n   *\n   * This is useful to track usage of an integration.\n   */\n  userAgents?: UserAgent[];\n}\n\nexport function fetchAlgoliaResults<TRecord>({\n  searchClient,\n  queries,\n  userAgents = [],\n}: SearchParams): Promise<\n  Array<SearchResponse<TRecord> | SearchForFacetValuesResponse>\n> {\n  if (typeof searchClient.addAlgoliaAgent === 'function') {\n    const algoliaAgents: UserAgent[] = [...coreUserAgents, ...userAgents];\n\n    algoliaAgents.forEach(({ segment, version }) => {\n      searchClient.addAlgoliaAgent(segment, version);\n    });\n  }\n\n  return searchClient\n    .search<TRecord>(\n      queries.map((searchParameters) => {\n        const { params, ...headers } = searchParameters;\n\n        return {\n          ...headers,\n          params: {\n            hitsPerPage: 5,\n            highlightPreTag: HIGHLIGHT_PRE_TAG,\n            highlightPostTag: HIGHLIGHT_POST_TAG,\n            ...params,\n          },\n        };\n      })\n    )\n    .then((response) => {\n      return response.results;\n    });\n}\n","import { fetchAlgoliaResults } from '../search';\n\nimport { createRequester } from './createRequester';\n\nexport const createAlgoliaRequester = createRequester(\n  fetchAlgoliaResults,\n  'algolia'\n);\n","import { MultipleQueriesQuery } from '@algolia/client-search';\n\nimport { createAlgoliaRequester } from './createAlgoliaRequester';\nimport { RequestParams } from './createRequester';\n\n/**\n * Retrieves Algolia facet hits from multiple indices.\n */\nexport function getAlgoliaFacets<TTHit>(requestParams: RequestParams<TTHit>) {\n  const requester = createAlgoliaRequester({\n    transformResponse: (response) => response.facetHits,\n  });\n\n  const queries = requestParams.queries.map((query) => ({\n    ...query,\n    type: 'facet',\n  })) as MultipleQueriesQuery[];\n\n  return requester({\n    ...requestParams,\n    queries,\n  });\n}\n","import { createAlgoliaRequester } from './createAlgoliaRequester';\n\n/**\n * Retrieves Algolia results from multiple indices.\n */\nexport const getAlgoliaResults = createAlgoliaRequester({\n  transformResponse: (response) => response.hits,\n});\n"],"names":["getAttributeValueByPath","record","path","reduce","current","key","version","userAgents","segment","warnCache","warn","condition","message","sanitizedMessage","trim","hasAlreadyPrinted","console","concat","HIGHLIGHT_PRE_TAG","HIGHLIGHT_POST_TAG","createAttributeSet","initialValue","value","get","add","part","lastPart","length","isHighlighted","push","parseAttribute","highlightedValue","preTagParts","split","firstValue","shift","parts","forEach","postTagParts","parseAlgoliaHitHighlight","hit","attribute","Array","isArray","process","join","JSON","stringify","htmlEscapes","hasAlphanumeric","RegExp","regexEscapedHtml","regexHasEscapedHtml","source","unescape","test","replace","character","isPartHighlighted","i","isNextHighlighted","isPreviousHighlighted","reverseHighlightedParts","some","map","parseAlgoliaHitReverseHighlight","props","parseAlgoliaHitSnippet","parseAlgoliaHitReverseSnippet","createRequester","fetcher","requesterId","execute","fetcherParams","searchClient","queries","requests","x","query","then","responses","response","index","sourceId","transformResponse","items","createSpecifiedRequester","requesterParams","requester","requestParams","fetchAlgoliaResults","addAlgoliaAgent","algoliaAgents","coreUserAgents","search","searchParameters","params","headers","hitsPerPage","highlightPreTag","highlightPostTag","results","createAlgoliaRequester","getAlgoliaFacets","facetHits","type","getAlgoliaResults","hits"],"mappings":"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"}