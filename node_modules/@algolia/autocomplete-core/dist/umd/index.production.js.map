{"version":3,"file":"index.production.js","sources":["../../../autocomplete-shared/dist/esm/flatten.js","../../../autocomplete-shared/dist/esm/generateAutocompleteId.js","../../../autocomplete-shared/dist/esm/getItemsCount.js","../../../autocomplete-shared/dist/esm/noop.js","../../../autocomplete-shared/dist/esm/userAgents.js","../../../autocomplete-shared/dist/esm/version.js","../../src/utils/createCancelablePromise.ts","../../src/utils/getNextActiveItemId.ts","../../src/utils/getActiveItem.ts","../../src/utils/isSamsung.ts","../../src/getDefaultProps.ts","../../src/utils/getNormalizedSources.ts","../../src/resolve.ts","../../src/utils/mapToAlgoliaResponse.ts","../../src/utils/createConcurrentSafePromise.ts","../../src/onInput.ts","../../src/reshape.ts","../../src/getPropGetters.ts","../../src/utils/isOrContainsNode.ts","../../src/onKeyDown.ts","../../src/metadata.ts","../../src/getCompletion.ts","../../src/stateReducer.ts","../../src/createAutocomplete.ts","../../src/createStore.ts","../../src/utils/createCancelablePromiseList.ts","../../src/getAutocompleteSetters.ts"],"sourcesContent":["export function flatten(values) {\n  return values.reduce(function (a, b) {\n    return a.concat(b);\n  }, []);\n}","var autocompleteId = 0;\nexport function generateAutocompleteId() {\n  return \"autocomplete-\".concat(autocompleteId++);\n}","export function getItemsCount(state) {\n  if (state.collections.length === 0) {\n    return 0;\n  }\n\n  return state.collections.reduce(function (sum, collection) {\n    return sum + collection.items.length;\n  }, 0);\n}","export var noop = function noop() {};","import { version } from './version';\nexport var userAgents = [{\n  segment: 'autocomplete-core',\n  version: version\n}];","export var version = '1.7.1';","type PromiseExecutor<TValue> = (\n  resolve: (value: TValue | PromiseLike<TValue>) => void,\n  reject: (reason?: any) => void\n) => void;\n\ntype CancelablePromiseState = {\n  isCanceled: boolean;\n  onCancelList: Array<(...args: any[]) => any>;\n};\n\nfunction createInternalCancelablePromise<TValue>(\n  promise: Promise<TValue>,\n  initialState: CancelablePromiseState\n): CancelablePromise<TValue> {\n  const state = initialState;\n\n  return {\n    then(onfulfilled, onrejected) {\n      return createInternalCancelablePromise(\n        promise.then(\n          createCallback(onfulfilled, state, promise),\n          createCallback(onrejected, state, promise)\n        ),\n        state\n      );\n    },\n    catch(onrejected) {\n      return createInternalCancelablePromise(\n        promise.catch(createCallback(onrejected, state, promise)),\n        state\n      );\n    },\n    finally(onfinally) {\n      if (onfinally) {\n        state.onCancelList.push(onfinally);\n      }\n\n      return createInternalCancelablePromise<TValue>(\n        promise.finally(\n          createCallback(\n            onfinally &&\n              (() => {\n                state.onCancelList = [];\n\n                return onfinally();\n              }),\n            state,\n            promise\n          )\n        ),\n        state\n      );\n    },\n    cancel() {\n      state.isCanceled = true;\n      const callbacks = state.onCancelList;\n      state.onCancelList = [];\n\n      callbacks.forEach((callback) => {\n        callback();\n      });\n    },\n    isCanceled() {\n      return state.isCanceled === true;\n    },\n  };\n}\n\nexport type CancelablePromise<TValue> = {\n  then<TResultFulfilled = TValue, TResultRejected = never>(\n    onfulfilled?:\n      | ((\n          value: TValue\n        ) =>\n          | TResultFulfilled\n          | PromiseLike<TResultFulfilled>\n          | CancelablePromise<TResultFulfilled>)\n      | undefined\n      | null,\n    onrejected?:\n      | ((\n          reason: any\n        ) =>\n          | TResultRejected\n          | PromiseLike<TResultRejected>\n          | CancelablePromise<TResultRejected>)\n      | undefined\n      | null\n  ): CancelablePromise<TResultFulfilled | TResultRejected>;\n  catch<TResult = never>(\n    onrejected?:\n      | ((\n          reason: any\n        ) => TResult | PromiseLike<TResult> | CancelablePromise<TResult>)\n      | undefined\n      | null\n  ): CancelablePromise<TValue | TResult>;\n  finally(\n    onfinally?: (() => void) | undefined | null\n  ): CancelablePromise<TValue>;\n  cancel(): void;\n  isCanceled(): boolean;\n};\n\nexport function createCancelablePromise<TValue>(\n  executor: PromiseExecutor<TValue>\n): CancelablePromise<TValue> {\n  return createInternalCancelablePromise(\n    new Promise<TValue>((resolve, reject) => {\n      return executor(resolve, reject);\n    }),\n    { isCanceled: false, onCancelList: [] }\n  );\n}\n\ncreateCancelablePromise.resolve = <TValue>(\n  value?: TValue | PromiseLike<TValue> | CancelablePromise<TValue>\n) => cancelable(Promise.resolve(value));\n\ncreateCancelablePromise.reject = (reason?: any) =>\n  cancelable(Promise.reject(reason));\n\nexport function cancelable<TValue>(promise: Promise<TValue>) {\n  return createInternalCancelablePromise(promise, {\n    isCanceled: false,\n    onCancelList: [],\n  });\n}\n\nfunction createCallback(\n  onResult: ((...args: any[]) => any) | null | undefined,\n  state: CancelablePromiseState,\n  fallback: any\n) {\n  if (!onResult) {\n    return fallback;\n  }\n\n  return function callback(arg?: any) {\n    if (state.isCanceled) {\n      return arg;\n    }\n\n    return onResult(arg);\n  };\n}\n","/**\n * Returns the next active item ID from the current state.\n *\n * We allow circular keyboard navigation from the base index.\n * The base index can either be `null` (nothing is highlighted) or `0`\n * (the first item is highlighted).\n * The base index is allowed to get assigned `null` only if\n * `props.defaultActiveItemId` is `null`. This pattern allows to \"stop\"\n * by the actual query before navigating to other suggestions as seen on\n * Google or Amazon.\n *\n * @param moveAmount The offset to increment (or decrement) the last index\n * @param baseIndex The current index to compute the next index from\n * @param itemCount The number of items\n * @param defaultActiveItemId The default active index to fallback to\n */\nexport function getNextActiveItemId(\n  moveAmount: number,\n  baseIndex: number | null,\n  itemCount: number,\n  defaultActiveItemId: number | null\n): number | null {\n  if (!itemCount) {\n    return null;\n  }\n\n  if (\n    moveAmount < 0 &&\n    (baseIndex === null || (defaultActiveItemId !== null && baseIndex === 0))\n  ) {\n    return itemCount + moveAmount;\n  }\n\n  const numericIndex = (baseIndex === null ? -1 : baseIndex) + moveAmount;\n\n  if (numericIndex <= -1 || numericIndex >= itemCount) {\n    return defaultActiveItemId === null ? null : 0;\n  }\n\n  return numericIndex;\n}\n","import { AutocompleteCollection, AutocompleteState, BaseItem } from '../types';\n\n// We don't have access to the autocomplete source when we call `onKeyDown`\n// or `onClick` because those are native browser events.\n// However, we can get the source from the suggestion index.\nfunction getCollectionFromActiveItemId<TItem extends BaseItem>(\n  state: AutocompleteState<TItem>\n): AutocompleteCollection<TItem> | undefined {\n  // Given 3 sources with respectively 1, 2 and 3 suggestions: [1, 2, 3]\n  // We want to get the accumulated counts:\n  // [1, 1 + 2, 1 + 2 + 3] = [1, 3, 3 + 3] = [1, 3, 6]\n  const accumulatedCollectionsCount = state.collections\n    .map((collections) => collections.items.length)\n    .reduce<number[]>((acc, collectionsCount, index) => {\n      const previousValue = acc[index - 1] || 0;\n      const nextValue = previousValue + collectionsCount;\n\n      acc.push(nextValue);\n\n      return acc;\n    }, []);\n\n  // Based on the accumulated counts, we can infer the index of the suggestion.\n  const collectionIndex = accumulatedCollectionsCount.reduce((acc, current) => {\n    if (current <= state.activeItemId!) {\n      return acc + 1;\n    }\n\n    return acc;\n  }, 0);\n\n  return state.collections[collectionIndex];\n}\n\n/**\n * Gets the highlighted index relative to a suggestion object (not the absolute\n * highlighted index).\n *\n * Example:\n *  [['a', 'b'], ['c', 'd', 'e'], ['f']]\n *                      â†‘\n *         (absolute: 3, relative: 1)\n */\nfunction getRelativeActiveItemId<TItem extends BaseItem>({\n  state,\n  collection,\n}: {\n  state: AutocompleteState<TItem>;\n  collection: AutocompleteCollection<TItem>;\n}): number {\n  let isOffsetFound = false;\n  let counter = 0;\n  let previousItemsOffset = 0;\n\n  while (isOffsetFound === false) {\n    const currentCollection = state.collections[counter];\n\n    if (currentCollection === collection) {\n      isOffsetFound = true;\n      break;\n    }\n\n    previousItemsOffset += currentCollection.items.length;\n\n    counter++;\n  }\n\n  return state.activeItemId! - previousItemsOffset;\n}\n\nexport function getActiveItem<TItem extends BaseItem>(\n  state: AutocompleteState<TItem>\n) {\n  const collection = getCollectionFromActiveItemId(state);\n\n  if (!collection) {\n    return null;\n  }\n\n  const item = collection.items[getRelativeActiveItemId({ state, collection })];\n  const source = collection.source;\n  const itemInputValue = source.getItemInputValue({ item, state });\n  const itemUrl = source.getItemUrl({ item, state });\n\n  return {\n    item,\n    itemInputValue,\n    itemUrl,\n    source,\n  };\n}\n","const regex = /((gt|sm)-|galaxy nexus)|samsung[- ]/i;\n\nexport function isSamsung(userAgent: string) {\n  return Boolean(userAgent && userAgent.match(regex));\n}\n","import {\n  getItemsCount,\n  generateAutocompleteId,\n  flatten,\n} from '@algolia/autocomplete-shared';\n\nimport {\n  AutocompleteEnvironment,\n  AutocompleteOptions,\n  AutocompleteSubscribers,\n  BaseItem,\n  InternalAutocompleteOptions,\n} from './types';\nimport { getNormalizedSources } from './utils';\n\nexport function getDefaultProps<TItem extends BaseItem>(\n  props: AutocompleteOptions<TItem>,\n  pluginSubscribers: AutocompleteSubscribers<TItem>\n): InternalAutocompleteOptions<TItem> {\n  /* eslint-disable no-restricted-globals */\n  const environment: AutocompleteEnvironment = (typeof window !== 'undefined'\n    ? window\n    : {}) as typeof window;\n  /* eslint-enable no-restricted-globals */\n  const plugins = props.plugins || [];\n\n  return {\n    debug: false,\n    openOnFocus: false,\n    placeholder: '',\n    autoFocus: false,\n    defaultActiveItemId: null,\n    stallThreshold: 300,\n    environment,\n    shouldPanelOpen: ({ state }) => getItemsCount(state) > 0,\n    reshape: ({ sources }) => sources,\n    ...props,\n    // Since `generateAutocompleteId` triggers a side effect (it increments\n    // an internal counter), we don't want to execute it if unnecessary.\n    id: props.id ?? generateAutocompleteId(),\n    plugins,\n    // The following props need to be deeply defaulted.\n    initialState: {\n      activeItemId: null,\n      query: '',\n      completion: null,\n      collections: [],\n      isOpen: false,\n      status: 'idle',\n      context: {},\n      ...props.initialState,\n    },\n    onStateChange(params) {\n      props.onStateChange?.(params);\n      plugins.forEach((x) => x.onStateChange?.(params));\n    },\n    onSubmit(params) {\n      props.onSubmit?.(params);\n      plugins.forEach((x) => x.onSubmit?.(params));\n    },\n    onReset(params) {\n      props.onReset?.(params);\n      plugins.forEach((x) => x.onReset?.(params));\n    },\n    getSources(params) {\n      return Promise.all(\n        [...plugins.map((plugin) => plugin.getSources), props.getSources]\n          .filter(Boolean)\n          .map((getSources) => getNormalizedSources(getSources!, params))\n      )\n        .then((nested) => flatten(nested))\n        .then((sources) =>\n          sources.map((source) => ({\n            ...source,\n            onSelect(params) {\n              source.onSelect(params);\n              pluginSubscribers.forEach((x) => x.onSelect?.(params));\n            },\n            onActive(params) {\n              source.onActive(params);\n              pluginSubscribers.forEach((x) => x.onActive?.(params));\n            },\n          }))\n        );\n    },\n    navigator: {\n      navigate({ itemUrl }) {\n        environment.location.assign(itemUrl);\n      },\n      navigateNewTab({ itemUrl }) {\n        const windowReference = environment.open(itemUrl, '_blank', 'noopener');\n        windowReference?.focus();\n      },\n      navigateNewWindow({ itemUrl }) {\n        environment.open(itemUrl, '_blank', 'noopener');\n      },\n      ...props.navigator,\n    },\n  };\n}\n","import { invariant, decycle, noop } from '@algolia/autocomplete-shared';\n\nimport {\n  AutocompleteSource,\n  BaseItem,\n  GetSources,\n  GetSourcesParams,\n  InternalAutocompleteSource,\n  InternalGetSources,\n} from '../types';\n\nexport function getNormalizedSources<TItem extends BaseItem>(\n  getSources: GetSources<TItem>,\n  params: GetSourcesParams<TItem>\n): ReturnType<InternalGetSources<TItem>> {\n  const seenSourceIds: string[] = [];\n\n  return Promise.resolve(getSources(params)).then((sources) => {\n    invariant(\n      Array.isArray(sources),\n      () =>\n        `The \\`getSources\\` function must return an array of sources but returned type ${JSON.stringify(\n          typeof sources\n        )}:\\n\\n${JSON.stringify(decycle(sources), null, 2)}`\n    );\n\n    return Promise.all(\n      sources\n        // We allow `undefined` and `false` sources to allow users to use\n        // `Boolean(query) && source` (=> `false`).\n        // We need to remove these values at this point.\n        .filter((maybeSource: any): maybeSource is AutocompleteSource<TItem> =>\n          Boolean(maybeSource)\n        )\n        .map((source) => {\n          invariant(\n            typeof source.sourceId === 'string',\n            'A source must provide a `sourceId` string.'\n          );\n\n          if (seenSourceIds.includes(source.sourceId)) {\n            throw new Error(\n              `[Autocomplete] The \\`sourceId\\` ${JSON.stringify(\n                source.sourceId\n              )} is not unique.`\n            );\n          }\n\n          seenSourceIds.push(source.sourceId);\n\n          const normalizedSource: InternalAutocompleteSource<TItem> = {\n            getItemInputValue({ state }) {\n              return state.query;\n            },\n            getItemUrl() {\n              return undefined;\n            },\n            onSelect({ setIsOpen }) {\n              setIsOpen(false);\n            },\n            onActive: noop,\n            ...source,\n          };\n\n          return Promise.resolve(normalizedSource);\n        })\n    );\n  });\n}\n","import type {\n  Execute,\n  ExecuteResponse,\n  RequesterDescription,\n  TransformResponse,\n} from '@algolia/autocomplete-preset-algolia';\nimport { decycle, flatten, invariant } from '@algolia/autocomplete-shared';\nimport {\n  MultipleQueriesQuery,\n  SearchForFacetValuesResponse,\n  SearchResponse,\n} from '@algolia/client-search';\nimport type { SearchClient } from 'algoliasearch/lite';\n\nimport { BaseItem, InternalAutocompleteSource } from './types';\nimport { mapToAlgoliaResponse } from './utils';\n\nfunction isDescription<TItem extends BaseItem>(\n  item:\n    | RequestDescriptionPreResolved<TItem>\n    | RequestDescriptionPreResolvedCustom<TItem>\n    | PackedDescription<TItem>\n): item is RequestDescriptionPreResolved<TItem> {\n  return Boolean((item as RequestDescriptionPreResolved<TItem>).execute);\n}\n\nfunction isRequesterDescription<TItem extends BaseItem>(\n  description: TItem[] | TItem[][] | RequesterDescription<TItem>\n): description is RequesterDescription<TItem> {\n  return Boolean((description as RequesterDescription<TItem>)?.execute);\n}\n\ntype PackedDescription<TItem extends BaseItem> = {\n  searchClient: SearchClient;\n  execute: Execute<TItem>;\n  requesterId?: string;\n  items: RequestDescriptionPreResolved<TItem>['requests'];\n};\n\ntype RequestDescriptionPreResolved<TItem extends BaseItem> = Pick<\n  RequesterDescription<TItem>,\n  'execute' | 'requesterId' | 'searchClient' | 'transformResponse'\n> & {\n  requests: Array<{\n    query: MultipleQueriesQuery;\n    sourceId: string;\n    transformResponse: TransformResponse<TItem>;\n  }>;\n};\n\ntype RequestDescriptionPreResolvedCustom<TItem extends BaseItem> = {\n  items: TItem[] | TItem[][];\n  sourceId: string;\n  transformResponse?: undefined;\n};\n\nexport function preResolve<TItem extends BaseItem>(\n  itemsOrDescription: TItem[] | TItem[][] | RequesterDescription<TItem>,\n  sourceId: string\n):\n  | RequestDescriptionPreResolved<TItem>\n  | RequestDescriptionPreResolvedCustom<TItem> {\n  if (isRequesterDescription<TItem>(itemsOrDescription)) {\n    return {\n      ...itemsOrDescription,\n      requests: itemsOrDescription.queries.map((query) => ({\n        query,\n        sourceId,\n        transformResponse: itemsOrDescription.transformResponse,\n      })),\n    };\n  }\n\n  return {\n    items: itemsOrDescription,\n    sourceId,\n  };\n}\n\nexport function resolve<TItem extends BaseItem>(\n  items: Array<\n    | RequestDescriptionPreResolved<TItem>\n    | RequestDescriptionPreResolvedCustom<TItem>\n  >\n) {\n  const packed = items.reduce<\n    Array<RequestDescriptionPreResolvedCustom<TItem> | PackedDescription<TItem>>\n  >((acc, current) => {\n    if (!isDescription(current)) {\n      acc.push(current);\n      return acc;\n    }\n\n    const { searchClient, execute, requesterId, requests } = current;\n\n    const container = acc.find<PackedDescription<TItem>>(\n      (item): item is PackedDescription<TItem> => {\n        return (\n          isDescription(current) &&\n          isDescription(item) &&\n          item.searchClient === searchClient &&\n          Boolean(requesterId) &&\n          item.requesterId === requesterId\n        );\n      }\n    );\n\n    if (container) {\n      container.items.push(...requests);\n    } else {\n      const request: PackedDescription<TItem> = {\n        execute,\n        requesterId,\n        items: requests,\n        searchClient,\n      };\n      acc.push(request);\n    }\n\n    return acc;\n  }, []);\n\n  const values = packed.map<\n    | Promise<RequestDescriptionPreResolvedCustom<TItem>>\n    | ReturnType<Execute<TItem>>\n  >((maybeDescription) => {\n    if (!isDescription<TItem>(maybeDescription)) {\n      return Promise.resolve(\n        maybeDescription as RequestDescriptionPreResolvedCustom<TItem>\n      );\n    }\n\n    const {\n      execute,\n      items,\n      searchClient,\n    } = maybeDescription as PackedDescription<TItem>;\n\n    return execute({\n      searchClient,\n      requests: items,\n    });\n  });\n\n  return Promise.all<\n    RequestDescriptionPreResolvedCustom<TItem> | ExecuteResponse<TItem>\n  >(values).then((responses) =>\n    flatten<\n      RequestDescriptionPreResolvedCustom<TItem> | ExecuteResponse<TItem>[0]\n    >(responses)\n  );\n}\n\nexport function postResolve<TItem extends BaseItem>(\n  responses: Array<\n    RequestDescriptionPreResolvedCustom<TItem> | ExecuteResponse<TItem>[0]\n  >,\n  sources: Array<InternalAutocompleteSource<TItem>>\n) {\n  return sources.map((source) => {\n    const matches = responses.filter(\n      (response) => response.sourceId === source.sourceId\n    );\n    const results = matches.map(({ items }) => items);\n    const transform = matches[0].transformResponse;\n    const items = transform\n      ? transform(\n          mapToAlgoliaResponse(\n            results as Array<\n              SearchForFacetValuesResponse | SearchResponse<TItem>\n            >\n          )\n        )\n      : results;\n\n    invariant(\n      Array.isArray(items),\n      () => `The \\`getItems\\` function from source \"${\n        source.sourceId\n      }\" must return an array of items but returned type ${JSON.stringify(\n        typeof items\n      )}:\\n\\n${JSON.stringify(decycle(items), null, 2)}.\n\nSee: https://www.algolia.com/doc/ui-libraries/autocomplete/core-concepts/sources/#param-getitems`\n    );\n\n    invariant(\n      (items as Array<typeof items>).every(Boolean),\n      `The \\`getItems\\` function from source \"${\n        source.sourceId\n      }\" must return an array of items but returned ${JSON.stringify(\n        undefined\n      )}.\n\nDid you forget to return items?\n\nSee: https://www.algolia.com/doc/ui-libraries/autocomplete/core-concepts/sources/#param-getitems`\n    );\n\n    return {\n      source,\n      items,\n    };\n  });\n}\n","import type {\n  SearchForFacetValuesResponse,\n  SearchResponse,\n} from '@algolia/client-search';\n\nexport function mapToAlgoliaResponse<THit>(\n  rawResults: Array<SearchResponse<THit> | SearchForFacetValuesResponse>\n) {\n  const results: Array<\n    SearchResponse<THit> | SearchForFacetValuesResponse\n  > = rawResults.map((result) => {\n    return {\n      ...result,\n      hits: (result as SearchResponse<THit>).hits?.map((hit) => {\n        // Bring support for the Insights plugin.\n        return {\n          ...hit,\n          __autocomplete_indexName: (result as SearchResponse<THit>).index,\n          __autocomplete_queryID: (result as SearchResponse<THit>).queryID,\n        };\n      }),\n    };\n  });\n\n  return {\n    results,\n    hits: results\n      .map((result) => (result as SearchResponse<THit>).hits)\n      .filter(Boolean),\n    facetHits: results\n      .map((result) =>\n        (result as SearchForFacetValuesResponse).facetHits?.map((facetHit) => {\n          // Bring support for the highlighting components.\n          return {\n            label: facetHit.value,\n            count: facetHit.count,\n            _highlightResult: {\n              label: {\n                value: facetHit.highlighted,\n              },\n            },\n          };\n        })\n      )\n      .filter(Boolean),\n  };\n}\n","import { MaybePromise } from '@algolia/autocomplete-shared';\n\n/**\n * Creates a runner that executes promises in a concurrent-safe way.\n *\n * This is useful to prevent older promises to resolve after a newer promise,\n * otherwise resulting in stale resolved values.\n */\nexport function createConcurrentSafePromise() {\n  let basePromiseId = -1;\n  let latestResolvedId = -1;\n  let latestResolvedValue: unknown = undefined;\n\n  return function runConcurrentSafePromise<TValue>(\n    promise: MaybePromise<TValue>\n  ) {\n    basePromiseId++;\n    const currentPromiseId = basePromiseId;\n\n    return Promise.resolve(promise).then((x) => {\n      // The promise might take too long to resolve and get outdated. This would\n      // result in resolving stale values.\n      // When this happens, we ignore the promise value and return the one\n      // coming from the latest resolved value.\n      //\n      // +----------------------------------+\n      // |        100ms                     |\n      // | run(1) +--->  R1                 |\n      // |        300ms                     |\n      // | run(2) +-------------> R2 (SKIP) |\n      // |        200ms                     |\n      // | run(3) +--------> R3             |\n      // +----------------------------------+\n      if (latestResolvedValue && currentPromiseId < latestResolvedId) {\n        return latestResolvedValue as TValue;\n      }\n\n      latestResolvedId = currentPromiseId;\n      latestResolvedValue = x;\n\n      return x;\n    });\n  };\n}\n","import { reshape } from './reshape';\nimport { preResolve, resolve, postResolve } from './resolve';\nimport {\n  AutocompleteScopeApi,\n  AutocompleteState,\n  AutocompleteStore,\n  BaseItem,\n  InternalAutocompleteOptions,\n} from './types';\nimport {\n  cancelable,\n  CancelablePromise,\n  createConcurrentSafePromise,\n  getActiveItem,\n} from './utils';\n\nlet lastStalledId: number | null = null;\n\ninterface OnInputParams<TItem extends BaseItem>\n  extends AutocompleteScopeApi<TItem> {\n  event: any;\n  /**\n   * The next partial state to apply after the function is called.\n   *\n   * This is useful when we call `onInput` in a different scenario than an\n   * actual input. For example, we use `onInput` when we click on an item,\n   * but we want to close the panel in that case.\n   */\n  nextState?: Partial<AutocompleteState<TItem>>;\n  props: InternalAutocompleteOptions<TItem>;\n  query: string;\n  store: AutocompleteStore<TItem>;\n}\n\nconst runConcurrentSafePromise = createConcurrentSafePromise();\n\nexport function onInput<TItem extends BaseItem>({\n  event,\n  nextState = {},\n  props,\n  query,\n  refresh,\n  store,\n  ...setters\n}: OnInputParams<TItem>): CancelablePromise<void> {\n  if (lastStalledId) {\n    props.environment.clearTimeout(lastStalledId);\n  }\n\n  const {\n    setCollections,\n    setIsOpen,\n    setQuery,\n    setActiveItemId,\n    setStatus,\n  } = setters;\n\n  setQuery(query);\n  setActiveItemId(props.defaultActiveItemId);\n\n  if (!query && props.openOnFocus === false) {\n    const collections = store.getState().collections.map((collection) => ({\n      ...collection,\n      items: [],\n    }));\n\n    setStatus('idle');\n    setCollections(collections);\n    setIsOpen(\n      nextState.isOpen ?? props.shouldPanelOpen({ state: store.getState() })\n    );\n\n    // We make sure to update the latest resolved value of the tracked\n    // promises to keep late resolving promises from \"cancelling\" the state\n    // updates performed in this code path.\n    // We chain with a void promise to respect `onInput`'s expected return type.\n    const request = cancelable(\n      runConcurrentSafePromise(collections).then(() => Promise.resolve())\n    );\n\n    return store.pendingRequests.add(request);\n  }\n\n  setStatus('loading');\n\n  lastStalledId = props.environment.setTimeout(() => {\n    setStatus('stalled');\n  }, props.stallThreshold);\n\n  // We track the entire promise chain triggered by `onInput` before mutating\n  // the Autocomplete state to make sure that any state manipulation is based on\n  // fresh data regardless of when promises individually resolve.\n  // We don't track nested promises and only rely on the full chain resolution,\n  // meaning we should only ever manipulate the state once this concurrent-safe\n  // promise is resolved.\n  const request = cancelable(\n    runConcurrentSafePromise(\n      props\n        .getSources({\n          query,\n          refresh,\n          state: store.getState(),\n          ...setters,\n        })\n        .then((sources) => {\n          return Promise.all(\n            sources.map((source) => {\n              return Promise.resolve(\n                source.getItems({\n                  query,\n                  refresh,\n                  state: store.getState(),\n                  ...setters,\n                })\n              ).then((itemsOrDescription) =>\n                preResolve<TItem>(itemsOrDescription, source.sourceId)\n              );\n            })\n          )\n            .then(resolve)\n            .then((responses) => postResolve(responses, sources))\n            .then((collections) =>\n              reshape({ collections, props, state: store.getState() })\n            );\n        })\n    )\n  )\n    .then((collections) => {\n      // Parameters passed to `onInput` could be stale when the following code\n      // executes, because `onInput` calls may not resolve in order.\n      // If it becomes a problem we'll need to save the last passed parameters.\n      // See: https://codesandbox.io/s/agitated-cookies-y290z\n\n      setStatus('idle');\n\n      setCollections(collections as any);\n\n      const isPanelOpen = props.shouldPanelOpen({ state: store.getState() });\n\n      setIsOpen(\n        nextState.isOpen ??\n          ((props.openOnFocus && !query && isPanelOpen) || isPanelOpen)\n      );\n\n      const highlightedItem = getActiveItem(store.getState());\n\n      if (store.getState().activeItemId !== null && highlightedItem) {\n        const { item, itemInputValue, itemUrl, source } = highlightedItem;\n\n        source.onActive({\n          event,\n          item,\n          itemInputValue,\n          itemUrl,\n          refresh,\n          source,\n          state: store.getState(),\n          ...setters,\n        });\n      }\n    })\n    .finally(() => {\n      setStatus('idle');\n\n      if (lastStalledId) {\n        props.environment.clearTimeout(lastStalledId);\n      }\n    });\n\n  return store.pendingRequests.add(request);\n}\n","import { flatten } from '@algolia/autocomplete-shared';\n\nimport {\n  AutocompleteCollection,\n  AutocompleteReshapeSourcesBySourceId,\n  AutocompleteState,\n  BaseItem,\n  InternalAutocompleteOptions,\n} from './types';\n\ntype ReshapeParams<TItem extends BaseItem> = {\n  collections: Array<AutocompleteCollection<any>>;\n  props: InternalAutocompleteOptions<TItem>;\n  state: AutocompleteState<TItem>;\n};\n\nexport function reshape<TItem extends BaseItem>({\n  collections,\n  props,\n  state,\n}: ReshapeParams<TItem>) {\n  // Sources are grouped by `sourceId` to conveniently pick them via destructuring.\n  // Example: `const { recentSearchesPlugin } = sourcesBySourceId`\n  const sourcesBySourceId = collections.reduce<\n    AutocompleteReshapeSourcesBySourceId<TItem>\n  >(\n    (acc, collection) => ({\n      ...acc,\n      [collection.source.sourceId]: {\n        ...collection.source,\n        getItems() {\n          // We provide the resolved items from the collection to the `reshape` prop.\n          return flatten<any>(collection.items);\n        },\n      },\n    }),\n    {}\n  );\n\n  const reshapeSources = props.reshape({\n    sources: Object.values(sourcesBySourceId),\n    sourcesBySourceId,\n    state,\n  });\n\n  // We reconstruct the collections with the items modified by the `reshape` prop.\n  return flatten(reshapeSources)\n    .filter(Boolean)\n    .map((source) => {\n      return {\n        source,\n        items: source.getItems(),\n      };\n    });\n}\n","import { noop } from '@algolia/autocomplete-shared';\n\nimport { onInput } from './onInput';\nimport { onKeyDown } from './onKeyDown';\nimport {\n  AutocompleteScopeApi,\n  AutocompleteStore,\n  BaseItem,\n  GetEnvironmentProps,\n  GetFormProps,\n  GetInputProps,\n  GetItemProps,\n  GetLabelProps,\n  GetListProps,\n  GetPanelProps,\n  GetRootProps,\n  InternalAutocompleteOptions,\n} from './types';\nimport { getActiveItem, isOrContainsNode, isSamsung } from './utils';\n\ninterface GetPropGettersOptions<TItem extends BaseItem>\n  extends AutocompleteScopeApi<TItem> {\n  store: AutocompleteStore<TItem>;\n  props: InternalAutocompleteOptions<TItem>;\n}\n\nexport function getPropGetters<\n  TItem extends BaseItem,\n  TEvent,\n  TMouseEvent,\n  TKeyboardEvent\n>({ props, refresh, store, ...setters }: GetPropGettersOptions<TItem>) {\n  const getEnvironmentProps: GetEnvironmentProps = (providedProps) => {\n    const { inputElement, formElement, panelElement, ...rest } = providedProps;\n\n    function onMouseDownOrTouchStart(event: MouseEvent | TouchEvent) {\n      // The `onTouchStart`/`onMouseDown` events shouldn't trigger the `blur`\n      // handler when it's not an interaction with Autocomplete.\n      // We detect it with the following heuristics:\n      // - the panel is closed AND there are no pending requests\n      //   (no interaction with the autocomplete, no future state updates)\n      // - OR the touched target is the input element (should open the panel)\n      const isAutocompleteInteraction =\n        store.getState().isOpen || !store.pendingRequests.isEmpty();\n\n      if (!isAutocompleteInteraction || event.target === inputElement) {\n        return;\n      }\n\n      // @TODO: support cases where there are multiple Autocomplete instances.\n      // Right now, a second instance makes this computation return false.\n      const isTargetWithinAutocomplete = [formElement, panelElement].some(\n        (contextNode) => {\n          return isOrContainsNode(contextNode, event.target as Node);\n        }\n      );\n\n      if (isTargetWithinAutocomplete === false) {\n        store.dispatch('blur', null);\n\n        // If requests are still pending when the user closes the panel, they\n        // could reopen the panel once they resolve.\n        // We want to prevent any subsequent query from reopening the panel\n        // because it would result in an unsolicited UI behavior.\n        if (!props.debug) {\n          store.pendingRequests.cancelAll();\n        }\n      }\n    }\n\n    return {\n      // We do not rely on the native `blur` event of the input to close the\n      // panel, but rather on a custom `touchstart`/`mousedown` event outside\n      // of the autocomplete elements.\n      // This ensures we don't mistakenly interpret interactions within the\n      // autocomplete (but outside of the input) as a signal to close the panel.\n      // For example, clicking reset button causes an input blur, but if\n      // `openOnFocus=true`, it shouldn't close the panel.\n      // On touch devices, scrolling results (`touchmove`) causes an input blur\n      // but shouldn't close the panel.\n      onTouchStart: onMouseDownOrTouchStart,\n      onMouseDown: onMouseDownOrTouchStart,\n      // When scrolling on touch devices (mobiles, tablets, etc.), we want to\n      // mimic the native platform behavior where the input is blurred to\n      // hide the virtual keyboard. This gives more vertical space to\n      // discover all the suggestions showing up in the panel.\n      onTouchMove(event: TouchEvent) {\n        if (\n          store.getState().isOpen === false ||\n          inputElement !== props.environment.document.activeElement ||\n          event.target === inputElement\n        ) {\n          return;\n        }\n\n        inputElement.blur();\n      },\n      ...rest,\n    };\n  };\n\n  const getRootProps: GetRootProps = (rest) => {\n    return {\n      role: 'combobox',\n      'aria-expanded': store.getState().isOpen,\n      'aria-haspopup': 'listbox',\n      'aria-owns': store.getState().isOpen ? `${props.id}-list` : undefined,\n      'aria-labelledby': `${props.id}-label`,\n      ...rest,\n    };\n  };\n\n  const getFormProps: GetFormProps<TEvent> = (providedProps) => {\n    const { inputElement, ...rest } = providedProps;\n\n    return {\n      action: '',\n      noValidate: true,\n      role: 'search',\n      onSubmit: (event) => {\n        ((event as unknown) as Event).preventDefault();\n\n        props.onSubmit({\n          event,\n          refresh,\n          state: store.getState(),\n          ...setters,\n        });\n\n        store.dispatch('submit', null);\n        providedProps.inputElement?.blur();\n      },\n      onReset: (event) => {\n        ((event as unknown) as Event).preventDefault();\n\n        props.onReset({\n          event,\n          refresh,\n          state: store.getState(),\n          ...setters,\n        });\n\n        store.dispatch('reset', null);\n        providedProps.inputElement?.focus();\n      },\n      ...rest,\n    };\n  };\n\n  const getInputProps: GetInputProps<TEvent, TMouseEvent, TKeyboardEvent> = (\n    providedProps\n  ) => {\n    function onFocus(event: TEvent) {\n      // We want to trigger a query when `openOnFocus` is true\n      // because the panel should open with the current query.\n      if (props.openOnFocus || Boolean(store.getState().query)) {\n        onInput({\n          event,\n          props,\n          query: store.getState().completion || store.getState().query,\n          refresh,\n          store,\n          ...setters,\n        });\n      }\n\n      store.dispatch('focus', null);\n    }\n\n    const { inputElement, maxLength = 512, ...rest } = providedProps || {};\n    const activeItem = getActiveItem(store.getState());\n\n    const userAgent = props.environment.navigator?.userAgent || '';\n    const shouldFallbackKeyHint = isSamsung(userAgent);\n    const enterKeyHint =\n      activeItem?.itemUrl && !shouldFallbackKeyHint ? 'go' : 'search';\n\n    return {\n      'aria-autocomplete': 'both',\n      'aria-activedescendant':\n        store.getState().isOpen && store.getState().activeItemId !== null\n          ? `${props.id}-item-${store.getState().activeItemId}`\n          : undefined,\n      'aria-controls': store.getState().isOpen ? `${props.id}-list` : undefined,\n      'aria-labelledby': `${props.id}-label`,\n      value: store.getState().completion || store.getState().query,\n      id: `${props.id}-input`,\n      autoComplete: 'off',\n      autoCorrect: 'off',\n      autoCapitalize: 'off',\n      enterKeyHint,\n      spellCheck: 'false',\n      autoFocus: props.autoFocus,\n      placeholder: props.placeholder,\n      maxLength,\n      type: 'search',\n      onChange: (event) => {\n        onInput({\n          event,\n          props,\n          query: (((event as unknown) as Event)\n            .currentTarget as HTMLInputElement).value.slice(0, maxLength),\n          refresh,\n          store,\n          ...setters,\n        });\n      },\n      onKeyDown: (event) => {\n        onKeyDown({\n          event: (event as unknown) as KeyboardEvent,\n          props,\n          refresh,\n          store,\n          ...setters,\n        });\n      },\n      onFocus,\n      // We don't rely on the `blur` event.\n      // See explanation in `onTouchStart`/`onMouseDown`.\n      // @MAJOR See if we need to keep this handler.\n      onBlur: noop,\n      onClick: (event) => {\n        // When the panel is closed and you click on the input while\n        // the input is focused, the `onFocus` event is not triggered\n        // (default browser behavior).\n        // In an autocomplete context, it makes sense to open the panel in this\n        // case.\n        // We mimic this event by catching the `onClick` event which\n        // triggers the `onFocus` for the panel to open.\n        if (\n          providedProps.inputElement ===\n            props.environment.document.activeElement &&\n          !store.getState().isOpen\n        ) {\n          onFocus((event as unknown) as TEvent);\n        }\n      },\n      ...rest,\n    };\n  };\n\n  const getLabelProps: GetLabelProps = (rest) => {\n    return {\n      htmlFor: `${props.id}-input`,\n      id: `${props.id}-label`,\n      ...rest,\n    };\n  };\n\n  const getListProps: GetListProps = (rest) => {\n    return {\n      role: 'listbox',\n      'aria-labelledby': `${props.id}-label`,\n      id: `${props.id}-list`,\n      ...rest,\n    };\n  };\n\n  const getPanelProps: GetPanelProps<TMouseEvent> = (rest) => {\n    return {\n      onMouseDown(event) {\n        // Prevents the `activeElement` from being changed to the panel so\n        // that the blur event is not triggered, otherwise it closes the\n        // panel.\n        ((event as unknown) as MouseEvent).preventDefault();\n      },\n      onMouseLeave() {\n        store.dispatch('mouseleave', null);\n      },\n      ...rest,\n    };\n  };\n\n  const getItemProps: GetItemProps<any, TMouseEvent> = (providedProps) => {\n    const { item, source, ...rest } = providedProps;\n\n    return {\n      id: `${props.id}-item-${item.__autocomplete_id}`,\n      role: 'option',\n      'aria-selected': store.getState().activeItemId === item.__autocomplete_id,\n      onMouseMove(event) {\n        if (item.__autocomplete_id === store.getState().activeItemId) {\n          return;\n        }\n\n        store.dispatch('mousemove', item.__autocomplete_id);\n\n        const activeItem = getActiveItem(store.getState());\n\n        if (store.getState().activeItemId !== null && activeItem) {\n          const { item, itemInputValue, itemUrl, source } = activeItem;\n\n          source.onActive({\n            event,\n            item,\n            itemInputValue,\n            itemUrl,\n            refresh,\n            source,\n            state: store.getState(),\n            ...setters,\n          });\n        }\n      },\n      onMouseDown(event) {\n        // Prevents the `activeElement` from being changed to the item so it\n        // can remain with the current `activeElement`.\n        ((event as unknown) as MouseEvent).preventDefault();\n      },\n      onClick(event) {\n        const itemInputValue = source.getItemInputValue({\n          item,\n          state: store.getState(),\n        });\n        const itemUrl = source.getItemUrl({\n          item,\n          state: store.getState(),\n        });\n\n        // If `getItemUrl` is provided, it means that the suggestion\n        // is a link, not plain text that aims at updating the query.\n        // We can therefore skip the state change because it will update\n        // the `activeItemId`, resulting in a UI flash, especially\n        // noticeable on mobile.\n        const runPreCommand = itemUrl\n          ? Promise.resolve()\n          : onInput({\n              event,\n              nextState: { isOpen: false },\n              props,\n              query: itemInputValue,\n              refresh,\n              store,\n              ...setters,\n            });\n\n        runPreCommand.then(() => {\n          source.onSelect({\n            event,\n            item,\n            itemInputValue,\n            itemUrl,\n            refresh,\n            source,\n            state: store.getState(),\n            ...setters,\n          });\n        });\n      },\n      ...rest,\n    };\n  };\n\n  return {\n    getEnvironmentProps,\n    getRootProps,\n    getFormProps,\n    getLabelProps,\n    getInputProps,\n    getPanelProps,\n    getListProps,\n    getItemProps,\n  };\n}\n","export function isOrContainsNode(parent: Node, child: Node) {\n  return parent === child || parent.contains(child);\n}\n","import { onInput } from './onInput';\nimport {\n  ActionType,\n  AutocompleteScopeApi,\n  AutocompleteStore,\n  BaseItem,\n  InternalAutocompleteOptions,\n} from './types';\nimport { getActiveItem } from './utils';\n\ninterface OnKeyDownOptions<TItem extends BaseItem>\n  extends AutocompleteScopeApi<TItem> {\n  event: KeyboardEvent;\n  props: InternalAutocompleteOptions<TItem>;\n  store: AutocompleteStore<TItem>;\n}\n\nexport function onKeyDown<TItem extends BaseItem>({\n  event,\n  props,\n  refresh,\n  store,\n  ...setters\n}: OnKeyDownOptions<TItem>): void {\n  if (event.key === 'ArrowUp' || event.key === 'ArrowDown') {\n    // eslint-disable-next-line no-inner-declarations\n    function triggerScrollIntoView() {\n      const nodeItem = props.environment.document.getElementById(\n        `${props.id}-item-${store.getState().activeItemId}`\n      );\n\n      if (nodeItem) {\n        if ((nodeItem as any).scrollIntoViewIfNeeded) {\n          (nodeItem as any).scrollIntoViewIfNeeded(false);\n        } else {\n          nodeItem.scrollIntoView(false);\n        }\n      }\n    }\n\n    // eslint-disable-next-line no-inner-declarations\n    function triggerOnActive() {\n      const highlightedItem = getActiveItem(store.getState());\n\n      if (store.getState().activeItemId !== null && highlightedItem) {\n        const { item, itemInputValue, itemUrl, source } = highlightedItem;\n\n        source.onActive({\n          event,\n          item,\n          itemInputValue,\n          itemUrl,\n          refresh,\n          source,\n          state: store.getState(),\n          ...setters,\n        });\n      }\n    }\n\n    // Default browser behavior changes the caret placement on ArrowUp and\n    // ArrowDown.\n    event.preventDefault();\n\n    // When re-opening the panel, we need to split the logic to keep the actions\n    // synchronized as `onInput` returns a promise.\n    if (\n      store.getState().isOpen === false &&\n      (props.openOnFocus || Boolean(store.getState().query))\n    ) {\n      onInput({\n        event,\n        props,\n        query: store.getState().query,\n        refresh,\n        store,\n        ...setters,\n      }).then(() => {\n        store.dispatch(event.key as ActionType, {\n          nextActiveItemId: props.defaultActiveItemId,\n        });\n\n        triggerOnActive();\n        // Since we rely on the DOM, we need to wait for all the micro tasks to\n        // finish (which include re-opening the panel) to make sure all the\n        // elements are available.\n        setTimeout(triggerScrollIntoView, 0);\n      });\n    } else {\n      store.dispatch(event.key, {});\n\n      triggerOnActive();\n      triggerScrollIntoView();\n    }\n  } else if (event.key === 'Escape') {\n    // This prevents the default browser behavior on `input[type=\"search\"]`\n    // from removing the query right away because we first want to close the\n    // panel.\n    event.preventDefault();\n\n    store.dispatch(event.key, null);\n\n    // Hitting the `Escape` key signals the end of a user interaction with the\n    // autocomplete. At this point, we should ignore any requests that are still\n    // pending and could reopen the panel once they resolve, because that would\n    // result in an unsolicited UI behavior.\n    store.pendingRequests.cancelAll();\n  } else if (event.key === 'Tab') {\n    store.dispatch('blur', null);\n\n    // Hitting the `Escape` key signals the end of a user interaction with the\n    // autocomplete. At this point, we should ignore any requests that are still\n    // pending and could reopen the panel once they resolve, because that would\n    // result in an unsolicited UI behavior.\n    store.pendingRequests.cancelAll();\n  } else if (event.key === 'Enter') {\n    // No active item, so we let the browser handle the native `onSubmit` form\n    // event.\n    if (\n      store.getState().activeItemId === null ||\n      store\n        .getState()\n        .collections.every((collection) => collection.items.length === 0)\n    ) {\n      // If requests are still pending when the panel closes, they could reopen\n      // the panel once they resolve.\n      // We want to prevent any subsequent query from reopening the panel\n      // because it would result in an unsolicited UI behavior.\n      if (!props.debug) {\n        store.pendingRequests.cancelAll();\n      }\n\n      return;\n    }\n\n    // This prevents the `onSubmit` event to be sent because an item is\n    // highlighted.\n    event.preventDefault();\n\n    const { item, itemInputValue, itemUrl, source } = getActiveItem(\n      store.getState()\n    )!;\n\n    if (event.metaKey || event.ctrlKey) {\n      if (itemUrl !== undefined) {\n        source.onSelect({\n          event,\n          item,\n          itemInputValue,\n          itemUrl,\n          refresh,\n          source,\n          state: store.getState(),\n          ...setters,\n        });\n        props.navigator.navigateNewTab({\n          itemUrl,\n          item,\n          state: store.getState(),\n        });\n      }\n    } else if (event.shiftKey) {\n      if (itemUrl !== undefined) {\n        source.onSelect({\n          event,\n          item,\n          itemInputValue,\n          itemUrl,\n          refresh,\n          source,\n          state: store.getState(),\n          ...setters,\n        });\n        props.navigator.navigateNewWindow({\n          itemUrl,\n          item,\n          state: store.getState(),\n        });\n      }\n    } else if (event.altKey) {\n      // Keep native browser behavior\n    } else {\n      if (itemUrl !== undefined) {\n        source.onSelect({\n          event,\n          item,\n          itemInputValue,\n          itemUrl,\n          refresh,\n          source,\n          state: store.getState(),\n          ...setters,\n        });\n        props.navigator.navigate({\n          itemUrl,\n          item,\n          state: store.getState(),\n        });\n\n        return;\n      }\n\n      onInput({\n        event,\n        nextState: { isOpen: false },\n        props,\n        query: itemInputValue,\n        refresh,\n        store,\n        ...setters,\n      }).then(() => {\n        source.onSelect({\n          event,\n          item,\n          itemInputValue,\n          itemUrl,\n          refresh,\n          source,\n          state: store.getState(),\n          ...setters,\n        });\n      });\n    }\n  }\n}\n","import { UserAgent, userAgents } from '@algolia/autocomplete-shared';\n\nimport {\n  AutocompleteEnvironment,\n  AutocompleteOptions,\n  AutocompleteOptionsWithMetadata,\n  AutocompletePlugin,\n  BaseItem,\n} from '.';\n\ntype AutocompleteMetadata = {\n  plugins: Array<{\n    name: string | undefined;\n    options: string[];\n  }>;\n  options: Record<string, string[]>;\n  ua: UserAgent[];\n};\n\ntype GetMetadataParams<TItem extends BaseItem, TData = unknown> = {\n  plugins: Array<AutocompletePlugin<TItem, TData>>;\n  options: AutocompleteOptionsWithMetadata<TItem>;\n};\n\nexport function getMetadata<TItem extends BaseItem, TData = unknown>({\n  plugins,\n  options,\n}: GetMetadataParams<TItem, TData>) {\n  const optionsKey = ((options.__autocomplete_metadata\n    ?.userAgents as UserAgent[]) || [])[0]?.segment;\n\n  const extraOptions = optionsKey\n    ? {\n        [optionsKey]: Object.keys(\n          (options.__autocomplete_metadata\n            ?.options as AutocompleteOptions<TItem>) || {}\n        ),\n      }\n    : {};\n\n  return {\n    plugins: plugins.map((plugin) => ({\n      name: plugin.name,\n      options: Object.keys(plugin.__autocomplete_pluginOptions || []),\n    })),\n    options: {\n      'autocomplete-core': Object.keys(options),\n      ...extraOptions,\n    },\n    ua: userAgents.concat(\n      (options.__autocomplete_metadata?.userAgents as any) || []\n    ),\n  };\n}\n\ntype InlineMetadataParams = {\n  metadata: AutocompleteMetadata;\n  environment: AutocompleteEnvironment;\n};\n\nexport function injectMetadata({\n  metadata,\n  environment,\n}: InlineMetadataParams) {\n  const isMetadataEnabled = environment.navigator?.userAgent?.includes(\n    'Algolia Crawler'\n  );\n\n  if (isMetadataEnabled) {\n    const metadataContainer = environment.document.createElement('meta');\n    const headRef = environment.document.querySelector('head');\n\n    metadataContainer.name = 'algolia:metadata';\n\n    setTimeout(() => {\n      metadataContainer.content = JSON.stringify(metadata);\n      headRef!.appendChild(metadataContainer);\n    }, 0);\n  }\n}\n","import { AutocompleteState, BaseItem } from './types';\nimport { getActiveItem } from './utils';\n\ninterface GetCompletionProps<TItem extends BaseItem> {\n  state: AutocompleteState<TItem>;\n}\n\nexport function getCompletion<TItem extends BaseItem>({\n  state,\n}: GetCompletionProps<TItem>): string | null {\n  if (state.isOpen === false || state.activeItemId === null) {\n    return null;\n  }\n\n  return getActiveItem(state)?.itemInputValue || null;\n}\n","import { getItemsCount, invariant } from '@algolia/autocomplete-shared';\n\nimport { getCompletion } from './getCompletion';\nimport { Reducer } from './types';\nimport { getNextActiveItemId } from './utils';\n\nexport const stateReducer: Reducer = (state, action) => {\n  switch (action.type) {\n    case 'setActiveItemId': {\n      return {\n        ...state,\n        activeItemId: action.payload,\n      };\n    }\n\n    case 'setQuery': {\n      return {\n        ...state,\n        query: action.payload,\n        completion: null,\n      };\n    }\n\n    case 'setCollections': {\n      return {\n        ...state,\n        collections: action.payload,\n      };\n    }\n\n    case 'setIsOpen': {\n      return {\n        ...state,\n        isOpen: action.payload,\n      };\n    }\n\n    case 'setStatus': {\n      return {\n        ...state,\n        status: action.payload,\n      };\n    }\n\n    case 'setContext': {\n      return {\n        ...state,\n        context: {\n          ...state.context,\n          ...action.payload,\n        },\n      };\n    }\n\n    case 'ArrowDown': {\n      const nextState = {\n        ...state,\n        activeItemId: action.payload.hasOwnProperty('nextActiveItemId')\n          ? action.payload.nextActiveItemId\n          : getNextActiveItemId(\n              1,\n              state.activeItemId,\n              getItemsCount(state),\n              action.props.defaultActiveItemId\n            ),\n      };\n\n      return {\n        ...nextState,\n        completion: getCompletion({ state: nextState }),\n      };\n    }\n\n    case 'ArrowUp': {\n      const nextState = {\n        ...state,\n        activeItemId: getNextActiveItemId(\n          -1,\n          state.activeItemId,\n          getItemsCount(state),\n          action.props.defaultActiveItemId\n        ),\n      };\n\n      return {\n        ...nextState,\n        completion: getCompletion({ state: nextState }),\n      };\n    }\n\n    case 'Escape': {\n      if (state.isOpen) {\n        return {\n          ...state,\n          activeItemId: null,\n          isOpen: false,\n          completion: null,\n        };\n      }\n\n      return {\n        ...state,\n        activeItemId: null,\n        query: '',\n        status: 'idle',\n        collections: [],\n      };\n    }\n\n    case 'submit': {\n      return {\n        ...state,\n        activeItemId: null,\n        isOpen: false,\n        status: 'idle',\n      };\n    }\n\n    case 'reset': {\n      return {\n        ...state,\n        activeItemId:\n          // Since we open the panel on reset when openOnFocus=true\n          // we need to restore the highlighted index to the defaultActiveItemId. (DocSearch use-case)\n\n          // Since we close the panel when openOnFocus=false\n          // we lose track of the highlighted index. (Query-suggestions use-case)\n          action.props.openOnFocus === true\n            ? action.props.defaultActiveItemId\n            : null,\n        status: 'idle',\n        query: '',\n      };\n    }\n\n    case 'focus': {\n      return {\n        ...state,\n        activeItemId: action.props.defaultActiveItemId,\n        isOpen:\n          (action.props.openOnFocus || Boolean(state.query)) &&\n          action.props.shouldPanelOpen({ state }),\n      };\n    }\n\n    case 'blur': {\n      if (action.props.debug) {\n        return state;\n      }\n\n      return {\n        ...state,\n        isOpen: false,\n        activeItemId: null,\n      };\n    }\n\n    case 'mousemove': {\n      return {\n        ...state,\n        activeItemId: action.payload,\n      };\n    }\n\n    case 'mouseleave': {\n      return {\n        ...state,\n        activeItemId: action.props.defaultActiveItemId,\n      };\n    }\n\n    default:\n      invariant(\n        false,\n        `The reducer action ${JSON.stringify(action.type)} is not supported.`\n      );\n\n      return state;\n  }\n};\n","import { checkOptions } from './checkOptions';\nimport { createStore } from './createStore';\nimport { getAutocompleteSetters } from './getAutocompleteSetters';\nimport { getDefaultProps } from './getDefaultProps';\nimport { getPropGetters } from './getPropGetters';\nimport { getMetadata, injectMetadata } from './metadata';\nimport { onInput } from './onInput';\nimport { stateReducer } from './stateReducer';\nimport {\n  AutocompleteApi,\n  AutocompleteOptions as AutocompleteCoreOptions,\n  BaseItem,\n  AutocompleteSubscribers,\n} from './types';\n\nexport interface AutocompleteOptionsWithMetadata<TItem extends BaseItem>\n  extends AutocompleteCoreOptions<TItem> {\n  /**\n   * @internal\n   */\n  __autocomplete_metadata?: Record<string, unknown>;\n}\n\nexport function createAutocomplete<\n  TItem extends BaseItem,\n  TEvent = Event,\n  TMouseEvent = MouseEvent,\n  TKeyboardEvent = KeyboardEvent\n>(\n  options: AutocompleteOptionsWithMetadata<TItem>\n): AutocompleteApi<TItem, TEvent, TMouseEvent, TKeyboardEvent> {\n  checkOptions(options);\n\n  const subscribers: AutocompleteSubscribers<TItem> = [];\n  const props = getDefaultProps(options, subscribers);\n  const store = createStore(stateReducer, props, onStoreStateChange);\n\n  const setters = getAutocompleteSetters({ store });\n  const propGetters = getPropGetters<\n    TItem,\n    TEvent,\n    TMouseEvent,\n    TKeyboardEvent\n  >({ props, refresh, store, ...setters });\n\n  function onStoreStateChange({ prevState, state }) {\n    props.onStateChange({ prevState, state, refresh, ...setters });\n  }\n\n  function refresh() {\n    return onInput({\n      event: new Event('input'),\n      nextState: { isOpen: store.getState().isOpen },\n      props,\n      query: store.getState().query,\n      refresh,\n      store,\n      ...setters,\n    });\n  }\n\n  props.plugins.forEach((plugin) =>\n    plugin.subscribe?.({\n      ...setters,\n      refresh,\n      onSelect(fn) {\n        subscribers.push({ onSelect: fn });\n      },\n      onActive(fn) {\n        subscribers.push({ onActive: fn });\n      },\n    })\n  );\n\n  injectMetadata({\n    metadata: getMetadata({ plugins: props.plugins, options }),\n    environment: props.environment,\n  });\n\n  return {\n    refresh,\n    ...propGetters,\n    ...setters,\n  };\n}\n","import {\n  AutocompleteState,\n  AutocompleteStore,\n  BaseItem,\n  InternalAutocompleteOptions,\n  Reducer,\n} from './types';\nimport { createCancelablePromiseList } from './utils';\n\ntype OnStoreStateChange<TItem extends BaseItem> = ({\n  prevState,\n  state,\n}: {\n  prevState: AutocompleteState<TItem>;\n  state: AutocompleteState<TItem>;\n}) => void;\n\nexport function createStore<TItem extends BaseItem>(\n  reducer: Reducer,\n  props: InternalAutocompleteOptions<TItem>,\n  onStoreStateChange: OnStoreStateChange<TItem>\n): AutocompleteStore<TItem> {\n  let state = props.initialState;\n\n  return {\n    getState() {\n      return state;\n    },\n    dispatch(action, payload) {\n      const prevState = { ...state };\n      state = reducer(state, {\n        type: action,\n        props,\n        payload,\n      });\n\n      onStoreStateChange({ state, prevState });\n    },\n    pendingRequests: createCancelablePromiseList(),\n  };\n}\n","import { CancelablePromise } from '.';\n\nexport type CancelablePromiseList<TValue> = {\n  /**\n   * Add a cancelable promise to the list.\n   *\n   * @param cancelablePromise The cancelable promise to add.\n   */\n  add(cancelablePromise: CancelablePromise<TValue>): CancelablePromise<TValue>;\n  /**\n   * Cancel all pending promises.\n   *\n   * Requests aren't actually stopped. All pending promises will settle, but\n   * attached handlers won't run.\n   */\n  cancelAll(): void;\n  /**\n   * Whether there are pending promises in the list.\n   */\n  isEmpty(): boolean;\n};\n\nexport function createCancelablePromiseList<\n  TValue\n>(): CancelablePromiseList<TValue> {\n  let list: Array<CancelablePromise<TValue>> = [];\n\n  return {\n    add(cancelablePromise) {\n      list.push(cancelablePromise);\n\n      return cancelablePromise.finally(() => {\n        list = list.filter((item) => item !== cancelablePromise);\n      });\n    },\n    cancelAll() {\n      list.forEach((promise) => promise.cancel());\n    },\n    isEmpty() {\n      return list.length === 0;\n    },\n  };\n}\n","import { flatten } from '@algolia/autocomplete-shared';\n\nimport {\n  AutocompleteApi,\n  AutocompleteCollection,\n  AutocompleteStore,\n  BaseItem,\n} from './types';\n\ninterface GetAutocompleteSettersOptions<TItem extends BaseItem> {\n  store: AutocompleteStore<TItem>;\n}\n\nexport function getAutocompleteSetters<TItem extends BaseItem>({\n  store,\n}: GetAutocompleteSettersOptions<TItem>) {\n  const setActiveItemId: AutocompleteApi<TItem>['setActiveItemId'] = (\n    value\n  ) => {\n    store.dispatch('setActiveItemId', value);\n  };\n\n  const setQuery: AutocompleteApi<TItem>['setQuery'] = (value) => {\n    store.dispatch('setQuery', value);\n  };\n\n  const setCollections: AutocompleteApi<TItem>['setCollections'] = (\n    rawValue\n  ) => {\n    let baseItemId = 0;\n    const value = rawValue.map<AutocompleteCollection<TItem>>((collection) => ({\n      ...collection,\n      // We flatten the stored items to support calling `getAlgoliaResults`\n      // from the source itself.\n      items: flatten(collection.items as any).map((item: any) => ({\n        ...item,\n        __autocomplete_id: baseItemId++,\n      })),\n    }));\n\n    store.dispatch('setCollections', value);\n  };\n\n  const setIsOpen: AutocompleteApi<TItem>['setIsOpen'] = (value) => {\n    store.dispatch('setIsOpen', value);\n  };\n\n  const setStatus: AutocompleteApi<TItem>['setStatus'] = (value) => {\n    store.dispatch('setStatus', value);\n  };\n\n  const setContext: AutocompleteApi<TItem>['setContext'] = (value) => {\n    store.dispatch('setContext', value);\n  };\n\n  return {\n    setActiveItemId,\n    setQuery,\n    setCollections,\n    setIsOpen,\n    setStatus,\n    setContext,\n  };\n}\n"],"names":["flatten","values","reduce","a","b","concat","autocompleteId","getItemsCount","state","collections","length","sum","collection","items","noop","userAgents","segment","version","createInternalCancelablePromise","promise","initialState","then","onfulfilled","onrejected","createCallback","catch","finally","onfinally","onCancelList","push","cancel","isCanceled","callbacks","forEach","callback","cancelable","onResult","fallback","arg","getNextActiveItemId","moveAmount","baseIndex","itemCount","defaultActiveItemId","numericIndex","getActiveItem","collectionIndex","map","acc","collectionsCount","index","nextValue","current","activeItemId","getCollectionFromActiveItemId","item","isOffsetFound","counter","previousItemsOffset","currentCollection","getRelativeActiveItemId","source","itemInputValue","getItemInputValue","itemUrl","getItemUrl","regex","getDefaultProps","props","pluginSubscribers","environment","window","plugins","debug","openOnFocus","placeholder","autoFocus","stallThreshold","shouldPanelOpen","reshape","sources","id","query","completion","isOpen","status","context","onStateChange","params","x","_x$onStateChange","onSubmit","_x$onSubmit","onReset","_x$onReset","getSources","Promise","all","plugin","filter","Boolean","seenSourceIds","resolve","maybeSource","sourceId","includes","Error","JSON","stringify","normalizedSource","onSelect","setIsOpen","onActive","getNormalizedSources","nested","_x$onSelect","_x$onActive","navigator","navigate","location","assign","navigateNewTab","windowReference","open","focus","navigateNewWindow","isDescription","execute","preResolve","itemsOrDescription","description","requests","queries","transformResponse","searchClient","requesterId","container","find","request","maybeDescription","responses","postResolve","matches","response","results","transform","rawResults","result","hits","_hits","hit","__autocomplete_indexName","__autocomplete_queryID","queryID","facetHits","_facetHits","facetHit","label","value","count","_highlightResult","highlighted","mapToAlgoliaResponse","every","undefined","basePromiseId","latestResolvedId","latestResolvedValue","lastStalledId","runConcurrentSafePromise","currentPromiseId","onInput","event","nextState","refresh","store","setters","clearTimeout","setCollections","setQuery","setActiveItemId","setStatus","getState","pendingRequests","add","setTimeout","getItems","sourcesBySourceId","Object","isPanelOpen","highlightedItem","getPropGetters","getEnvironmentProps","providedProps","inputElement","formElement","panelElement","onMouseDownOrTouchStart","isEmpty","target","some","contextNode","parent","child","contains","dispatch","cancelAll","onTouchStart","onMouseDown","onTouchMove","document","activeElement","blur","getRootProps","rest","role","getFormProps","action","noValidate","preventDefault","getLabelProps","htmlFor","getInputProps","onFocus","maxLength","activeItem","shouldFallbackKeyHint","userAgent","match","isSamsung","enterKeyHint","autoComplete","autoCorrect","autoCapitalize","spellCheck","type","onChange","currentTarget","slice","onKeyDown","key","triggerScrollIntoView","nodeItem","getElementById","scrollIntoViewIfNeeded","scrollIntoView","triggerOnActive","nextActiveItemId","metaKey","ctrlKey","shiftKey","altKey","onBlur","onClick","getPanelProps","onMouseLeave","getListProps","getItemProps","__autocomplete_id","onMouseMove","getMetadata","options","optionsKey","__autocomplete_metadata","_options$__autocomple","_","extraOptions","keys","_options$__autocomple2","name","__autocomplete_pluginOptions","ua","_options$__autocomple3","getCompletion","stateReducer","payload","hasOwnProperty","subscribers","reducer","onStoreStateChange","list","prevState","cancelablePromise","createStore","rawValue","baseItemId","setContext","getAutocompleteSetters","propGetters","Event","subscribe","_plugin$subscribe","fn","metadata","_environment$navigato","_environment$navigato2","metadataContainer","createElement","headRef","querySelector","content","appendChild","injectMetadata"],"mappings":"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"}