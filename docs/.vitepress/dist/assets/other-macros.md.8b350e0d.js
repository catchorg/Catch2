import{_ as s,c as a,o as n,a as e}from"./app.f3758f8e.js";const C=JSON.parse('{"title":"Other macros","description":"","frontmatter":{},"headers":[{"level":2,"title":"Assertion related macros","slug":"assertion-related-macros"},{"level":2,"title":"Test case related macros","slug":"test-case-related-macros"}],"relativePath":"other-macros.md","lastUpdated":1652818416000}'),l={name:"other-macros.md"},p=e(`<p><a id="top"></a></p><h1 id="other-macros" tabindex="-1">Other macros <a class="header-anchor" href="#other-macros" aria-hidden="true">#</a></h1><p>This page serves as a reference for macros that are not documented elsewhere. For now, these macros are separated into 2 rough categories, &quot;assertion related macros&quot; and &quot;test case related macros&quot;.</p><h2 id="assertion-related-macros" tabindex="-1">Assertion related macros <a class="header-anchor" href="#assertion-related-macros" aria-hidden="true">#</a></h2><ul><li><code>CHECKED_IF</code> and <code>CHECKED_ELSE</code></li></ul><p><code>CHECKED_IF( expr )</code> is an <code>if</code> replacement, that also applies Catch2&#39;s stringification machinery to the <em>expr</em> and records the result. As with <code>if</code>, the block after a <code>CHECKED_IF</code> is entered only if the expression evaluates to <code>true</code>. <code>CHECKED_ELSE( expr )</code> work similarly, but the block is entered only if the <em>expr</em> evaluated to <code>false</code>.</p><blockquote><p><code>CHECKED_X</code> macros were changed to not count as failure in Catch2 3.0.1.</p></blockquote><p>Example:</p><div class="language-cpp line-numbers-mode"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ...</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ...</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">CHECKED_IF</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // This block is entered when a == b</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CHECKED_ELSE</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // This block is entered when a != b</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li><code>CHECK_NOFAIL</code></li></ul><p><code>CHECK_NOFAIL( expr )</code> is a variant of <code>CHECK</code> that does not fail the test case if <em>expr</em> evaluates to <code>false</code>. This can be useful for checking some assumption, that might be violated without the test necessarily failing.</p><p>Example output:</p><div class="language- line-numbers-mode"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">main.cpp:6:</span></span>
<span class="line"><span style="color:#A6ACCD;">FAILED - but was ok:</span></span>
<span class="line"><span style="color:#A6ACCD;">  CHECK_NOFAIL( 1 == 2 )</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">main.cpp:7:</span></span>
<span class="line"><span style="color:#A6ACCD;">PASSED:</span></span>
<span class="line"><span style="color:#A6ACCD;">  CHECK( 2 == 2 )</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li><code>SUCCEED</code></li></ul><p><code>SUCCEED( msg )</code> is mostly equivalent with <code>INFO( msg ); REQUIRE( true );</code>. In other words, <code>SUCCEED</code> is for cases where just reaching a certain line means that the test has been a success.</p><p>Example usage:</p><div class="language-cpp line-numbers-mode"><span class="copy"></span><pre><code><span class="line"><span style="color:#82AAFF;">TEST_CASE</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">SUCCEED showcase</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> I </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">SUCCEED</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">I is </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> I </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>STATIC_REQUIRE</code> and <code>STATIC_CHECK</code></li></ul><blockquote><p><code>STATIC_REQUIRE</code> was <a href="https://github.com/catchorg/Catch2/issues/1362" target="_blank" rel="noopener noreferrer">introduced</a> in Catch2 2.4.2.</p></blockquote><p><code>STATIC_REQUIRE( expr )</code> is a macro that can be used the same way as a <code>static_assert</code>, but also registers the success with Catch2, so it is reported as a success at runtime. The whole check can also be deferred to the runtime, by defining <code>CATCH_CONFIG_RUNTIME_STATIC_REQUIRE</code> before including the Catch2 header.</p><p>Example:</p><div class="language-cpp line-numbers-mode"><span class="copy"></span><pre><code><span class="line"><span style="color:#82AAFF;">TEST_CASE</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">STATIC_REQUIRE showcase</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">[traits]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">STATIC_REQUIRE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">is_void</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">&gt;::</span><span style="color:#F07178;">value </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">STATIC_REQUIRE_FALSE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">is_void</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">&gt;::</span><span style="color:#F07178;">value </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><blockquote><p><code>STATIC_CHECK</code> was <a href="https://github.com/catchorg/Catch2/pull/2318" target="_blank" rel="noopener noreferrer">introduced</a> in Catch2 3.0.1.</p></blockquote><p><code>STATIC_CHECK( expr )</code> is equivalent to <code>STATIC_REQUIRE( expr )</code>, with the difference that when <code>CATCH_CONFIG_RUNTIME_STATIC_REQUIRE</code> is defined, it becomes equivalent to <code>CHECK</code> instead of <code>REQUIRE</code>.</p><p>Example:</p><div class="language-cpp line-numbers-mode"><span class="copy"></span><pre><code><span class="line"><span style="color:#82AAFF;">TEST_CASE</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">STATIC_CHECK showcase</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">[traits]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">STATIC_CHECK</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">is_void</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">&gt;::</span><span style="color:#F07178;">value </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">STATIC_CHECK_FALSE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">is_void</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">&gt;::</span><span style="color:#F07178;">value </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="test-case-related-macros" tabindex="-1">Test case related macros <a class="header-anchor" href="#test-case-related-macros" aria-hidden="true">#</a></h2><ul><li><code>METHOD_AS_TEST_CASE</code></li></ul><p><code>METHOD_AS_TEST_CASE( member-function-pointer, description )</code> lets you register a member function of a class as a Catch2 test case. The class will be separately instantiated for each method registered in this way.</p><div class="language-cpp line-numbers-mode"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">TestClass</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">string s</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">TestClass</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;">s</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">testCase</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">REQUIRE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;"> s </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">METHOD_AS_TEST_CASE</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TestClass</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">testCase</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Use class&#39;s method as a test case</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">[class]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><ul><li><code>REGISTER_TEST_CASE</code></li></ul><p><code>REGISTER_TEST_CASE( function, description )</code> let&#39;s you register a <code>function</code> as a test case. The function has to have <code>void()</code> signature, the description can contain both name and tags.</p><p>Example:</p><div class="language-cpp line-numbers-mode"><span class="copy"></span><pre><code><span class="line"><span style="color:#82AAFF;">REGISTER_TEST_CASE</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> someFunction</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ManuallyRegistered</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">[tags]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p><em>Note that the registration still has to happen before Catch2&#39;s session is initiated. This means that it either needs to be done in a global constructor, or before Catch2&#39;s session is created in user&#39;s own main.</em></p><ul><li><code>DYNAMIC_SECTION</code></li></ul><blockquote><p>Introduced in Catch2 2.3.0.</p></blockquote><p><code>DYNAMIC_SECTION</code> is a <code>SECTION</code> where the user can use <code>operator&lt;&lt;</code> to create the final name for that section. This can be useful with e.g. generators, or when creating a <code>SECTION</code> dynamically, within a loop.</p><p>Example:</p><div class="language-cpp line-numbers-mode"><span class="copy"></span><pre><code><span class="line"><span style="color:#82AAFF;">TEST_CASE</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">looped SECTION tests</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> b </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">b </span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">DYNAMIC_SECTION</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">b is currently: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> b </span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">CHECK</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;"> b </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> a </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>`,40),o=[p];function c(t,r,F,i,D,y){return n(),a("div",null,o)}var u=s(l,[["render",c]]);export{C as __pageData,u as default};
