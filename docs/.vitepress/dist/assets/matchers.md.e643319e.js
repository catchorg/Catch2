import{_ as s,c as a,o as n,a as e}from"./app.f3758f8e.js";const d=JSON.parse('{"title":"Matchers","description":"","frontmatter":{},"headers":[{"level":2,"title":"Using Matchers","slug":"using-matchers"},{"level":2,"title":"Built-in matchers","slug":"built-in-matchers"},{"level":3,"title":"std::string matchers","slug":"std-string-matchers"},{"level":3,"title":"Vector matchers","slug":"vector-matchers"},{"level":3,"title":"Floating point matchers","slug":"floating-point-matchers"},{"level":3,"title":"Miscellaneous matchers","slug":"miscellaneous-matchers"},{"level":3,"title":"Generic range Matchers","slug":"generic-range-matchers"},{"level":2,"title":"Writing custom matchers (old style)","slug":"writing-custom-matchers-old-style"},{"level":2,"title":"Writing custom matchers (new style)","slug":"writing-custom-matchers-new-style"}],"relativePath":"matchers.md","lastUpdated":1652818416000}'),l={name:"matchers.md"},o=e(`<p><a id="top"></a></p><h1 id="matchers" tabindex="-1">Matchers <a class="header-anchor" href="#matchers" aria-hidden="true">#</a></h1><p>Matchers, as popularized by the <a href="https://en.wikipedia.org/wiki/Hamcrest" target="_blank" rel="noopener noreferrer">Hamcrest</a> framework are an alternative way to write assertions, useful for tests where you work with complex types or need to assert more complex properties. Matchers are easily composable and users can write their own and combine them with the Catch2-provided matchers seamlessly.</p><h2 id="using-matchers" tabindex="-1">Using Matchers <a class="header-anchor" href="#using-matchers" aria-hidden="true">#</a></h2><p>Matchers are most commonly used in tandem with the <code>REQUIRE_THAT</code> or <code>CHECK_THAT</code> macros. The <code>REQUIRE_THAT</code> macro takes two arguments, the first one is the input (object/value) to test, the second argument is the matcher itself.</p><p>For example, to assert that a string ends with the &quot;as a service&quot; substring, you can write the following assertion</p><div class="language-cpp line-numbers-mode"><span class="copy"></span><pre><code><span class="line"><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Catch</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Matchers</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">EndsWith</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">REQUIRE_THAT</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getSomeString</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">EndsWith</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">as a service</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Individual matchers can also be combined using the cpp logical operators, that is <code>&amp;&amp;</code>, <code>||</code>, and <code>!</code>, like so:</p><div class="language-cpp line-numbers-mode"><span class="copy"></span><pre><code><span class="line"><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Catch</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Matchers</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">EndsWith</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Catch</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Matchers</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">ContainsSubstring</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">REQUIRE_THAT</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getSomeString</span><span style="color:#89DDFF;">(),</span></span>
<span class="line"><span style="color:#A6ACCD;">              </span><span style="color:#82AAFF;">EndsWith</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">as a service</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ContainsSubstring</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">web scale</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>The example above asserts that the string returned from <code>getSomeString</code><em>both</em> ends with the suffix &quot;as a service&quot; <em>and</em> contains the string &quot;web scale&quot; somewhere.</p><p>Both of the string matchers used in the examples above live in the <code>catch_matchers_string.hpp</code> header, so to compile the code above also requires <code>#include &lt;catch2/matchers/catch_matchers_string.hpp&gt;</code>.</p><p><strong>IMPORTANT</strong>: The combining operators do not take ownership of the matcher objects being combined. This means that if you store combined matcher object, you have to ensure that the matchers being combined outlive its last use. What this means is that the following code leads to a use-after-free (UAF):</p><div class="language-cpp line-numbers-mode"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">catch2/catch_test_macros.hpp</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">catch2/matchers/catch_matchers_string.hpp</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">TEST_CASE</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Bugs, bugs, bugs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">[Bug]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">string str </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Bugs as a service</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">auto</span><span style="color:#F07178;"> match_expression </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Catch</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Matchers</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">EndsWith</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">as a service</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Catch</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Matchers</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">StartsWith</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Big data</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!</span><span style="color:#FFCB6B;">Catch</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Matchers</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">ContainsSubstring</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">web scale</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">REQUIRE_THAT</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">str</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> match_expression</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="built-in-matchers" tabindex="-1">Built-in matchers <a class="header-anchor" href="#built-in-matchers" aria-hidden="true">#</a></h2><p>Every matcher provided by Catch2 is split into 2 parts, a factory function that lives in the <code>Catch::Matchers</code> namespace, and the actual matcher type that is in some deeper namespace and should not be used by the user. In the examples above, we used <code>Catch::Matchers::Contains</code>. This is the factory function for the <code>Catch::Matchers::StdString::ContainsMatcher</code> type that does the actual matching.</p><p>Out of the box, Catch2 provides the following matchers:</p><h3 id="std-string-matchers" tabindex="-1"><code>std::string</code> matchers <a class="header-anchor" href="#std-string-matchers" aria-hidden="true">#</a></h3><p>Catch2 provides 5 different matchers that work with <code>std::string</code>,</p><ul><li><code>StartsWith(std::string str, CaseSensitive)</code>,</li><li><code>EndsWith(std::string str, CaseSensitive)</code>,</li><li><code>ContainsSubstring(std::string str, CaseSensitive)</code>,</li><li><code>Equals(std::string str, CaseSensitive)</code>, and</li><li><code>Matches(std::string str, CaseSensitive)</code>.</li></ul><p>The first three should be fairly self-explanatory, they succeed if the argument starts with <code>str</code>, ends with <code>str</code>, or contains <code>str</code> somewhere inside it.</p><p>The <code>Equals</code> matcher matches a string if (and only if) the argument string is equal to <code>str</code>.</p><p>Finally, the <code>Matches</code> matcher performs an ECMAScript regex match using <code>str</code> against the argument string. It is important to know that the match is performed against the string as a whole, meaning that the regex <code>&quot;abc&quot;</code> will not match input string <code>&quot;abcd&quot;</code>. To match <code>&quot;abcd&quot;</code>, you need to use e.g. <code>&quot;abc.*&quot;</code> as your regex.</p><p>The second argument sets whether the matching should be case-sensitive or not. By default, it is case-sensitive.</p><blockquote><p><code>std::string</code> matchers live in <code>catch2/matchers/catch_matchers_string.hpp</code></p></blockquote><h3 id="vector-matchers" tabindex="-1">Vector matchers <a class="header-anchor" href="#vector-matchers" aria-hidden="true">#</a></h3><p><em>Vector matchers have been deprecated in favour of the generic range matchers with the same functionality.</em></p><p>Catch2 provides 5 built-in matchers that work on <code>std::vector</code>.</p><p>These are</p><ul><li><code>Contains</code> which checks whether a specified vector is present in the result</li><li><code>VectorContains</code> which checks whether a specified element is present in the result</li><li><code>Equals</code> which checks whether the result is exactly equal (order matters) to a specific vector</li><li><code>UnorderedEquals</code> which checks whether the result is equal to a specific vector under a permutation</li><li><code>Approx</code> which checks whether the result is &quot;approx-equal&quot; (order matters, but comparison is done via <code>Approx</code>) to a specific vector</li></ul><blockquote><p>Approx matcher was <a href="https://github.com/catchorg/Catch2/issues/1499" target="_blank" rel="noopener noreferrer">introduced</a> in Catch2 2.7.2.</p></blockquote><p>An example usage:</p><div class="language-cpp line-numbers-mode"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">vector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> some_vec</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">REQUIRE_THAT</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">some_vec</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Catch</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Matchers</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">UnorderedEquals</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">vector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{ </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> }</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>This assertions will pass, because the elements given to the matchers are a permutation of the ones in <code>some_vec</code>.</p><blockquote><p>vector matchers live in <code>catch2/matchers/catch_matchers_vector.hpp</code></p></blockquote><h3 id="floating-point-matchers" tabindex="-1">Floating point matchers <a class="header-anchor" href="#floating-point-matchers" aria-hidden="true">#</a></h3><p>Catch2 provides 3 matchers that target floating point numbers. These are:</p><ul><li><code>WithinAbs(double target, double margin)</code>,</li><li><code>WithinULP(FloatingPoint target, uint64_t maxUlpDiff)</code>, and</li><li><code>WithinRel(FloatingPoint target, FloatingPoint eps)</code>.</li></ul><blockquote><p><code>WithinRel</code> matcher was introduced in Catch2 2.10.0</p></blockquote><p><code>WithinAbs</code> creates a matcher that accepts floating point numbers whose difference with <code>target</code> is less than the <code>margin</code>.</p><p><code>WithinULP</code> creates a matcher that accepts floating point numbers that are no more than <code>maxUlpDiff</code><a href="https://en.wikipedia.org/wiki/Unit_in_the_last_place" target="_blank" rel="noopener noreferrer">ULPs</a> away from the <code>target</code> value. The short version of what this means is that there is no more than <code>maxUlpDiff - 1</code> representeable floating point numbers between the argument for matching and the <code>target</code> value.</p><p><strong>Important</strong>: The WithinULP matcher requires the platform to use the <a href="https://en.wikipedia.org/wiki/IEEE_754" target="_blank" rel="noopener noreferrer">IEEE-754</a> representation for floating point numbers.</p><p><code>WithinRel</code> creates a matcher that accepts floating point numbers that are <em>approximately equal</em> with the <code>target</code> with tolerance of <code>eps.</code> Specifically, it matches if <code>|arg - target| &lt;= eps * max(|arg|, |target|)</code> holds. If you do not specify <code>eps</code>, <code>std::numeric_limits&lt;FloatingPoint&gt;::epsilon * 100</code> is used as the default.</p><p>In practice, you will often want to combine multiple of these matchers, together for an assertion, because all 3 options have edge cases where they behave differently than you would expect. As an example, under the <code>WithinRel</code> matcher, a <code>0.</code> only ever matches a <code>0.</code> (or <code>-0.</code>), regardless of the relative tolerance specified. Thus, if you want to handle numbers that are &quot;close enough to 0 to be 0&quot;, you have to combine it with the <code>WithinAbs</code> matcher.</p><p>For example, to check that our computation matches known good value within 0.1%, or is close enough (no different to 5 decimal places) to zero, we would write this assertion:</p><div class="language-cpp line-numbers-mode"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">REQUIRE_THAT</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">computation</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">input</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">Catch</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Matchers</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">WithinRel</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">expected</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.001</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Catch</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Matchers</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">WithinAbs</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.000001</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote><p>floating point matchers live in <code>catch2/matchers/catch_matchers_floating.hpp</code></p></blockquote><h3 id="miscellaneous-matchers" tabindex="-1">Miscellaneous matchers <a class="header-anchor" href="#miscellaneous-matchers" aria-hidden="true">#</a></h3><p>Catch2 also provides some matchers and matcher utilities that do not quite fit into other categories.</p><p>The first one of them is the <code>Predicate(Callable pred, std::string description)</code> matcher. It creates a matcher object that calls <code>pred</code> for the provided argument. The <code>description</code> argument allows users to set what the resulting matcher should self-describe as if required.</p><p>Do note that you will need to explicitly specify the type of the argument, like in this example:</p><div class="language-cpp line-numbers-mode"><span class="copy"></span><pre><code><span class="line"><span style="color:#82AAFF;">REQUIRE_THAT</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello olleH</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">             </span><span style="color:#82AAFF;">Predicate</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;(</span></span>
<span class="line"><span style="color:#A6ACCD;">                 </span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const&amp;</span><span style="color:#A6ACCD;"> str</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#C792EA;"> bool </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">front</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">back</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">                 </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">First and last character should be equal</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>the predicate matcher lives in <code>catch2/matchers/catch_matchers_predicate.hpp</code></p></blockquote><p>The other miscellaneous matcher utility is exception matching.</p><h4 id="matching-exceptions" tabindex="-1">Matching exceptions <a class="header-anchor" href="#matching-exceptions" aria-hidden="true">#</a></h4><p>Catch2 provides an utility macro for asserting that an expression throws exception of specific type, and that the exception has desired properties. The macro is <code>REQUIRE_THROWS_MATCHES(expr, ExceptionType, Matcher)</code>.</p><blockquote><p><code>REQUIRE_THROWS_MATCHES</code> macro lives in <code>catch2/matchers/catch_matchers.hpp</code></p></blockquote><p>Catch2 currently provides only one matcher for exceptions, <code>Message(std::string message)</code>. <code>Message</code> checks that the exception&#39;s message, as returned from <code>what</code> is exactly equal to <code>message</code>.</p><p>Example use:</p><div class="language-cpp line-numbers-mode"><span class="copy"></span><pre><code><span class="line"><span style="color:#82AAFF;">REQUIRE_THROWS_MATCHES</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">throwsDerivedException</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;">  DerivedException</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">Message</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">DerivedException::what</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>Note that <code>DerivedException</code> in the example above has to derive from <code>std::exception</code> for the example to work.</p><blockquote><p>the exception message matcher lives in <code>catch2/matchers/catch_matchers_exception.hpp</code></p></blockquote><h3 id="generic-range-matchers" tabindex="-1">Generic range Matchers <a class="header-anchor" href="#generic-range-matchers" aria-hidden="true">#</a></h3><blockquote><p>Generic range matchers were introduced in Catch2 3.0.1</p></blockquote><p>Catch2 also provides some matchers that use the new style matchers definitions to handle generic range-like types. These are:</p><ul><li><code>IsEmpty()</code></li><li><code>SizeIs(size_t target_size)</code></li><li><code>SizeIs(Matcher size_matcher)</code></li><li><code>Contains(T&amp;&amp; target_element, Comparator = std::equal_to&lt;&gt;{})</code></li><li><code>Contains(Matcher element_matcher)</code></li></ul><p><code>IsEmpty</code> should be self-explanatory. It successfully matches objects that are empty according to either <code>std::empty</code>, or ADL-found <code>empty</code> free function.</p><p><code>SizeIs</code> checks range&#39;s size. If constructed with <code>size_t</code> arg, the matchers accepts ranges whose size is exactly equal to the arg. If constructed from another matcher, then the resulting matcher accepts ranges whose size is accepted by the provided matcher.</p><p><code>Contains</code> accepts ranges that contain specific element. There are again two variants, one that accepts the desired element directly, in which case a range is accepted if any of its elements is equal to the target element. The other variant is constructed from a matcher, in which case a range is accepted if any of its elements is accepted by the provided matcher.</p><h2 id="writing-custom-matchers-old-style" tabindex="-1">Writing custom matchers (old style) <a class="header-anchor" href="#writing-custom-matchers-old-style" aria-hidden="true">#</a></h2><p>The old style of writing matchers has been introduced back in Catch Classic. To create an old-style matcher, you have to create your own type that derives from <code>Catch::Matchers::MatcherBase&lt;ArgT&gt;</code>, where <code>ArgT</code> is the type your matcher works for. Your type has to override two methods, <code>bool match(ArgT const&amp;) const</code>, and <code>std::string describe() const</code>.</p><p>As the name suggests, <code>match</code> decides whether the provided argument is matched (accepted) by the matcher. <code>describe</code> then provides a human-oriented description of what the matcher does.</p><p>We also recommend that you create factory function, just like Catch2 does, but that is mostly useful for template argument deduction for templated matchers (assuming you do not have CTAD available).</p><p>To combine these into an example, let&#39;s say that you want to write a matcher that decides whether the provided argument is a number within certain range. We will call it <code>IsBetweenMatcher&lt;T&gt;</code>:</p><div class="language-cpp line-numbers-mode"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">catch2/catch_test_macros.hpp</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">catch2/matchers/catch_matchers.hpp</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">template</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">typename</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">IsBetweenMatcher</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Catch</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Matchers</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">MatcherBase</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    T m_begin</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> m_end</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">IsBetweenMatcher</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">T</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">begin</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">end</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">m_begin</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">begin</span><span style="color:#89DDFF;">),</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">m_end</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">end</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">bool</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">match</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">T</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">in</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">override</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> in </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#F07178;"> m_begin </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> in </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#F07178;"> m_end</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">string</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">describe</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">override</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">ostringstream ss</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        ss </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">is between </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> m_begin </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> and </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> m_end</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ss</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">str</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">template</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">typename</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#FFCB6B;">IsBetweenMatcher</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">IsBetween</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> begin</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> end</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> begin</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> end </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">TEST_CASE</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Numbers are within range</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // infers \`double\` for the argument type of the matcher</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">CHECK_THAT</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3.</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">IsBetween</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1.</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10.</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // infers \`int\` for the argument type of the matcher</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">CHECK_THAT</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">IsBetween</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>Obviously, the code above can be improved somewhat, for example you might want to <code>static_assert</code> over the fact that <code>T</code> is an arithmetic type... or generalize the matcher to cover any type for which the user can provide a comparison function object.</p><p>Note that while any matcher written using the old style can also be written using the new style, combining old style matchers should generally compile faster. Also note that you can combine old and new style matchers arbitrarily.</p><blockquote><p><code>MatcherBase</code> lives in <code>catch2/matchers/catch_matchers.hpp</code></p></blockquote><h2 id="writing-custom-matchers-new-style" tabindex="-1">Writing custom matchers (new style) <a class="header-anchor" href="#writing-custom-matchers-new-style" aria-hidden="true">#</a></h2><blockquote><p>New style matchers were introduced in Catch2 3.0.1</p></blockquote><p>To create a new-style matcher, you have to create your own type that derives from <code>Catch::Matchers::MatcherGenericBase</code>. Your type has to also provide two methods, <code>bool match( ... ) const</code> and overriden <code>std::string describe() const</code>.</p><p>Unlike with old-style matchers, there are no requirements on how the <code>match</code> member function takes its argument. This means that the argument can be taken by value or by mutating reference, but also that the matcher&#39;s <code>match</code> member function can be templated.</p><p>This allows you to write more complex matcher, such as a matcher that can compare one range-like (something that responds to <code>begin</code> and <code>end</code>) object to another, like in the following example:</p><div class="language-cpp line-numbers-mode"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">catch2/catch_test_macros.hpp</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">catch2/matchers/catch_matchers_templated.hpp</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">template</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">typename</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Range</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">EqualsRangeMatcher</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> Catch::</span><span style="color:#FFCB6B;">Matchers</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">MatcherGenericBase</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">EqualsRangeMatcher</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Range</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">range</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">range</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> range </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">template</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">typename</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">OtherRange</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">bool</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">match</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">OtherRange</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">other</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">begin</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">end</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">equal</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">begin</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">range</span><span style="color:#89DDFF;">),</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">end</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">range</span><span style="color:#89DDFF;">),</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">begin</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">other</span><span style="color:#89DDFF;">),</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">end</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">other</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">string</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">describe</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">override</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Equals: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Catch</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">rangeToString</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">range</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">private</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    Range </span><span style="color:#C792EA;">const</span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;"> range</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">template</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">typename</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Range</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">EqualsRange</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Range</span><span style="color:#C792EA;">&amp;</span><span style="color:#A6ACCD;"> range</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EqualsRangeMatcher</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Range</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> EqualsRangeMatcher</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Range</span><span style="color:#89DDFF;">&gt;{</span><span style="color:#F07178;">range</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">TEST_CASE</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Combining templated matchers</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">[matchers][templated]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> container</span><span style="color:#89DDFF;">{{</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> a</span><span style="color:#89DDFF;">{{</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}};</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">vector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> b</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">list</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> c</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">6</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">REQUIRE_THAT</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">container</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">EqualsRange</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">EqualsRange</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">b</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">EqualsRange</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">c</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><p>Do note that while you can rewrite any matcher from the old style to a new style matcher, combining new style matchers is more expensive in terms of compilation time. Also note that you can combine old style and new style matchers arbitrarily.</p><blockquote><p><code>MatcherGenericBase</code> lives in <code>catch2/matchers/catch_matchers_templated.hpp</code></p></blockquote><hr><p><a href="./Readme.html#top">Home</a></p>`,87),p=[o];function t(c,r,F,i,y,D){return n(),a("div",null,p)}var m=s(l,[["render",t]]);export{d as __pageData,m as default};
