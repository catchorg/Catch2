import{_ as s,c as n,o as a,a as e}from"./app.f3758f8e.js";const u=JSON.parse('{"title":"Data Generators","description":"","frontmatter":{},"headers":[{"level":2,"title":"Combining GENERATE and SECTION.","slug":"combining-generate-and-section"},{"level":2,"title":"Provided generators","slug":"provided-generators"},{"level":2,"title":"Generator interface","slug":"generator-interface"}],"relativePath":"generators.md","lastUpdated":1637016746000}'),o={name:"generators.md"},l=e(`<p><a id="top"></a></p><h1 id="data-generators" tabindex="-1">Data Generators <a class="header-anchor" href="#data-generators" aria-hidden="true">#</a></h1><blockquote><p>Introduced in Catch2 2.6.0.</p></blockquote><p>Data generators (also known as <em>data driven/parametrized test cases</em>) let you reuse the same set of assertions across different input values. In Catch2, this means that they respect the ordering and nesting of the <code>TEST_CASE</code> and <code>SECTION</code> macros, and their nested sections are run once per each value in a generator.</p><p>This is best explained with an example:</p><div class="language-cpp line-numbers-mode"><span class="copy"></span><pre><code><span class="line"><span style="color:#82AAFF;">TEST_CASE</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Generators</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">auto</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">GENERATE</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">REQUIRE</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">is_odd</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>The &quot;Generators&quot; <code>TEST_CASE</code> will be entered 3 times, and the value of <code>i</code> will be 1, 3, and 5 in turn. <code>GENERATE</code>s can also be used multiple times at the same scope, in which case the result will be a cartesian product of all elements in the generators. This means that in the snippet below, the test case will be run 6 (2*3) times.</p><div class="language-cpp line-numbers-mode"><span class="copy"></span><pre><code><span class="line"><span style="color:#82AAFF;">TEST_CASE</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Generators</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">auto</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">GENERATE</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">auto</span><span style="color:#F07178;"> j </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">GENERATE</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>There are 2 parts to generators in Catch2, the <code>GENERATE</code> macro together with the already provided generators, and the <code>IGenerator&lt;T&gt;</code> interface that allows users to implement their own generators.</p><h2 id="combining-generate-and-section" tabindex="-1">Combining <code>GENERATE</code> and <code>SECTION</code>. <a class="header-anchor" href="#combining-generate-and-section" aria-hidden="true">#</a></h2><p><code>GENERATE</code> can be seen as an implicit <code>SECTION</code>, that goes from the place <code>GENERATE</code> is used, to the end of the scope. This can be used for various effects. The simplest usage is shown below, where the <code>SECTION</code> &quot;one&quot; runs 4 (2*2) times, and <code>SECTION</code> &quot;two&quot; is run 6 times (2*3).</p><div class="language-cpp line-numbers-mode"><span class="copy"></span><pre><code><span class="line"><span style="color:#82AAFF;">TEST_CASE</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Generators</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">auto</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">GENERATE</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">SECTION</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">one</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">auto</span><span style="color:#F07178;"> j </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">GENERATE</span><span style="color:#89DDFF;">(-</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">REQUIRE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">j </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">SECTION</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">two</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">auto</span><span style="color:#F07178;"> k </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">GENERATE</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">REQUIRE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">i </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> k</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>The specific order of the <code>SECTION</code>s will be &quot;one&quot;, &quot;one&quot;, &quot;two&quot;, &quot;two&quot;, &quot;two&quot;, &quot;one&quot;...</p><p>The fact that <code>GENERATE</code> introduces a virtual <code>SECTION</code> can also be used to make a generator replay only some <code>SECTION</code>s, without having to explicitly add a <code>SECTION</code>. As an example, the code below reports 3 assertions, because the &quot;first&quot; section is run once, but the &quot;second&quot; section is run twice.</p><div class="language-cpp line-numbers-mode"><span class="copy"></span><pre><code><span class="line"><span style="color:#82AAFF;">TEST_CASE</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">GENERATE between SECTIONs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">SECTION</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">first</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">REQUIRE</span><span style="color:#89DDFF;">(true);</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">auto</span><span style="color:#F07178;"> _ </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">GENERATE</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">SECTION</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">second</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">REQUIRE</span><span style="color:#89DDFF;">(true);</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>This can lead to surprisingly complex test flows. As an example, the test below will report 14 assertions:</p><div class="language-cpp line-numbers-mode"><span class="copy"></span><pre><code><span class="line"><span style="color:#82AAFF;">TEST_CASE</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Complex mix of sections and generates</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">auto</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">GENERATE</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">SECTION</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">A</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">SUCCEED</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">A</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">auto</span><span style="color:#F07178;"> j </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">GENERATE</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">SECTION</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">B</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">SUCCEED</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">B</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">auto</span><span style="color:#F07178;"> k </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">GENERATE</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">SUCCEED</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><blockquote><p>The ability to place <code>GENERATE</code> between two <code>SECTION</code>s was <a href="https://github.com/catchorg/Catch2/issues/1938" target="_blank" rel="noopener noreferrer">introduced</a> in Catch2 2.13.0.</p></blockquote><h2 id="provided-generators" tabindex="-1">Provided generators <a class="header-anchor" href="#provided-generators" aria-hidden="true">#</a></h2><p>Catch2&#39;s provided generator functionality consists of three parts,</p><ul><li><code>GENERATE</code> macro, that serves to integrate generator expression with a test case,</li><li>2 fundamental generators <ul><li><code>SingleValueGenerator&lt;T&gt;</code> -- contains only single element</li><li><code>FixedValuesGenerator&lt;T&gt;</code> -- contains multiple elements</li></ul></li><li>5 generic generators that modify other generators <ul><li><code>FilterGenerator&lt;T, Predicate&gt;</code> -- filters out elements from a generator for which the predicate returns &quot;false&quot;</li><li><code>TakeGenerator&lt;T&gt;</code> -- takes first <code>n</code> elements from a generator</li><li><code>RepeatGenerator&lt;T&gt;</code> -- repeats output from a generator <code>n</code> times</li><li><code>MapGenerator&lt;T, U, Func&gt;</code> -- returns the result of applying <code>Func</code> on elements from a different generator</li><li><code>ChunkGenerator&lt;T&gt;</code> -- returns chunks (inside <code>std::vector</code>) of n elements from a generator</li></ul></li><li>4 specific purpose generators <ul><li><code>RandomIntegerGenerator&lt;Integral&gt;</code> -- generates random Integrals from range</li><li><code>RandomFloatGenerator&lt;Float&gt;</code> -- generates random Floats from range</li><li><code>RangeGenerator&lt;T&gt;(first, last)</code> -- generates all values inside a <code>[first, last)</code> arithmetic range</li><li><code>IteratorGenerator&lt;T&gt;</code> -- copies and returns values from an iterator range</li></ul></li></ul><blockquote><p><code>ChunkGenerator&lt;T&gt;</code>, <code>RandomIntegerGenerator&lt;Integral&gt;</code>, <code>RandomFloatGenerator&lt;Float&gt;</code> and <code>RangeGenerator&lt;T&gt;</code> were introduced in Catch2 2.7.0.</p></blockquote><blockquote><p><code>IteratorGenerator&lt;T&gt;</code> was introduced in Catch2 2.10.0.</p></blockquote><p>The generators also have associated helper functions that infer their type, making their usage much nicer. These are</p><ul><li><code>value(T&amp;&amp;)</code> for <code>SingleValueGenerator&lt;T&gt;</code></li><li><code>values(std::initializer_list&lt;T&gt;)</code> for <code>FixedValuesGenerator&lt;T&gt;</code></li><li><code>table&lt;Ts...&gt;(std::initializer_list&lt;std::tuple&lt;Ts...&gt;&gt;)</code> for <code>FixedValuesGenerator&lt;std::tuple&lt;Ts...&gt;&gt;</code></li><li><code>filter(predicate, GeneratorWrapper&lt;T&gt;&amp;&amp;)</code> for <code>FilterGenerator&lt;T, Predicate&gt;</code></li><li><code>take(count, GeneratorWrapper&lt;T&gt;&amp;&amp;)</code> for <code>TakeGenerator&lt;T&gt;</code></li><li><code>repeat(repeats, GeneratorWrapper&lt;T&gt;&amp;&amp;)</code> for <code>RepeatGenerator&lt;T&gt;</code></li><li><code>map(func, GeneratorWrapper&lt;T&gt;&amp;&amp;)</code> for <code>MapGenerator&lt;T, U, Func&gt;</code> (map <code>U</code> to <code>T</code>, deduced from <code>Func</code>)</li><li><code>map&lt;T&gt;(func, GeneratorWrapper&lt;U&gt;&amp;&amp;)</code> for <code>MapGenerator&lt;T, U, Func&gt;</code> (map <code>U</code> to <code>T</code>)</li><li><code>chunk(chunk-size, GeneratorWrapper&lt;T&gt;&amp;&amp;)</code> for <code>ChunkGenerator&lt;T&gt;</code></li><li><code>random(IntegerOrFloat a, IntegerOrFloat b)</code> for <code>RandomIntegerGenerator</code> or <code>RandomFloatGenerator</code></li><li><code>range(Arithemtic start, Arithmetic end)</code> for <code>RangeGenerator&lt;Arithmetic&gt;</code> with a step size of <code>1</code></li><li><code>range(Arithmetic start, Arithmetic end, Arithmetic step)</code> for <code>RangeGenerator&lt;Arithmetic&gt;</code> with a custom step size</li><li><code>from_range(InputIterator from, InputIterator to)</code> for <code>IteratorGenerator&lt;T&gt;</code></li><li><code>from_range(Container const&amp;)</code> for <code>IteratorGenerator&lt;T&gt;</code></li></ul><blockquote><p><code>chunk()</code>, <code>random()</code> and both <code>range()</code> functions were introduced in Catch2 2.7.0.</p></blockquote><blockquote><p><code>from_range</code> has been introduced in Catch2 2.10.0</p></blockquote><blockquote><p><code>range()</code> for floating point numbers has been introduced in Catch2 2.11.0</p></blockquote><p>And can be used as shown in the example below to create a generator that returns 100 odd random number:</p><div class="language-cpp line-numbers-mode"><span class="copy"></span><pre><code><span class="line"><span style="color:#82AAFF;">TEST_CASE</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Generating random ints</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">[example][generator]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">SECTION</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Deducing functions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">auto</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">GENERATE</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">take</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">filter</span><span style="color:#89DDFF;">([](</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">%</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">random</span><span style="color:#89DDFF;">(-</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">))));</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">REQUIRE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">i </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">REQUIRE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">REQUIRE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">i </span><span style="color:#89DDFF;">%</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Apart from registering generators with Catch2, the <code>GENERATE</code> macro has one more purpose, and that is to provide simple way of generating trivial generators, as seen in the first example on this page, where we used it as <code>auto i = GENERATE(1, 2, 3);</code>. This usage converted each of the three literals into a single <code>SingleValueGenerator&lt;int&gt;</code> and then placed them all in a special generator that concatenates other generators. It can also be used with other generators as arguments, such as <code>auto i = GENERATE(0, 2, take(100, random(300, 3000)));</code>. This is useful e.g. if you know that specific inputs are problematic and want to test them separately/first.</p><p><strong>For safety reasons, you cannot use variables inside the <code>GENERATE</code> macro. This is done because the generator expression <em>will</em> outlive the outside scope and thus capturing references is dangerous. If you need to use variables inside the generator expression, make sure you thought through the lifetime implications and use <code>GENERATE_COPY</code> or <code>GENERATE_REF</code>.</strong></p><blockquote><p><code>GENERATE_COPY</code> and <code>GENERATE_REF</code> were introduced in Catch2 2.7.1.</p></blockquote><p>You can also override the inferred type by using <code>as&lt;type&gt;</code> as the first argument to the macro. This can be useful when dealing with string literals, if you want them to come out as <code>std::string</code>:</p><div class="language-cpp line-numbers-mode"><span class="copy"></span><pre><code><span class="line"><span style="color:#82AAFF;">TEST_CASE</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">type conversion</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">[generators]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">auto</span><span style="color:#F07178;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">GENERATE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">as</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;">{}</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bb</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ccc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">REQUIRE</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">size</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="generator-interface" tabindex="-1">Generator interface <a class="header-anchor" href="#generator-interface" aria-hidden="true">#</a></h2><p>You can also implement your own generators, by deriving from the <code>IGenerator&lt;T&gt;</code> interface:</p><div class="language-cpp line-numbers-mode"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">template</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">typename</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">IGenerator</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> GeneratorUntypedBase </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // via GeneratorUntypedBase:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // Attempts to move the generator to the next element.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // Returns true if successful (and thus has another element that can be read)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">virtual</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">bool</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">next</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // Precondition:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // The generator is either freshly constructed or the last call to next() returned true</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">virtual</span><span style="color:#F07178;"> T </span><span style="color:#C792EA;">const</span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>However, to be able to use your custom generator inside <code>GENERATE</code>, it will need to be wrapped inside a <code>GeneratorWrapper&lt;T&gt;</code>. <code>GeneratorWrapper&lt;T&gt;</code> is a value wrapper around a <code>std::unique_ptr&lt;IGenerator&lt;T&gt;&gt;</code>.</p><p>For full example of implementing your own generator, look into Catch2&#39;s examples, specifically <a href="../examples/300-Gen-OwnGenerator.cpp">Generators: Create your own generator</a>.</p>`,40),p=[l];function t(r,c,F,i,y,D){return a(),n("div",null,p)}var m=s(o,[["render",t]]);export{u as __pageData,m as default};
