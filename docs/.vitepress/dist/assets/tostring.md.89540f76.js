import{_ as s,c as n,o as a,a as e}from"./app.f3758f8e.js";const C=JSON.parse('{"title":"String conversions","description":"","frontmatter":{},"headers":[{"level":2,"title":"operator << overload for std::ostream","slug":"operator-overload-for-std-ostream"},{"level":2,"title":"Catch::StringMaker specialisation","slug":"catch-stringmaker-specialisation"},{"level":2,"title":"Catch::is_range specialisation","slug":"catch-is-range-specialisation"},{"level":2,"title":"Exceptions","slug":"exceptions"},{"level":2,"title":"Enums","slug":"enums"},{"level":2,"title":"Floating point precision","slug":"floating-point-precision"}],"relativePath":"tostring.md","lastUpdated":1615627572000}'),l={name:"tostring.md"},p=e(`<p><a id="top"></a></p><h1 id="string-conversions" tabindex="-1">String conversions <a class="header-anchor" href="#string-conversions" aria-hidden="true">#</a></h1><p>Catch needs to be able to convert types you use in assertions and logging expressions into strings (for logging and reporting purposes). Most built-in or std types are supported out of the box but there are two ways that you can tell Catch how to convert your own types (or other, third-party types) into strings.</p><h2 id="operator-overload-for-std-ostream" tabindex="-1">operator &lt;&lt; overload for std::ostream <a class="header-anchor" href="#operator-overload-for-std-ostream" aria-hidden="true">#</a></h2><p>This is the standard way of providing string conversions in C++ - and the chances are you may already provide this for your own purposes. If you&#39;re not familiar with this idiom it involves writing a free function of the form:</p><div class="language-cpp line-numbers-mode"><span class="copy"></span><pre><code><span class="line"><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">ostream</span><span style="color:#C792EA;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">operator</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">ostream</span><span style="color:#C792EA;">&amp;</span><span style="color:#A6ACCD;"> os</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const&amp;</span><span style="color:#A6ACCD;"> value </span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    os </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">convertMyTypeToString</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> value </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> os</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>(where <code>T</code> is your type and <code>convertMyTypeToString</code> is where you&#39;ll write whatever code is necessary to make your type printable - it doesn&#39;t have to be in another function).</p><p>You should put this function in the same namespace as your type, or the global namespace, and have it declared before including Catch&#39;s header.</p><h2 id="catch-stringmaker-specialisation" tabindex="-1">Catch::StringMaker specialisation <a class="header-anchor" href="#catch-stringmaker-specialisation" aria-hidden="true">#</a></h2><p>If you don&#39;t want to provide an <code>operator &lt;&lt;</code> overload, or you want to convert your type differently for testing purposes, you can provide a specialization for <code>Catch::StringMaker&lt;T&gt;</code>:</p><div class="language-cpp line-numbers-mode"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Catch</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">template</span><span style="color:#89DDFF;">&lt;&gt;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">StringMaker</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">static</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">string</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">convert</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">convertMyTypeToString</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;"> value </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="catch-is-range-specialisation" tabindex="-1">Catch::is_range specialisation <a class="header-anchor" href="#catch-is-range-specialisation" aria-hidden="true">#</a></h2><p>As a fallback, Catch attempts to detect if the type can be iterated (<code>begin(T)</code> and <code>end(T)</code> are valid) and if it can be, it is stringified as a range. For certain types this can lead to infinite recursion, so it can be disabled by specializing <code>Catch::is_range</code> like so:</p><div class="language-cpp line-numbers-mode"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Catch</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">template</span><span style="color:#89DDFF;">&lt;&gt;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">is_range</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">static</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">bool</span><span style="color:#F07178;"> value </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">false;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="exceptions" tabindex="-1">Exceptions <a class="header-anchor" href="#exceptions" aria-hidden="true">#</a></h2><p>By default all exceptions deriving from <code>std::exception</code> will be translated to strings by calling the <code>what()</code> method. For exception types that do not derive from <code>std::exception</code> - or if <code>what()</code> does not return a suitable string - use <code>CATCH_TRANSLATE_EXCEPTION</code>. This defines a function that takes your exception type, by reference, and returns a string. It can appear anywhere in the code - it doesn&#39;t have to be in the same translation unit. For example:</p><div class="language-cpp line-numbers-mode"><span class="copy"></span><pre><code><span class="line"><span style="color:#82AAFF;">CATCH_TRANSLATE_EXCEPTION</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> MyType </span><span style="color:#C792EA;">const</span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> ex </span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ex</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">message</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="enums" tabindex="-1">Enums <a class="header-anchor" href="#enums" aria-hidden="true">#</a></h2><blockquote><p>Introduced in Catch2 2.8.0.</p></blockquote><p>Enums that already have a <code>&lt;&lt;</code> overload for <code>std::ostream</code> will convert to strings as expected. If you only need to convert enums to strings for test reporting purposes you can provide a <code>StringMaker</code> specialisations as any other type. However, as a convenience, Catch provides the <code>REGISTER_ENUM</code> helper macro that will generate the <code>StringMaker</code> specialiation for you with minimal code. Simply provide it the (qualified) enum name, followed by all the enum values, and you&#39;re done!</p><p>E.g.</p><div class="language-cpp line-numbers-mode"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">enum</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Fruits</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Banana</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Apple</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Mango</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">CATCH_REGISTER_ENUM</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> Fruits</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fruits</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Banana</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fruits</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Apple</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fruits</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Mango </span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">TEST_CASE</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">REQUIRE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Fruits</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Mango </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Fruits</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Apple </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>... or if the enum is in a namespace:</p><div class="language-cpp line-numbers-mode"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Bikeshed</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">enum</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Colours</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Red</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Green</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Blue</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Important!: This macro must appear at top level scope - not inside a namespace</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// You can fully qualify the names, or use a using if you prefer</span></span>
<span class="line"><span style="color:#82AAFF;">CATCH_REGISTER_ENUM</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Bikeshed</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Colours</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Bikeshed</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Colours</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Red</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Bikeshed</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Colours</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Green</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Bikeshed</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Colours</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Blue </span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">TEST_CASE</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">REQUIRE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Bikeshed</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Colours</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Red </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Bikeshed</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Colours</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Blue </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="floating-point-precision" tabindex="-1">Floating point precision <a class="header-anchor" href="#floating-point-precision" aria-hidden="true">#</a></h2><blockquote><p><a href="https://github.com/catchorg/Catch2/issues/1614" target="_blank" rel="noopener noreferrer">Introduced</a> in Catch2 2.8.0.</p></blockquote><p>Catch provides a built-in <code>StringMaker</code> specialization for both <code>float</code> and <code>double</code>. By default, it uses what we think is a reasonable precision, but you can customize it by modifying the <code>precision</code> static variable inside the <code>StringMaker</code> specialization, like so:</p><div class="language-cpp line-numbers-mode"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">Catch</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">StringMaker</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">float</span><span style="color:#89DDFF;">&gt;::</span><span style="color:#A6ACCD;">precision </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">15</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">float</span><span style="color:#A6ACCD;"> testFloat1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.12345678901234567899f</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">float</span><span style="color:#A6ACCD;"> testFloat2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.12345678991234567899f</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">REQUIRE</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">testFloat1 </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> testFloat2</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>This assertion will fail and print out the <code>testFloat1</code> and <code>testFloat2</code> to 15 decimal places.</p><hr><p><a href="./Readme.html#top">Home</a></p>`,31),o=[p];function t(r,c,i,F,y,D){return a(),n("div",null,o)}var u=s(l,[["render",t]]);export{C as __pageData,u as default};
