<?xml version="1.0" encoding="UTF-8"?>
<Catch2TestRun name="<exe-name>" rng-seed="1" xml-format-version="3" catch2-version="<version>" filters="&quot;*&quot; ~[!nonportable] ~[!benchmark] ~[approvals]">
  <TestCase name="# A test name that starts with a #" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="#1027: Bitfields can be captured" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
      <Original>
        y.v == 0
      </Original>
      <Expanded>
        0 == 0
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
      <Original>
        0 == y.v
      </Original>
      <Expanded>
        0 == 0
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="#1147" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
      <Original>
        t1 == t2
      </Original>
      <Expanded>
        {?} == {?}
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
      <Original>
        t1 != t2
      </Original>
      <Expanded>
        {?} != {?}
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
      <Original>
        t1 &lt; t2
      </Original>
      <Expanded>
        {?} &lt; {?}
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
      <Original>
        t1 > t2
      </Original>
      <Expanded>
        {?} > {?}
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
      <Original>
        t1 &lt;= t2
      </Original>
      <Expanded>
        {?} &lt;= {?}
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
      <Original>
        t1 >= t2
      </Original>
      <Expanded>
        {?} >= {?}
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="#1175 - Hidden Test" tags="[.]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="#1238" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
    <Info filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
      uarr := "123"
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
      sarr := "456"
    </Info>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
      <Original>
        std::memcmp(uarr, "123", sizeof(uarr)) == 0
      </Original>
      <Expanded>
        0 == 0
      </Expanded>
    </Expression>
    <Info filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
      uarr := "123"
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
      sarr := "456"
    </Info>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
      <Original>
        std::memcmp(sarr, "456", sizeof(sarr)) == 0
      </Original>
      <Expanded>
        0 == 0
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="#1245" tags="[compilation]" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="#1319: Sections can have description (even if it is not saved" tags="[compilation]" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
    <Section name="SectionName" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="#1403" tags="[compilation]" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
      <Original>
        h1 == h2
      </Original>
      <Expanded>
        [1403 helper] == [1403 helper]
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="#1455 - INFO and WARN can start with a linebreak" tags="[.][messages]" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >

This info message starts with a linebreak
    </Info>
    <Warning filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >

This warning message starts with a linebreak
    </Warning>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="#1514: stderr/stdout is not captured in tests aborted by an exception" tags="[.][output-capture][regression]" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
    <Failure filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      1514
    </Failure>
    <OverallResult success="false" skips="0">
      <StdOut>
This would not be caught previously
      </StdOut>
      <StdErr>
Nor would this
      </StdErr>
    </OverallResult>
  </TestCase>
  <TestCase name="#1548" tags="[compilation]" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
      <Original>
        std::is_same&lt;TypeList&lt;int>, TypeList&lt;int>>::value
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="#1905 -- test spec parser properly clears internal state between compound tests" tags="[command-line][test-spec]" filename="tests/<exe-name>/IntrospectiveTests/TestSpec.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/TestSpec.tests.cpp" >
      <Original>
        spec.matches(*fakeTestCase("spec . char"))
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/TestSpec.tests.cpp" >
      <Original>
        spec.matches(*fakeTestCase("spec , char"))
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/TestSpec.tests.cpp" >
      <Original>
        !(spec.matches(*fakeTestCase(R"(spec \, char)")))
      </Original>
      <Expanded>
        !false
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="#1912 -- test spec parser handles escaping" tags="[command-line][test-spec]" filename="tests/<exe-name>/IntrospectiveTests/TestSpec.tests.cpp" >
    <Section name="Various parentheses" filename="tests/<exe-name>/IntrospectiveTests/TestSpec.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/TestSpec.tests.cpp" >
        <Original>
          spec.matches(*fakeTestCase(R"(spec {a} char)"))
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/TestSpec.tests.cpp" >
        <Original>
          spec.matches(*fakeTestCase(R"(spec [a] char)"))
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/TestSpec.tests.cpp" >
        <Original>
          !(spec.matches(*fakeTestCase("differs but has similar tag", "[a]")))
        </Original>
        <Expanded>
          !false
        </Expanded>
      </Expression>
      <OverallResults successes="3" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="backslash in test name" filename="tests/<exe-name>/IntrospectiveTests/TestSpec.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/TestSpec.tests.cpp" >
        <Original>
          spec.matches(*fakeTestCase(R"(spec \ char)"))
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="#1913 - GENERATE inside a for loop should not keep recreating the generator" tags="[generators][regression]" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        counter &lt; 7
      </Original>
      <Expanded>
        3 &lt; 7
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        counter &lt; 7
      </Original>
      <Expanded>
        6 &lt; 7
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="#1913 - GENERATEs can share a line" tags="[generators][regression]" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        i != j
      </Original>
      <Expanded>
        1 != 3
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        i != j
      </Original>
      <Expanded>
        1 != 4
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        i != j
      </Original>
      <Expanded>
        2 != 3
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        i != j
      </Original>
      <Expanded>
        2 != 4
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="#1938 - GENERATE after a section" tags="[.][generators][regression]" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
    <Section name="A" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="B" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
        <Original>
          m
        </Original>
        <Expanded>
          1
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="B" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
        <Original>
          m
        </Original>
        <Expanded>
          2
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="B" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
        <Original>
          m
        </Original>
        <Expanded>
          3
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="#1938 - Section followed by flat generate" tags="[.][generators][regression]" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
    <Section name="A" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
        <Original>
          1
        </Original>
        <Expanded>
          1
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Original>
        m
      </Original>
      <Expanded>
        2
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Original>
        m
      </Original>
      <Expanded>
        3
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="#1938 - flat generate" tags="[.][generators][regression]" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Original>
        m
      </Original>
      <Expanded>
        1
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Original>
        m
      </Original>
      <Expanded>
        2
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Original>
        m
      </Original>
      <Expanded>
        3
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="#1938 - mixed sections and generates" tags="[.][generators][regression]" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
    <Section name="A" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Info filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      i := 1
    </Info>
    <Info filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      j := 3
    </Info>
    <Info filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      k := 5
    </Info>
    <Section name="B" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Info filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      i := 1
    </Info>
    <Info filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      j := 3
    </Info>
    <Info filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      k := 6
    </Info>
    <Section name="B" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Info filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      i := 1
    </Info>
    <Info filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      j := 4
    </Info>
    <Info filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      k := 5
    </Info>
    <Info filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      i := 1
    </Info>
    <Info filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      j := 4
    </Info>
    <Info filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      k := 6
    </Info>
    <Section name="A" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Info filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      i := 2
    </Info>
    <Info filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      j := 3
    </Info>
    <Info filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      k := 5
    </Info>
    <Section name="B" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Info filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      i := 2
    </Info>
    <Info filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      j := 3
    </Info>
    <Info filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      k := 6
    </Info>
    <Section name="B" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Info filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      i := 2
    </Info>
    <Info filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      j := 4
    </Info>
    <Info filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      k := 5
    </Info>
    <Info filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      i := 2
    </Info>
    <Info filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      j := 4
    </Info>
    <Info filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      k := 6
    </Info>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="#1938 - nested generate" tags="[.][generators][regression]" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Original>
        m
      </Original>
      <Expanded>
        1
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Original>
        n
      </Original>
      <Expanded>
        1
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Original>
        m
      </Original>
      <Expanded>
        1
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Original>
        n
      </Original>
      <Expanded>
        2
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Original>
        m
      </Original>
      <Expanded>
        1
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Original>
        n
      </Original>
      <Expanded>
        3
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Original>
        m
      </Original>
      <Expanded>
        2
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Original>
        n
      </Original>
      <Expanded>
        1
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Original>
        m
      </Original>
      <Expanded>
        2
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Original>
        n
      </Original>
      <Expanded>
        2
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Original>
        m
      </Original>
      <Expanded>
        2
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Original>
        n
      </Original>
      <Expanded>
        3
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Original>
        m
      </Original>
      <Expanded>
        3
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Original>
        n
      </Original>
      <Expanded>
        1
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Original>
        m
      </Original>
      <Expanded>
        3
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Original>
        n
      </Original>
      <Expanded>
        2
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Original>
        m
      </Original>
      <Expanded>
        3
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Original>
        n
      </Original>
      <Expanded>
        3
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="#1954 - 7 arg template test case sig compiles - 1, 1, 1, 1, 1, 0, 0" tags="[.][compilation][regression]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="#1954 - 7 arg template test case sig compiles - 5, 1, 1, 1, 1, 0, 0" tags="[.][compilation][regression]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="#1954 - 7 arg template test case sig compiles - 5, 3, 1, 1, 1, 0, 0" tags="[.][compilation][regression]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="#2152 - ULP checks between differently signed values were wrong - double" tags="[floating-point][matchers][ulp]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        smallest_non_zero, WithinULP( -smallest_non_zero, 2 )
      </Original>
      <Expanded>
        0.0 is within 2 ULPs of -4.9406564584124654e-324 ([-1.4821969375237396e-323, 4.9406564584124654e-324])
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        smallest_non_zero, !WithinULP( -smallest_non_zero, 1 )
      </Original>
      <Expanded>
        0.0 not is within 1 ULPs of -4.9406564584124654e-324 ([-9.8813129168249309e-324, -0.0000000000000000e+00])
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="#2152 - ULP checks between differently signed values were wrong - float" tags="[floating-point][matchers][ulp]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        smallest_non_zero, WithinULP( -smallest_non_zero, 2 )
      </Original>
      <Expanded>
        0.0f is within 2 ULPs of -1.40129846e-45f ([-4.20389539e-45, 1.40129846e-45])
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        smallest_non_zero, !WithinULP( -smallest_non_zero, 1 )
      </Original>
      <Expanded>
        0.0f not is within 1 ULPs of -1.40129846e-45f ([-2.80259693e-45, -0.00000000e+00])
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="#2615 - Throwing in constructor generator fails test case but does not abort" tags="[!shouldfail]" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
    <Exception filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      failure to init
    </Exception>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="#748 - captures with unexpected exceptions" tags="[!shouldfail][!throws][.][failing]" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
    <Section name="outside assertions" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
      <Info filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
        answer := 42
      </Info>
      <Exception filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
        expected exception
      </Exception>
      <OverallResults successes="0" failures="0" expectedFailures="1" skipped="false"/>
    </Section>
    <Section name="inside REQUIRE_NOTHROW" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
      <Info filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
        answer := 42
      </Info>
      <Expression success="false" type="REQUIRE_NOTHROW" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
        <Original>
          thisThrows()
        </Original>
        <Expanded>
          thisThrows()
        </Expanded>
        <Exception filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
          expected exception
        </Exception>
      </Expression>
      <OverallResults successes="0" failures="0" expectedFailures="1" skipped="false"/>
    </Section>
    <Section name="inside REQUIRE_THROWS" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
      <Info filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
        answer := 42
      </Info>
      <Expression success="true" type="REQUIRE_THROWS" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
        <Original>
          thisThrows()
        </Original>
        <Expanded>
          thisThrows()
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="#809" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
      <Original>
        42 == f
      </Original>
      <Expanded>
        42 == {?}
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="#833" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
      <Original>
        a == t
      </Original>
      <Expanded>
        3 == 3
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
      <Original>
        a == t
      </Original>
      <Expanded>
        3 == 3
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_THROWS" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
      <Original>
        throws_int(true)
      </Original>
      <Expanded>
        throws_int(true)
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK_THROWS_AS" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
      <Original>
        throws_int(true), int
      </Original>
      <Expanded>
        throws_int(true), int
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_NOTHROW" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
      <Original>
        throws_int(false)
      </Original>
      <Expanded>
        throws_int(false)
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
      <Original>
        "aaa", Catch::Matchers::EndsWith("aaa")
      </Original>
      <Expanded>
        "aaa" ends with: "aaa"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
      <Original>
        templated_tests&lt;int>(3)
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="#835 -- errno should not be touched by Catch2" tags="[!shouldfail][.][failing]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        f() == 0
      </Original>
      <Expanded>
        1 == 0
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        errno_after == 1
      </Original>
      <Expanded>
        1 == 1
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="#872" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
    <Info filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
      dummy := 0
    </Info>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
      <Original>
        x == 4
      </Original>
      <Expanded>
        {?} == 4
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="#961 -- Dynamically created sections should all be reported" tags="[.]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Section name="Looped section 0" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Looped section 1" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Looped section 2" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Looped section 3" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Looped section 4" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="'Not' checks that should fail" tags="[.][failing]" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        false != false
      </Original>
      <Expanded>
        false != false
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        true != true
      </Original>
      <Expanded>
        true != true
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        !true
      </Original>
      <Expanded>
        false
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK_FALSE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        !(true)
      </Original>
      <Expanded>
        !true
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        !trueValue
      </Original>
      <Expanded>
        false
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK_FALSE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        !(trueValue)
      </Original>
      <Expanded>
        !true
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        !(1 == 1)
      </Original>
      <Expanded>
        false
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK_FALSE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        !(1 == 1)
      </Original>
      <Expanded>
        !(1 == 1)
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="'Not' checks that should succeed" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        false == false
      </Original>
      <Expanded>
        false == false
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        true == true
      </Original>
      <Expanded>
        true == true
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        !false
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        !(false)
      </Original>
      <Expanded>
        !false
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        !falseValue
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        !(falseValue)
      </Original>
      <Expanded>
        !false
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        !(1 == 2)
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        !(1 == 2)
      </Original>
      <Expanded>
        !(1 == 2)
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="(unimplemented) static bools can be evaluated" tags="[Tricky]" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
    <Section name="compare to true" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
        <Original>
          is_true&lt;true>::value == true
        </Original>
        <Expanded>
          true == true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
        <Original>
          true == is_true&lt;true>::value
        </Original>
        <Expanded>
          true == true
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="compare to false" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
        <Original>
          is_true&lt;false>::value == false
        </Original>
        <Expanded>
          false == false
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
        <Original>
          false == is_true&lt;false>::value
        </Original>
        <Expanded>
          false == false
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="negation" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
        <Original>
          !is_true&lt;false>::value
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="double negation" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
        <Original>
          !!is_true&lt;true>::value
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="direct" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
        <Original>
          is_true&lt;true>::value
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
        <Original>
          !(is_true&lt;false>::value)
        </Original>
        <Expanded>
          !false
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="3x3x3 ints" tags="[generators]" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; y
      </Original>
      <Expanded>
        1 &lt; 4
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        y &lt; z
      </Original>
      <Expanded>
        4 &lt; 7
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; z
      </Original>
      <Expanded>
        1 &lt; 7
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; y
      </Original>
      <Expanded>
        1 &lt; 4
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        y &lt; z
      </Original>
      <Expanded>
        4 &lt; 8
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; z
      </Original>
      <Expanded>
        1 &lt; 8
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; y
      </Original>
      <Expanded>
        1 &lt; 4
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        y &lt; z
      </Original>
      <Expanded>
        4 &lt; 9
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; z
      </Original>
      <Expanded>
        1 &lt; 9
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; y
      </Original>
      <Expanded>
        1 &lt; 5
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        y &lt; z
      </Original>
      <Expanded>
        5 &lt; 7
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; z
      </Original>
      <Expanded>
        1 &lt; 7
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; y
      </Original>
      <Expanded>
        1 &lt; 5
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        y &lt; z
      </Original>
      <Expanded>
        5 &lt; 8
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; z
      </Original>
      <Expanded>
        1 &lt; 8
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; y
      </Original>
      <Expanded>
        1 &lt; 5
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        y &lt; z
      </Original>
      <Expanded>
        5 &lt; 9
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; z
      </Original>
      <Expanded>
        1 &lt; 9
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; y
      </Original>
      <Expanded>
        1 &lt; 6
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        y &lt; z
      </Original>
      <Expanded>
        6 &lt; 7
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; z
      </Original>
      <Expanded>
        1 &lt; 7
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; y
      </Original>
      <Expanded>
        1 &lt; 6
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        y &lt; z
      </Original>
      <Expanded>
        6 &lt; 8
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; z
      </Original>
      <Expanded>
        1 &lt; 8
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; y
      </Original>
      <Expanded>
        1 &lt; 6
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        y &lt; z
      </Original>
      <Expanded>
        6 &lt; 9
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; z
      </Original>
      <Expanded>
        1 &lt; 9
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; y
      </Original>
      <Expanded>
        2 &lt; 4
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        y &lt; z
      </Original>
      <Expanded>
        4 &lt; 7
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; z
      </Original>
      <Expanded>
        2 &lt; 7
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; y
      </Original>
      <Expanded>
        2 &lt; 4
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        y &lt; z
      </Original>
      <Expanded>
        4 &lt; 8
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; z
      </Original>
      <Expanded>
        2 &lt; 8
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; y
      </Original>
      <Expanded>
        2 &lt; 4
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        y &lt; z
      </Original>
      <Expanded>
        4 &lt; 9
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; z
      </Original>
      <Expanded>
        2 &lt; 9
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; y
      </Original>
      <Expanded>
        2 &lt; 5
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        y &lt; z
      </Original>
      <Expanded>
        5 &lt; 7
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; z
      </Original>
      <Expanded>
        2 &lt; 7
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; y
      </Original>
      <Expanded>
        2 &lt; 5
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        y &lt; z
      </Original>
      <Expanded>
        5 &lt; 8
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; z
      </Original>
      <Expanded>
        2 &lt; 8
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; y
      </Original>
      <Expanded>
        2 &lt; 5
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        y &lt; z
      </Original>
      <Expanded>
        5 &lt; 9
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; z
      </Original>
      <Expanded>
        2 &lt; 9
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; y
      </Original>
      <Expanded>
        2 &lt; 6
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        y &lt; z
      </Original>
      <Expanded>
        6 &lt; 7
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; z
      </Original>
      <Expanded>
        2 &lt; 7
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; y
      </Original>
      <Expanded>
        2 &lt; 6
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        y &lt; z
      </Original>
      <Expanded>
        6 &lt; 8
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; z
      </Original>
      <Expanded>
        2 &lt; 8
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; y
      </Original>
      <Expanded>
        2 &lt; 6
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        y &lt; z
      </Original>
      <Expanded>
        6 &lt; 9
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; z
      </Original>
      <Expanded>
        2 &lt; 9
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; y
      </Original>
      <Expanded>
        3 &lt; 4
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        y &lt; z
      </Original>
      <Expanded>
        4 &lt; 7
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; z
      </Original>
      <Expanded>
        3 &lt; 7
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; y
      </Original>
      <Expanded>
        3 &lt; 4
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        y &lt; z
      </Original>
      <Expanded>
        4 &lt; 8
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; z
      </Original>
      <Expanded>
        3 &lt; 8
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; y
      </Original>
      <Expanded>
        3 &lt; 4
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        y &lt; z
      </Original>
      <Expanded>
        4 &lt; 9
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; z
      </Original>
      <Expanded>
        3 &lt; 9
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; y
      </Original>
      <Expanded>
        3 &lt; 5
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        y &lt; z
      </Original>
      <Expanded>
        5 &lt; 7
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; z
      </Original>
      <Expanded>
        3 &lt; 7
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; y
      </Original>
      <Expanded>
        3 &lt; 5
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        y &lt; z
      </Original>
      <Expanded>
        5 &lt; 8
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; z
      </Original>
      <Expanded>
        3 &lt; 8
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; y
      </Original>
      <Expanded>
        3 &lt; 5
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        y &lt; z
      </Original>
      <Expanded>
        5 &lt; 9
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; z
      </Original>
      <Expanded>
        3 &lt; 9
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; y
      </Original>
      <Expanded>
        3 &lt; 6
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        y &lt; z
      </Original>
      <Expanded>
        6 &lt; 7
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; z
      </Original>
      <Expanded>
        3 &lt; 7
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; y
      </Original>
      <Expanded>
        3 &lt; 6
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        y &lt; z
      </Original>
      <Expanded>
        6 &lt; 8
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; z
      </Original>
      <Expanded>
        3 &lt; 8
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; y
      </Original>
      <Expanded>
        3 &lt; 6
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        y &lt; z
      </Original>
      <Expanded>
        6 &lt; 9
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        x &lt; z
      </Original>
      <Expanded>
        3 &lt; 9
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="A METHOD_AS_TEST_CASE based test run that fails" tags="[.][class][failing]" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
    <Expression success="false" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
      <Original>
        s == "world"
      </Original>
      <Expanded>
        "hello" == "world"
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="A METHOD_AS_TEST_CASE based test run that succeeds" tags="[class]" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
      <Original>
        s == "hello"
      </Original>
      <Expanded>
        "hello" == "hello"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that fails - Template_Foo&lt;float>" tags="[.][class][failing][product][template]" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
    <Expression success="false" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
      <Original>
        Template_Fixture_2&lt;TestType>::m_a.size() == 1
      </Original>
      <Expanded>
        0 == 1
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that fails - Template_Foo&lt;int>" tags="[.][class][failing][product][template]" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
    <Expression success="false" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
      <Original>
        Template_Fixture_2&lt;TestType>::m_a.size() == 1
      </Original>
      <Expanded>
        0 == 1
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that fails - std::vector&lt;float>" tags="[.][class][failing][product][template]" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
    <Expression success="false" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
      <Original>
        Template_Fixture_2&lt;TestType>::m_a.size() == 1
      </Original>
      <Expanded>
        0 == 1
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that fails - std::vector&lt;int>" tags="[.][class][failing][product][template]" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
    <Expression success="false" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
      <Original>
        Template_Fixture_2&lt;TestType>::m_a.size() == 1
      </Original>
      <Expanded>
        0 == 1
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that succeeds - Template_Foo&lt;float>" tags="[class][product][template]" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
      <Original>
        Template_Fixture_2&lt;TestType>::m_a.size() == 0
      </Original>
      <Expanded>
        0 == 0
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that succeeds - Template_Foo&lt;int>" tags="[class][product][template]" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
      <Original>
        Template_Fixture_2&lt;TestType>::m_a.size() == 0
      </Original>
      <Expanded>
        0 == 0
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that succeeds - std::vector&lt;float>" tags="[class][product][template]" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
      <Original>
        Template_Fixture_2&lt;TestType>::m_a.size() == 0
      </Original>
      <Expanded>
        0 == 0
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that succeeds - std::vector&lt;int>" tags="[class][product][template]" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
      <Original>
        Template_Fixture_2&lt;TestType>::m_a.size() == 0
      </Original>
      <Expanded>
        0 == 0
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that fails - Template_Foo_2&lt;float, 6>" tags="[.][class][failing][nttp][product][template]" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
    <Expression success="false" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
      <Original>
        Template_Fixture_2&lt;TestType>{}.m_a.size() &lt; 2
      </Original>
      <Expanded>
        6 &lt; 2
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that fails - Template_Foo_2&lt;int, 2>" tags="[.][class][failing][nttp][product][template]" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
    <Expression success="false" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
      <Original>
        Template_Fixture_2&lt;TestType>{}.m_a.size() &lt; 2
      </Original>
      <Expanded>
        2 &lt; 2
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that fails - std::array&lt;float, 6>" tags="[.][class][failing][nttp][product][template]" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
    <Expression success="false" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
      <Original>
        Template_Fixture_2&lt;TestType>{}.m_a.size() &lt; 2
      </Original>
      <Expanded>
        6 &lt; 2
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that fails - std::array&lt;int, 2>" tags="[.][class][failing][nttp][product][template]" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
    <Expression success="false" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
      <Original>
        Template_Fixture_2&lt;TestType>{}.m_a.size() &lt; 2
      </Original>
      <Expanded>
        2 &lt; 2
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that succeeds - Template_Foo_2&lt;float,6>" tags="[class][nttp][product][template]" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
      <Original>
        Template_Fixture_2&lt;TestType>{}.m_a.size() >= 2
      </Original>
      <Expanded>
        6 >= 2
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that succeeds - Template_Foo_2&lt;int,2>" tags="[class][nttp][product][template]" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
      <Original>
        Template_Fixture_2&lt;TestType>{}.m_a.size() >= 2
      </Original>
      <Expanded>
        2 >= 2
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that succeeds - std::array&lt;float,6>" tags="[class][nttp][product][template]" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
      <Original>
        Template_Fixture_2&lt;TestType>{}.m_a.size() >= 2
      </Original>
      <Expanded>
        6 >= 2
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that succeeds - std::array&lt;int,2>" tags="[class][nttp][product][template]" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
      <Original>
        Template_Fixture_2&lt;TestType>{}.m_a.size() >= 2
      </Original>
      <Expanded>
        2 >= 2
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="A TEMPLATE_TEST_CASE_METHOD based test run that fails - double" tags="[.][class][failing][template]" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
    <Expression success="false" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
      <Original>
        Template_Fixture&lt;TestType>::m_a == 2
      </Original>
      <Expanded>
        1.0 == 2
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="A TEMPLATE_TEST_CASE_METHOD based test run that fails - float" tags="[.][class][failing][template]" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
    <Expression success="false" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
      <Original>
        Template_Fixture&lt;TestType>::m_a == 2
      </Original>
      <Expanded>
        1.0f == 2
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="A TEMPLATE_TEST_CASE_METHOD based test run that fails - int" tags="[.][class][failing][template]" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
    <Expression success="false" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
      <Original>
        Template_Fixture&lt;TestType>::m_a == 2
      </Original>
      <Expanded>
        1 == 2
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="A TEMPLATE_TEST_CASE_METHOD based test run that succeeds - double" tags="[class][template]" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
      <Original>
        Template_Fixture&lt;TestType>::m_a == 1
      </Original>
      <Expanded>
        1.0 == 1
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="A TEMPLATE_TEST_CASE_METHOD based test run that succeeds - float" tags="[class][template]" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
      <Original>
        Template_Fixture&lt;TestType>::m_a == 1
      </Original>
      <Expanded>
        1.0f == 1
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="A TEMPLATE_TEST_CASE_METHOD based test run that succeeds - int" tags="[class][template]" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
      <Original>
        Template_Fixture&lt;TestType>::m_a == 1
      </Original>
      <Expanded>
        1 == 1
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="A TEMPLATE_TEST_CASE_METHOD_SIG based test run that fails - 1" tags="[.][class][failing][nttp][template]" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
    <Expression success="false" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
      <Original>
        Nttp_Fixture&lt;V>::value == 0
      </Original>
      <Expanded>
        1 == 0
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="A TEMPLATE_TEST_CASE_METHOD_SIG based test run that fails - 3" tags="[.][class][failing][nttp][template]" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
    <Expression success="false" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
      <Original>
        Nttp_Fixture&lt;V>::value == 0
      </Original>
      <Expanded>
        3 == 0
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="A TEMPLATE_TEST_CASE_METHOD_SIG based test run that fails - 6" tags="[.][class][failing][nttp][template]" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
    <Expression success="false" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
      <Original>
        Nttp_Fixture&lt;V>::value == 0
      </Original>
      <Expanded>
        6 == 0
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="A TEMPLATE_TEST_CASE_METHOD_SIG based test run that succeeds - 1" tags="[class][nttp][template]" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
      <Original>
        Nttp_Fixture&lt;V>::value > 0
      </Original>
      <Expanded>
        1 > 0
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="A TEMPLATE_TEST_CASE_METHOD_SIG based test run that succeeds - 3" tags="[class][nttp][template]" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
      <Original>
        Nttp_Fixture&lt;V>::value > 0
      </Original>
      <Expanded>
        3 > 0
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="A TEMPLATE_TEST_CASE_METHOD_SIG based test run that succeeds - 6" tags="[class][nttp][template]" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
      <Original>
        Nttp_Fixture&lt;V>::value > 0
      </Original>
      <Expanded>
        6 > 0
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="A TEST_CASE_METHOD based test run that fails" tags="[.][class][failing]" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
    <Expression success="false" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
      <Original>
        m_a == 2
      </Original>
      <Expanded>
        1 == 2
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="A TEST_CASE_METHOD based test run that succeeds" tags="[class]" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
      <Original>
        m_a == 1
      </Original>
      <Expanded>
        1 == 1
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="A Template product test case - Foo&lt;float>" tags="[product][template]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        x.size() == 0
      </Original>
      <Expanded>
        0 == 0
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="A Template product test case - Foo&lt;int>" tags="[product][template]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        x.size() == 0
      </Original>
      <Expanded>
        0 == 0
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="A Template product test case - std::vector&lt;float>" tags="[product][template]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        x.size() == 0
      </Original>
      <Expanded>
        0 == 0
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="A Template product test case - std::vector&lt;int>" tags="[product][template]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        x.size() == 0
      </Original>
      <Expanded>
        0 == 0
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="A Template product test case with array signature - Bar&lt;float, 42>" tags="[nttp][product][template]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        x.size() > 0
      </Original>
      <Expanded>
        42 > 0
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="A Template product test case with array signature - Bar&lt;int, 9>" tags="[nttp][product][template]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        x.size() > 0
      </Original>
      <Expanded>
        9 > 0
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="A Template product test case with array signature - std::array&lt;float, 42>" tags="[nttp][product][template]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        x.size() > 0
      </Original>
      <Expanded>
        42 > 0
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="A Template product test case with array signature - std::array&lt;int, 9>" tags="[nttp][product][template]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        x.size() > 0
      </Original>
      <Expanded>
        9 > 0
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="A comparison that uses literals instead of the normal constructor" tags="[Approx]" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        d == 1.23_a
      </Original>
      <Expanded>
        1.23 == Approx( 1.23 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        d != 1.22_a
      </Original>
      <Expanded>
        1.23 != Approx( 1.22 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        -d == -1.23_a
      </Original>
      <Expanded>
        -1.23 == Approx( -1.23 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        d == 1.2_a .epsilon(.1)
      </Original>
      <Expanded>
        1.23 == Approx( 1.2 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        d != 1.2_a .epsilon(.001)
      </Original>
      <Expanded>
        1.23 != Approx( 1.2 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        d == 1_a .epsilon(.3)
      </Original>
      <Expanded>
        1.23 == Approx( 1.0 )
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="A couple of nested sections followed by a failure" tags="[.][failing]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Section name="Outer" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Section name="Inner" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Failure filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      to infinity and beyond
    </Failure>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="A failing expression with a non streamable type is still captured" tags="[.][failing][Tricky]" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      <Original>
        &amp;o1 == &amp;o2
      </Original>
      <Expanded>
        0x<hex digits> == 0x<hex digits>
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      <Original>
        o1 == o2
      </Original>
      <Expanded>
        {?} == {?}
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="Absolute margin" tags="[Approx]" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        104.0 != Approx(100.0)
      </Original>
      <Expanded>
        104.0 != Approx( 100.0 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        104.0 == Approx(100.0).margin(5)
      </Original>
      <Expanded>
        104.0 == Approx( 100.0 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        104.0 == Approx(100.0).margin(4)
      </Original>
      <Expanded>
        104.0 == Approx( 100.0 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        104.0 != Approx(100.0).margin(3)
      </Original>
      <Expanded>
        104.0 != Approx( 100.0 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        100.3 != Approx(100.0)
      </Original>
      <Expanded>
        100.3 != Approx( 100.0 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        100.3 == Approx(100.0).margin(0.5)
      </Original>
      <Expanded>
        100.3 == Approx( 100.0 )
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="An empty test with no assertions" tags="[empty]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="An expression with side-effects should only be evaluated once" tags="[Tricky]" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      <Original>
        i++ == 7
      </Original>
      <Expanded>
        7 == 7
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      <Original>
        i++ == 8
      </Original>
      <Expanded>
        8 == 8
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="An unchecked exception reports the line of the last assertion" tags="[!throws][.][failing]" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
      <Original>
        1 == 1
      </Original>
      <Expanded>
        1 == 1
      </Expanded>
    </Expression>
    <Expression success="false" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
      <Original>
        {Unknown expression after the reported line}
      </Original>
      <Expanded>
        {Unknown expression after the reported line}
      </Expanded>
      <Exception filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
        unexpected exception
      </Exception>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="Anonymous test case 1" filename="tests/<exe-name>/UsageTests/VariadicMacros.tests.cpp" >
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Approx setters validate their arguments" tags="[Approx]" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
    <Expression success="true" type="REQUIRE_NOTHROW" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        Approx(0).margin(0)
      </Original>
      <Expanded>
        Approx(0).margin(0)
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_NOTHROW" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        Approx(0).margin(1234656)
      </Original>
      <Expanded>
        Approx(0).margin(1234656)
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_THROWS_AS" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        Approx(0).margin(-2), std::domain_error
      </Original>
      <Expanded>
        Approx(0).margin(-2), std::domain_error
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_NOTHROW" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        Approx(0).epsilon(0)
      </Original>
      <Expanded>
        Approx(0).epsilon(0)
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_NOTHROW" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        Approx(0).epsilon(1)
      </Original>
      <Expanded>
        Approx(0).epsilon(1)
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_THROWS_AS" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        Approx(0).epsilon(-0.001), std::domain_error
      </Original>
      <Expanded>
        Approx(0).epsilon(-0.001), std::domain_error
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_THROWS_AS" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        Approx(0).epsilon(1.0001), std::domain_error
      </Original>
      <Expanded>
        Approx(0).epsilon(1.0001), std::domain_error
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Approx with exactly-representable margin" tags="[Approx]" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        0.25f == Approx(0.0f).margin(0.25f)
      </Original>
      <Expanded>
        0.25f == Approx( 0.0 )
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        0.0f == Approx(0.25f).margin(0.25f)
      </Original>
      <Expanded>
        0.0f == Approx( 0.25 )
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        0.5f == Approx(0.25f).margin(0.25f)
      </Original>
      <Expanded>
        0.5f == Approx( 0.25 )
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        245.0f == Approx(245.25f).margin(0.25f)
      </Original>
      <Expanded>
        245.0f == Approx( 245.25 )
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        245.5f == Approx(245.25f).margin(0.25f)
      </Original>
      <Expanded>
        245.5f == Approx( 245.25 )
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Approximate PI" tags="[Approx][PI]" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        divide( 22, 7 ) == Approx( 3.141 ).epsilon( 0.001 )
      </Original>
      <Expanded>
        3.1428571429 == Approx( 3.141 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        divide( 22, 7 ) != Approx( 3.141 ).epsilon( 0.0001 )
      </Original>
      <Expanded>
        3.1428571429 != Approx( 3.141 )
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Approximate comparisons with different epsilons" tags="[Approx]" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        d != Approx( 1.231 )
      </Original>
      <Expanded>
        1.23 != Approx( 1.231 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        d == Approx( 1.231 ).epsilon( 0.1 )
      </Original>
      <Expanded>
        1.23 == Approx( 1.231 )
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Approximate comparisons with floats" tags="[Approx]" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        1.23f == Approx( 1.23f )
      </Original>
      <Expanded>
        1.23f == Approx( 1.2300000191 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        0.0f == Approx( 0.0f )
      </Original>
      <Expanded>
        0.0f == Approx( 0.0 )
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Approximate comparisons with ints" tags="[Approx]" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        1 == Approx( 1 )
      </Original>
      <Expanded>
        1 == Approx( 1.0 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        0 == Approx( 0 )
      </Original>
      <Expanded>
        0 == Approx( 0.0 )
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Approximate comparisons with mixed numeric types" tags="[Approx]" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        1.0f == Approx( 1 )
      </Original>
      <Expanded>
        1.0f == Approx( 1.0 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        0 == Approx( dZero)
      </Original>
      <Expanded>
        0 == Approx( 0.0 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        0 == Approx( dSmall ).margin( 0.001 )
      </Original>
      <Expanded>
        0 == Approx( 0.00001 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        1.234f == Approx( dMedium )
      </Original>
      <Expanded>
        1.234f == Approx( 1.234 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        dMedium == Approx( 1.234f )
      </Original>
      <Expanded>
        1.234 == Approx( 1.2339999676 )
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Arbitrary predicate matcher" tags="[generic][matchers]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Section name="Function pointer" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          1, Predicate&lt;int>( alwaysTrue, "always true" )
        </Original>
        <Expanded>
          1 matches predicate: "always true"
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          1, !Predicate&lt;int>( alwaysFalse, "always false" )
        </Original>
        <Expanded>
          1 not matches predicate: "always false"
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Lambdas + different type" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          "Hello olleH", Predicate&lt;std::string>( []( std::string const&amp; str ) -> bool { return str.front() == str.back(); }, "First and last character should be equal" )
        </Original>
        <Expanded>
          "Hello olleH" matches predicate: "First and last character should be equal"
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          "This wouldn't pass", !Predicate&lt;std::string>( []( std::string const&amp; str ) -> bool { return str.front() == str.back(); } )
        </Original>
        <Expanded>
          "This wouldn't pass" not matches undescribed predicate
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Assertion macros support bit operators and bool conversions" tags="[bitops][compilation]" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
      <Original>
        lhs | rhs
      </Original>
      <Expanded>
        Val: 1 | Val: 2
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
      <Original>
        !(lhs &amp; rhs)
      </Original>
      <Expanded>
        !(Val: 1 &amp; Val: 2)
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
      <Original>
        HasBitOperators{ 1 } &amp; HasBitOperators{ 1 }
      </Original>
      <Expanded>
        Val: 1 &amp; Val: 1
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
      <Original>
        lhs ^ rhs
      </Original>
      <Expanded>
        Val: 1 ^ Val: 2
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
      <Original>
        !(lhs ^ lhs)
      </Original>
      <Expanded>
        !(Val: 1 ^ Val: 1)
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Assertions then sections" tags="[Tricky]" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      <Original>
        true
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Section name="A section" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
        <Original>
          true
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Section name="Another section" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
          <Original>
            true
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      <Original>
        true
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Section name="A section" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
        <Original>
          true
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Section name="Another other section" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
          <Original>
            true
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Basic use of the Contains range matcher" tags="[contains][matchers][templated]" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
    <Section name="Different argument ranges, same element type, default comparison" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          a, Contains(1)
        </Original>
        <Expanded>
          { 1, 2, 3 } contains element 1
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          b, Contains(1)
        </Original>
        <Expanded>
          { 0, 1, 2 } contains element 1
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          c, !Contains(1)
        </Original>
        <Expanded>
          { 4, 5, 6 } not contains element 1
        </Expanded>
      </Expression>
      <OverallResults successes="3" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Different argument ranges, same element type, custom comparison" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          a, Contains(0, close_enough)
        </Original>
        <Expanded>
          { 1, 2, 3 } contains element 0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          b, Contains(0, close_enough)
        </Original>
        <Expanded>
          { 0, 1, 2 } contains element 0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          c, !Contains(0, close_enough)
        </Original>
        <Expanded>
          { 4, 5, 6 } not contains element 0
        </Expanded>
      </Expression>
      <OverallResults successes="3" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Different element type, custom comparisons" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          a, Contains(4, [](auto&amp;&amp; lhs, size_t sz) { return lhs.size() == sz; })
        </Original>
        <Expanded>
          { "abc", "abcd", "abcde" } contains element 4
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Can handle type that requires ADL-found free function begin and end" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          in, Contains(1)
        </Original>
        <Expanded>
          { 1, 2, 3, 4, 5 } contains element 1
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          in, !Contains(8)
        </Original>
        <Expanded>
          { 1, 2, 3, 4, 5 } not contains element 8
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Initialization with move only types" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          in, Contains(MoveOnlyTestElement{ 2 })
        </Original>
        <Expanded>
          { 1, 2, 3 } contains element 2
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          in, !Contains(MoveOnlyTestElement{ 9 })
        </Original>
        <Expanded>
          { 1, 2, 3 } not contains element 9
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Matching using matcher" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          in, Contains(Catch::Matchers::WithinAbs(0.5, 0.5))
        </Original>
        <Expanded>
          { 1.0, 2.0, 3.0, 0.0 } contains element matching is within 0.5 of 0.5
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Basic use of the Empty range matcher" tags="[empty][matchers][templated]" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
    <Section name="Simple, std-provided containers" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          empty_array, IsEmpty()
        </Original>
        <Expanded>
          {  } is empty
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          non_empty_array, !IsEmpty()
        </Original>
        <Expanded>
          { 0.0 } not is empty
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          empty_vec, IsEmpty()
        </Original>
        <Expanded>
          {  } is empty
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          non_empty_vec, !IsEmpty()
        </Original>
        <Expanded>
          { 'a', 'b', 'c' } not is empty
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          inner_lists_are_empty, !IsEmpty()
        </Original>
        <Expanded>
          { {  } } not is empty
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          inner_lists_are_empty.front(), IsEmpty()
        </Original>
        <Expanded>
          {  } is empty
        </Expanded>
      </Expression>
      <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Type with empty" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          has_empty{}, !IsEmpty()
        </Original>
        <Expanded>
          {?} not is empty
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Type requires ADL found empty free function" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          unrelated::ADL_empty{}, IsEmpty()
        </Original>
        <Expanded>
          {?} is empty
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="CAPTURE can deal with complex expressions" tags="[capture][messages]" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      a := 1
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      b := 2
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      c := 3
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      a + b := 3
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      a+b := 3
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      c > b := true
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      a == 1 := true
    </Info>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="CAPTURE can deal with complex expressions involving commas" tags="[capture][messages]" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      std::vector&lt;int>{1, 2, 3}[0, 1, 2] := 3
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      std::vector&lt;int>{1, 2, 3}[(0, 1)] := 2
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      std::vector&lt;int>{1, 2, 3}[0] := 1
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      (helper_1436&lt;int, int>{12, -12}) := { 12, -12 }
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      (helper_1436&lt;int, int>(-12, 12)) := { -12, 12 }
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      (1, 2) := 2
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      (2, 3) := 3
    </Info>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="CAPTURE parses string and character constants" tags="[capture][messages]" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      ("comma, in string", "escaped, \", ") := "escaped, ", "
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      "single quote in string,'," := "single quote in string,',"
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      "some escapes, \\,\\\\" := "some escapes, \,\\"
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      "some, ), unmatched, } prenheses {[&lt;" := "some, ), unmatched, } prenheses {[&lt;"
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      '"' := '"'
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      '\'' := '''
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      ',' := ','
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      '}' := '}'
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      ')' := ')'
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      '(' := '('
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      '{' := '{'
    </Info>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Capture and info messages" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
    <Section name="Capture should stringify like assertions" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
      <Info filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
        i := 2
      </Info>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
        <Original>
          true
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Info should NOT stringify the way assertions do" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
      <Info filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
        3
      </Info>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
        <Original>
          true
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="CaseInsensitiveEqualsTo is case insensitive" tags="[comparisons][string-case]" filename="tests/<exe-name>/IntrospectiveTests/Details.tests.cpp" >
    <Section name="Degenerate cases" filename="tests/<exe-name>/IntrospectiveTests/Details.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Details.tests.cpp" >
        <Original>
          eq( "", "" )
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Details.tests.cpp" >
        <Original>
          !(eq( "", "a" ))
        </Original>
        <Expanded>
          !false
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Plain comparisons" filename="tests/<exe-name>/IntrospectiveTests/Details.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Details.tests.cpp" >
        <Original>
          eq( "a", "a" )
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Details.tests.cpp" >
        <Original>
          eq( "a", "A" )
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Details.tests.cpp" >
        <Original>
          eq( "A", "a" )
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Details.tests.cpp" >
        <Original>
          eq( "A", "A" )
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Details.tests.cpp" >
        <Original>
          !(eq( "a", "b" ))
        </Original>
        <Expanded>
          !false
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Details.tests.cpp" >
        <Original>
          !(eq( "a", "B" ))
        </Original>
        <Expanded>
          !false
        </Expanded>
      </Expression>
      <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="CaseInsensitiveLess is case insensitive" tags="[comparisons][string-case]" filename="tests/<exe-name>/IntrospectiveTests/Details.tests.cpp" >
    <Section name="Degenerate cases" filename="tests/<exe-name>/IntrospectiveTests/Details.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Details.tests.cpp" >
        <Original>
          lt( "", "a" )
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Details.tests.cpp" >
        <Original>
          !(lt( "a", "a" ))
        </Original>
        <Expanded>
          !false
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Details.tests.cpp" >
        <Original>
          !(lt( "", "" ))
        </Original>
        <Expanded>
          !false
        </Expanded>
      </Expression>
      <OverallResults successes="3" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Plain comparisons" filename="tests/<exe-name>/IntrospectiveTests/Details.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Details.tests.cpp" >
        <Original>
          lt( "a", "b" )
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Details.tests.cpp" >
        <Original>
          lt( "a", "B" )
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Details.tests.cpp" >
        <Original>
          lt( "A", "b" )
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Details.tests.cpp" >
        <Original>
          lt( "A", "B" )
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <OverallResults successes="4" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Character pretty printing" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
    <Section name="Specifically escaped" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
        <Original>
          tab == '\t'
        </Original>
        <Expanded>
          '\t' == '\t'
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
        <Original>
          newline == '\n'
        </Original>
        <Expanded>
          '\n' == '\n'
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
        <Original>
          carr_return == '\r'
        </Original>
        <Expanded>
          '\r' == '\r'
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
        <Original>
          form_feed == '\f'
        </Original>
        <Expanded>
          '\f' == '\f'
        </Expanded>
      </Expression>
      <OverallResults successes="4" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="General chars" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
        <Original>
          space == ' '
        </Original>
        <Expanded>
          ' ' == ' '
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
        <Original>
          c == chars[i]
        </Original>
        <Expanded>
          'a' == 'a'
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
        <Original>
          c == chars[i]
        </Original>
        <Expanded>
          'z' == 'z'
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
        <Original>
          c == chars[i]
        </Original>
        <Expanded>
          'A' == 'A'
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
        <Original>
          c == chars[i]
        </Original>
        <Expanded>
          'Z' == 'Z'
        </Expanded>
      </Expression>
      <OverallResults successes="5" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Low ASCII" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
        <Original>
          null_terminator == '\0'
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
        <Original>
          c == i
        </Original>
        <Expanded>
          2 == 2
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
        <Original>
          c == i
        </Original>
        <Expanded>
          3 == 3
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
        <Original>
          c == i
        </Original>
        <Expanded>
          4 == 4
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
        <Original>
          c == i
        </Original>
        <Expanded>
          5 == 5
        </Expanded>
      </Expression>
      <OverallResults successes="5" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Clara::Arg supports single-arg parse the way Opt does" tags="[arg][clara][compilation]" filename="tests/<exe-name>/IntrospectiveTests/Clara.tests.cpp" >
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/Clara.tests.cpp" >
      <Original>
        name.empty()
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Clara.tests.cpp" >
      <Original>
        name == "foo"
      </Original>
      <Expanded>
        "foo" == "foo"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Clara::Opt supports accept-many lambdas" tags="[clara][opt]" filename="tests/<exe-name>/IntrospectiveTests/Clara.tests.cpp" >
    <Section name="Parsing fails on multiple options without accept_many" filename="tests/<exe-name>/IntrospectiveTests/Clara.tests.cpp" >
      <Expression success="true" type="CHECK_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Clara.tests.cpp" >
        <Original>
          !(parse_result)
        </Original>
        <Expanded>
          !{?}
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Parsing succeeds on multiple options with accept_many" filename="tests/<exe-name>/IntrospectiveTests/Clara.tests.cpp" >
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/Clara.tests.cpp" >
        <Original>
          parse_result
        </Original>
        <Expanded>
          {?}
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/Clara.tests.cpp" >
        <Original>
          res == std::vector&lt;std::string>{ "aaa", "bbb" }
        </Original>
        <Expanded>
          { "aaa", "bbb" } == { "aaa", "bbb" }
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="ColourGuard behaviour" tags="[console-colours]" filename="tests/<exe-name>/IntrospectiveTests/ColourImpl.tests.cpp" >
    <Section name="ColourGuard is disengaged by default" filename="tests/<exe-name>/IntrospectiveTests/ColourImpl.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/ColourImpl.tests.cpp" >
        <Original>
          streamWrapper.str().empty()
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="ColourGuard is engaged by op&lt;&lt;" filename="tests/<exe-name>/IntrospectiveTests/ColourImpl.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/ColourImpl.tests.cpp" >
        <Original>
          streamWrapper.str() == "1\nUsing code: 2\n2\nUsing code: 0\n3\n"
        </Original>
        <Expanded>
          "1
Using code: 2
2
Using code: 0
3
"
==
"1
Using code: 2
2
Using code: 0
3
"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="ColourGuard can be engaged explicitly" filename="tests/<exe-name>/IntrospectiveTests/ColourImpl.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/ColourImpl.tests.cpp" >
        <Original>
          streamWrapper.str() == "Using code: 2\nA\nB\nUsing code: 0\nC\n"
        </Original>
        <Expanded>
          "Using code: 2
A
B
Using code: 0
C
"
==
"Using code: 2
A
B
Using code: 0
C
"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Combining MatchAllOfGeneric does not nest" tags="[matchers][templated]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        1, ( MatcherA() &amp;&amp; MatcherB() ) &amp;&amp; MatcherC()
      </Original>
      <Expanded>
        1 ( equals: (int) 1 or (string) "1" and equals: (long long) 1 and equals: (T) 1 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        1, MatcherA() &amp;&amp; ( MatcherB() &amp;&amp; MatcherC() )
      </Original>
      <Expanded>
        1 ( equals: (int) 1 or (string) "1" and equals: (long long) 1 and equals: (T) 1 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        1, ( MatcherA() &amp;&amp; MatcherB() ) &amp;&amp; ( MatcherC() &amp;&amp; MatcherD() )
      </Original>
      <Expanded>
        1 ( equals: (int) 1 or (string) "1" and equals: (long long) 1 and equals: (T) 1 and equals: true )
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Combining MatchAnyOfGeneric does not nest" tags="[matchers][templated]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        1, ( MatcherA() || MatcherB() ) || MatcherC()
      </Original>
      <Expanded>
        1 ( equals: (int) 1 or (string) "1" or equals: (long long) 1 or equals: (T) 1 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        1, MatcherA() || ( MatcherB() || MatcherC() )
      </Original>
      <Expanded>
        1 ( equals: (int) 1 or (string) "1" or equals: (long long) 1 or equals: (T) 1 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        1, ( MatcherA() || MatcherB() ) || ( MatcherC() || MatcherD() )
      </Original>
      <Expanded>
        1 ( equals: (int) 1 or (string) "1" or equals: (long long) 1 or equals: (T) 1 or equals: true )
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Combining MatchNotOfGeneric does not nest" tags="[matchers][templated]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        0, !MatcherA()
      </Original>
      <Expanded>
        0 not equals: (int) 1 or (string) "1"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        1, !!MatcherA()
      </Original>
      <Expanded>
        1 equals: (int) 1 or (string) "1"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        0, !!!MatcherA()
      </Original>
      <Expanded>
        0 not equals: (int) 1 or (string) "1"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        1, !!!!MatcherA()
      </Original>
      <Expanded>
        1 equals: (int) 1 or (string) "1"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Combining concrete matchers does not use templated matchers" tags="[matchers][templated]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Combining only templated matchers" tags="[matchers][templated]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        1, MatcherA() || MatcherB()
      </Original>
      <Expanded>
        1 ( equals: (int) 1 or (string) "1" or equals: (long long) 1 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        1, MatcherA() &amp;&amp; MatcherB()
      </Original>
      <Expanded>
        1 ( equals: (int) 1 or (string) "1" and equals: (long long) 1 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        1, MatcherA() || !MatcherB()
      </Original>
      <Expanded>
        1 ( equals: (int) 1 or (string) "1" or not equals: (long long) 1 )
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Combining templated and concrete matchers" tags="[matchers][templated]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        vec, Predicate&lt;std::vector&lt;int>>( []( auto const&amp; v ) { return std::all_of( v.begin(), v.end(), []( int elem ) { return elem % 2 == 1; } ); }, "All elements are odd" ) &amp;&amp; !EqualsRange( a )
      </Original>
      <Expanded>
        { 1, 3, 5 } ( matches predicate: "All elements are odd" and not Equals: { 5, 3, 1 } )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        str, StartsWith( "foo" ) &amp;&amp; EqualsRange( arr ) &amp;&amp; EndsWith( "bar" )
      </Original>
      <Expanded>
        "foobar" ( starts with: "foo" and Equals: { 'f', 'o', 'o', 'b', 'a', 'r' } and ends with: "bar" )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        str, StartsWith( "foo" ) &amp;&amp; !EqualsRange( bad_arr ) &amp;&amp; EndsWith( "bar" )
      </Original>
      <Expanded>
        "foobar" ( starts with: "foo" and not Equals: { 'o', 'o', 'f', 'b', 'a', 'r' } and ends with: "bar" )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        str, EqualsRange( arr ) &amp;&amp; StartsWith( "foo" ) &amp;&amp; EndsWith( "bar" )
      </Original>
      <Expanded>
        "foobar" ( Equals: { 'f', 'o', 'o', 'b', 'a', 'r' } and starts with: "foo" and ends with: "bar" )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        str, !EqualsRange( bad_arr ) &amp;&amp; StartsWith( "foo" ) &amp;&amp; EndsWith( "bar" )
      </Original>
      <Expanded>
        "foobar" ( not Equals: { 'o', 'o', 'f', 'b', 'a', 'r' } and starts with: "foo" and ends with: "bar" )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        str, EqualsRange( bad_arr ) || ( StartsWith( "foo" ) &amp;&amp; EndsWith( "bar" ) )
      </Original>
      <Expanded>
        "foobar" ( Equals: { 'o', 'o', 'f', 'b', 'a', 'r' } or ( starts with: "foo" and ends with: "bar" ) )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        str, ( StartsWith( "foo" ) &amp;&amp; EndsWith( "bar" ) ) || EqualsRange( bad_arr )
      </Original>
      <Expanded>
        "foobar" ( ( starts with: "foo" and ends with: "bar" ) or Equals: { 'o', 'o', 'f', 'b', 'a', 'r' } )
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Combining templated matchers" tags="[matchers][templated]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        container, EqualsRange( a ) || EqualsRange( b ) || EqualsRange( c )
      </Original>
      <Expanded>
        { 1, 2, 3 } ( Equals: { 1, 2, 3 } or Equals: { 0, 1, 2 } or Equals: { 4, 5, 6 } )
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Commas in various macros are allowed" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
    <Expression success="true" type="REQUIRE_THROWS" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      <Original>
        std::vector&lt;constructor_throws>{constructor_throws{}, constructor_throws{}}
      </Original>
      <Expanded>
        std::vector&lt;constructor_throws>{constructor_throws{}, constructor_throws{}}
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK_THROWS" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      <Original>
        std::vector&lt;constructor_throws>{constructor_throws{}, constructor_throws{}}
      </Original>
      <Expanded>
        std::vector&lt;constructor_throws>{constructor_throws{}, constructor_throws{}}
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_NOTHROW" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      <Original>
        std::vector&lt;int>{1, 2, 3} == std::vector&lt;int>{1, 2, 3}
      </Original>
      <Expanded>
        std::vector&lt;int>{1, 2, 3} == std::vector&lt;int>{1, 2, 3}
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK_NOTHROW" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      <Original>
        std::vector&lt;int>{1, 2, 3} == std::vector&lt;int>{1, 2, 3}
      </Original>
      <Expanded>
        std::vector&lt;int>{1, 2, 3} == std::vector&lt;int>{1, 2, 3}
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      <Original>
        std::vector&lt;int>{1, 2} == std::vector&lt;int>{1, 2}
      </Original>
      <Expanded>
        { 1, 2 } == { 1, 2 }
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      <Original>
        std::vector&lt;int>{1, 2} == std::vector&lt;int>{1, 2}
      </Original>
      <Expanded>
        { 1, 2 } == { 1, 2 }
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      <Original>
        !(std::vector&lt;int>{1, 2} == std::vector&lt;int>{1, 2, 3})
      </Original>
      <Expanded>
        !({ 1, 2 } == { 1, 2, 3 })
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK_FALSE" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      <Original>
        !(std::vector&lt;int>{1, 2} == std::vector&lt;int>{1, 2, 3})
      </Original>
      <Expanded>
        !({ 1, 2 } == { 1, 2, 3 })
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK_NOFAIL" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      <Original>
        std::vector&lt;int>{1, 2} == std::vector&lt;int>{1, 2}
      </Original>
      <Expanded>
        { 1, 2 } == { 1, 2 }
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECKED_IF" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      <Original>
        std::vector&lt;int>{1, 2} == std::vector&lt;int>{1, 2}
      </Original>
      <Expanded>
        { 1, 2 } == { 1, 2 }
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      <Original>
        true
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECKED_ELSE" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      <Original>
        std::vector&lt;int>{1, 2} == std::vector&lt;int>{1, 2}
      </Original>
      <Expanded>
        { 1, 2 } == { 1, 2 }
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Comparing function pointers" tags="[function pointer][Tricky]" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      <Original>
        a
      </Original>
      <Expanded>
        0x<hex digits>
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      <Original>
        a == &amp;foo
      </Original>
      <Expanded>
        0x<hex digits> == 0x<hex digits>
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Comparison ops" tags="[rng]" filename="tests/<exe-name>/IntrospectiveTests/RandomNumberGeneration.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/RandomNumberGeneration.tests.cpp" >
      <Original>
        SimplePcg32{} == SimplePcg32{}
      </Original>
      <Expanded>
        {?} == {?}
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/RandomNumberGeneration.tests.cpp" >
      <Original>
        SimplePcg32{ 0 } != SimplePcg32{}
      </Original>
      <Expanded>
        {?} != {?}
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/RandomNumberGeneration.tests.cpp" >
      <Original>
        !(SimplePcg32{ 1 } == SimplePcg32{ 2 })
      </Original>
      <Expanded>
        !({?} == {?})
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/RandomNumberGeneration.tests.cpp" >
      <Original>
        !(SimplePcg32{ 1 } != SimplePcg32{ 1 })
      </Original>
      <Expanded>
        !({?} != {?})
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Comparison with explicitly convertible types" tags="[Approx]" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        td == Approx(10.0)
      </Original>
      <Expanded>
        StrongDoubleTypedef(10) == Approx( 10.0 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        Approx(10.0) == td
      </Original>
      <Expanded>
        Approx( 10.0 ) == StrongDoubleTypedef(10)
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        td != Approx(11.0)
      </Original>
      <Expanded>
        StrongDoubleTypedef(10) != Approx( 11.0 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        Approx(11.0) != td
      </Original>
      <Expanded>
        Approx( 11.0 ) != StrongDoubleTypedef(10)
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        td &lt;= Approx(10.0)
      </Original>
      <Expanded>
        StrongDoubleTypedef(10) &lt;= Approx( 10.0 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        td &lt;= Approx(11.0)
      </Original>
      <Expanded>
        StrongDoubleTypedef(10) &lt;= Approx( 11.0 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        Approx(10.0) &lt;= td
      </Original>
      <Expanded>
        Approx( 10.0 ) &lt;= StrongDoubleTypedef(10)
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        Approx(9.0) &lt;= td
      </Original>
      <Expanded>
        Approx( 9.0 ) &lt;= StrongDoubleTypedef(10)
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        td >= Approx(9.0)
      </Original>
      <Expanded>
        StrongDoubleTypedef(10) >= Approx( 9.0 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        td >= Approx(td)
      </Original>
      <Expanded>
        StrongDoubleTypedef(10) >= Approx( 10.0 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        Approx(td) >= td
      </Original>
      <Expanded>
        Approx( 10.0 ) >= StrongDoubleTypedef(10)
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        Approx(11.0) >= td
      </Original>
      <Expanded>
        Approx( 11.0 ) >= StrongDoubleTypedef(10)
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Comparisons between ints where one side is computed" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        54 == 6*9
      </Original>
      <Expanded>
        54 == 54
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Comparisons between unsigned ints and negative signed ints match c++ standard behaviour" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        ( -1 > 2u )
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        -1 > 2u
      </Original>
      <Expanded>
        -1 > 2
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        ( 2u &lt; -1 )
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        2u &lt; -1
      </Original>
      <Expanded>
        2 &lt; -1
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        ( minInt > 2u )
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        minInt > 2u
      </Original>
      <Expanded>
        -2147483648 > 2
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Comparisons with int literals don't warn when mixing signed/ unsigned" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        i == 1
      </Original>
      <Expanded>
        1 == 1
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        ui == 2
      </Original>
      <Expanded>
        2 == 2
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        l == 3
      </Original>
      <Expanded>
        3 == 3
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        ul == 4
      </Original>
      <Expanded>
        4 == 4
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        c == 5
      </Original>
      <Expanded>
        5 == 5
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        uc == 6
      </Original>
      <Expanded>
        6 == 6
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        1 == i
      </Original>
      <Expanded>
        1 == 1
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        2 == ui
      </Original>
      <Expanded>
        2 == 2
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        3 == l
      </Original>
      <Expanded>
        3 == 3
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        4 == ul
      </Original>
      <Expanded>
        4 == 4
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        5 == c
      </Original>
      <Expanded>
        5 == 5
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        6 == uc
      </Original>
      <Expanded>
        6 == 6
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        (std::numeric_limits&lt;uint32_t>::max)() > ul
      </Original>
      <Expanded>
        4294967295 (0x<hex digits>) > 4
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Composed generic matchers shortcircuit" tags="[composed][generic][matchers]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Section name="MatchAllOf" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Expression success="true" type="CHECK_FALSE" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          !(matcher.match( 1 ))
        </Original>
        <Expanded>
          !false
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          first.matchCalled
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          !second.matchCalled
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <OverallResults successes="3" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="MatchAnyOf" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          matcher.match( 1 )
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          first.matchCalled
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          !second.matchCalled
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <OverallResults successes="3" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Composed matchers shortcircuit" tags="[composed][matchers]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Section name="MatchAllOf" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Expression success="true" type="CHECK_FALSE" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          !(matcher.match( 1 ))
        </Original>
        <Expanded>
          !false
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          first.matchCalled
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          !second.matchCalled
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <OverallResults successes="3" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="MatchAnyOf" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          matcher.match( 1 )
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          first.matchCalled
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          !second.matchCalled
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <OverallResults successes="3" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Contains string matcher" tags="[.][failing][matchers]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Expression success="false" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        testStringForMatching(), ContainsSubstring( "not there", Catch::CaseSensitive::No )
      </Original>
      <Expanded>
        "this string contains 'abc' as a substring" contains: "not there" (case insensitive)
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        testStringForMatching(), ContainsSubstring( "STRING" )
      </Original>
      <Expanded>
        "this string contains 'abc' as a substring" contains: "STRING"
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="Copy and then generate a range" tags="[generators]" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
    <Section name="from var and iterators" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          elem % 2 == 1
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="from var and iterators" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          elem % 2 == 1
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="from var and iterators" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          elem % 2 == 1
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="from var and iterators" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          elem % 2 == 1
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="from var and iterators" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          elem % 2 == 1
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="from var and iterators" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          elem % 2 == 1
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="From a temporary container" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          elem % 2 == 1
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="From a temporary container" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          elem % 2 == 1
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="From a temporary container" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          elem % 2 == 1
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="From a temporary container" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          elem % 2 == 1
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="From a temporary container" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          elem % 2 == 1
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="From a temporary container" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          elem % 2 == 1
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Final validation" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          call_count == 1
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          make_data().size() == test_count
        </Original>
        <Expanded>
          6 == 6
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Cout stream properly declares it writes to stdout" tags="[streams]" filename="tests/<exe-name>/IntrospectiveTests/Stream.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Stream.tests.cpp" >
      <Original>
        Catch::makeStream( "-" )->isConsole()
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Custom exceptions can be translated when testing for nothrow" tags="[!throws][.][failing]" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
    <Expression success="false" type="REQUIRE_NOTHROW" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
      <Original>
        throwCustom()
      </Original>
      <Expanded>
        throwCustom()
      </Expanded>
      <Exception filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
        custom exception - not std
      </Exception>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="Custom exceptions can be translated when testing for throwing as something else" tags="[!throws][.][failing]" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
    <Expression success="false" type="REQUIRE_THROWS_AS" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
      <Original>
        throwCustom(), std::exception
      </Original>
      <Expanded>
        throwCustom(), std::exception
      </Expanded>
      <Exception filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
        custom exception - not std
      </Exception>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="Custom std-exceptions can be custom translated" tags="[!throws][.][failing]" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
    <Exception filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
      custom std exception
    </Exception>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="Default scale is invisible to comparison" tags="[Approx]" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        101.000001 != Approx(100).epsilon(0.01)
      </Original>
      <Expanded>
        101.000001 != Approx( 100.0 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        std::pow(10, -5) != Approx(std::pow(10, -7))
      </Original>
      <Expanded>
        0.00001 != Approx( 0.0000001 )
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Directly creating an EnumInfo" filename="tests/<exe-name>/IntrospectiveTests/ToString.tests.cpp" >
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/ToString.tests.cpp" >
      <Original>
        enumInfo->lookup(0) == "Value1"
      </Original>
      <Expanded>
        Value1 == "Value1"
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/ToString.tests.cpp" >
      <Original>
        enumInfo->lookup(1) == "Value2"
      </Original>
      <Expanded>
        Value2 == "Value2"
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/ToString.tests.cpp" >
      <Original>
        enumInfo->lookup(3) == "{** unexpected enum value **}"
      </Original>
      <Expanded>
        {** unexpected enum value **}
==
"{** unexpected enum value **}"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Empty generators can SKIP in constructor" tags="[skipping]" filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" >
    <Skip filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" >
      This generator is empty
    </Skip>
    <OverallResult success="true" skips="1"/>
  </TestCase>
  <TestCase name="Empty stream name opens cout stream" tags="[streams]" filename="tests/<exe-name>/IntrospectiveTests/Stream.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Stream.tests.cpp" >
      <Original>
        Catch::makeStream( "" )->isConsole()
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="EndsWith string matcher" tags="[.][failing][matchers]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Expression success="false" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        testStringForMatching(), EndsWith( "Substring" )
      </Original>
      <Expanded>
        "this string contains 'abc' as a substring" ends with: "Substring"
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        testStringForMatching(), EndsWith( "this", Catch::CaseSensitive::No )
      </Original>
      <Expanded>
        "this string contains 'abc' as a substring" ends with: "this" (case insensitive)
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="Enums can quickly have stringification enabled using REGISTER_ENUM" filename="tests/<exe-name>/UsageTests/EnumToString.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/EnumToString.tests.cpp" >
      <Original>
        stringify( EnumClass3::Value1 ) == "Value1"
      </Original>
      <Expanded>
        "Value1" == "Value1"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/EnumToString.tests.cpp" >
      <Original>
        stringify( EnumClass3::Value2 ) == "Value2"
      </Original>
      <Expanded>
        "Value2" == "Value2"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/EnumToString.tests.cpp" >
      <Original>
        stringify( EnumClass3::Value3 ) == "Value3"
      </Original>
      <Expanded>
        "Value3" == "Value3"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/EnumToString.tests.cpp" >
      <Original>
        stringify( EnumClass3::Value4 ) == "{** unexpected enum value **}"
      </Original>
      <Expanded>
        "{** unexpected enum value **}"
==
"{** unexpected enum value **}"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/EnumToString.tests.cpp" >
      <Original>
        stringify( ec3 ) == "Value2"
      </Original>
      <Expanded>
        "Value2" == "Value2"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Enums in namespaces can quickly have stringification enabled using REGISTER_ENUM" filename="tests/<exe-name>/UsageTests/EnumToString.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/EnumToString.tests.cpp" >
      <Original>
        stringify( Bikeshed::Colours::Red ) == "Red"
      </Original>
      <Expanded>
        "Red" == "Red"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/EnumToString.tests.cpp" >
      <Original>
        stringify( Bikeshed::Colours::Blue ) == "Blue"
      </Original>
      <Expanded>
        "Blue" == "Blue"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Epsilon only applies to Approx's value" tags="[Approx]" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        101.01 != Approx(100).epsilon(0.01)
      </Original>
      <Expanded>
        101.01 != Approx( 100.0 )
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Equality checks that should fail" tags="[!mayfail][.][failing]" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.int_seven == 6
      </Original>
      <Expanded>
        7 == 6
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.int_seven == 8
      </Original>
      <Expanded>
        7 == 8
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.int_seven == 0
      </Original>
      <Expanded>
        7 == 0
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.float_nine_point_one == Approx( 9.11f )
      </Original>
      <Expanded>
        9.1f == Approx( 9.1099996567 )
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.float_nine_point_one == Approx( 9.0f )
      </Original>
      <Expanded>
        9.1f == Approx( 9.0 )
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.float_nine_point_one == Approx( 1 )
      </Original>
      <Expanded>
        9.1f == Approx( 1.0 )
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.float_nine_point_one == Approx( 0 )
      </Original>
      <Expanded>
        9.1f == Approx( 0.0 )
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.double_pi == Approx( 3.1415 )
      </Original>
      <Expanded>
        3.1415926535 == Approx( 3.1415 )
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.str_hello == "goodbye"
      </Original>
      <Expanded>
        "hello" == "goodbye"
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.str_hello == "hell"
      </Original>
      <Expanded>
        "hello" == "hell"
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.str_hello == "hello1"
      </Original>
      <Expanded>
        "hello" == "hello1"
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.str_hello.size() == 6
      </Original>
      <Expanded>
        5 == 6
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        x == Approx( 1.301 )
      </Original>
      <Expanded>
        1.3 == Approx( 1.301 )
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Equality checks that should succeed" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.int_seven == 7
      </Original>
      <Expanded>
        7 == 7
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.float_nine_point_one == Approx( 9.1f )
      </Original>
      <Expanded>
        9.1f == Approx( 9.1000003815 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.double_pi == Approx( 3.1415926535 )
      </Original>
      <Expanded>
        3.1415926535 == Approx( 3.1415926535 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.str_hello == "hello"
      </Original>
      <Expanded>
        "hello" == "hello"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        "hello" == data.str_hello
      </Original>
      <Expanded>
        "hello" == "hello"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.str_hello.size() == 5
      </Original>
      <Expanded>
        5 == 5
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        x == Approx( 1.3 )
      </Original>
      <Expanded>
        1.3 == Approx( 1.3 )
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Equals" tags="[matchers]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        testStringForMatching(), Equals( "this string contains 'abc' as a substring" )
      </Original>
      <Expanded>
        "this string contains 'abc' as a substring" equals: "this string contains 'abc' as a substring"
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        testStringForMatching(), Equals( "this string contains 'ABC' as a substring", Catch::CaseSensitive::No )
      </Original>
      <Expanded>
        "this string contains 'abc' as a substring" equals: "this string contains 'abc' as a substring" (case insensitive)
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Equals string matcher" tags="[.][failing][matchers]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Expression success="false" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        testStringForMatching(), Equals( "this string contains 'ABC' as a substring" )
      </Original>
      <Expanded>
        "this string contains 'abc' as a substring" equals: "this string contains 'ABC' as a substring"
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        testStringForMatching(), Equals( "something else", Catch::CaseSensitive::No )
      </Original>
      <Expanded>
        "this string contains 'abc' as a substring" equals: "something else" (case insensitive)
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="Exception as a value (e.g. in REQUIRE_THROWS_MATCHES) can be stringified" tags="[exception][toString]" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify(WhatException{}) == "This exception has overridden what() method"
      </Original>
      <Expanded>
        "This exception has overridden what() method"
==
"This exception has overridden what() method"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify(OperatorException{}) == "OperatorException"
      </Original>
      <Expanded>
        "OperatorException" == "OperatorException"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify(StringMakerException{}) == "StringMakerException"
      </Original>
      <Expanded>
        "StringMakerException"
==
"StringMakerException"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Exception matchers that fail" tags="[!throws][.][exceptions][failing][matchers]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Section name="No exception" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Expression success="false" type="CHECK_THROWS_MATCHES" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          doesNotThrow(), SpecialException, ExceptionMatcher{ 1 }
        </Original>
        <Expanded>
          doesNotThrow(), SpecialException, ExceptionMatcher{ 1 }
        </Expanded>
      </Expression>
      <Expression success="false" type="REQUIRE_THROWS_MATCHES" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          doesNotThrow(), SpecialException, ExceptionMatcher{ 1 }
        </Original>
        <Expanded>
          doesNotThrow(), SpecialException, ExceptionMatcher{ 1 }
        </Expanded>
      </Expression>
      <OverallResults successes="0" failures="2" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Type mismatch" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Expression success="false" type="CHECK_THROWS_MATCHES" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          throwsAsInt( 1 ), SpecialException, ExceptionMatcher{ 1 }
        </Original>
        <Expanded>
          throwsAsInt( 1 ), SpecialException, ExceptionMatcher{ 1 }
        </Expanded>
        <Exception filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
          Unknown exception
        </Exception>
      </Expression>
      <Expression success="false" type="REQUIRE_THROWS_MATCHES" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          throwsAsInt( 1 ), SpecialException, ExceptionMatcher{ 1 }
        </Original>
        <Expanded>
          throwsAsInt( 1 ), SpecialException, ExceptionMatcher{ 1 }
        </Expanded>
        <Exception filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
          Unknown exception
        </Exception>
      </Expression>
      <OverallResults successes="0" failures="2" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Contents are wrong" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Expression success="false" type="CHECK_THROWS_MATCHES" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          throwsSpecialException( 3 ), SpecialException, ExceptionMatcher{ 1 }
        </Original>
        <Expanded>
          SpecialException::what special exception has value of 1
        </Expanded>
      </Expression>
      <Expression success="false" type="REQUIRE_THROWS_MATCHES" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          throwsSpecialException( 4 ), SpecialException, ExceptionMatcher{ 1 }
        </Original>
        <Expanded>
          SpecialException::what special exception has value of 1
        </Expanded>
      </Expression>
      <OverallResults successes="0" failures="2" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="Exception matchers that succeed" tags="[!throws][exceptions][matchers]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Expression success="true" type="CHECK_THROWS_MATCHES" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        throwsSpecialException( 1 ), SpecialException, ExceptionMatcher{ 1 }
      </Original>
      <Expanded>
        SpecialException::what special exception has value of 1
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_THROWS_MATCHES" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        throwsSpecialException( 2 ), SpecialException, ExceptionMatcher{ 2 }
      </Original>
      <Expanded>
        SpecialException::what special exception has value of 2
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Exception message can be matched" tags="[!throws][exceptions][matchers]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Expression success="true" type="REQUIRE_THROWS_MATCHES" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        throwsDerivedException(), DerivedException, MessageMatches( StartsWith( "Derived" ) )
      </Original>
      <Expanded>
        DerivedException::what  matches "starts with: "Derived""
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_THROWS_MATCHES" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        throwsDerivedException(), DerivedException, MessageMatches( EndsWith( "::what" ) )
      </Original>
      <Expanded>
        DerivedException::what  matches "ends with: "::what""
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_THROWS_MATCHES" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        throwsDerivedException(), DerivedException, MessageMatches( !StartsWith( "::what" ) )
      </Original>
      <Expanded>
        DerivedException::what  matches "not starts with: "::what""
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_THROWS_MATCHES" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        throwsSpecialException( 2 ), SpecialException, MessageMatches( StartsWith( "Special" ) )
      </Original>
      <Expanded>
        SpecialException::what  matches "starts with: "Special""
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Exception messages can be tested for" tags="[!throws]" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
    <Section name="exact match" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
      <Expression success="true" type="REQUIRE_THROWS_WITH" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
        <Original>
          thisThrows(), "expected exception"
        </Original>
        <Expanded>
          "expected exception" equals: "expected exception"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="different case" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
      <Expression success="true" type="REQUIRE_THROWS_WITH" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
        <Original>
          thisThrows(), Equals( "expecteD Exception", Catch::CaseSensitive::No )
        </Original>
        <Expanded>
          "expected exception" equals: "expected exception" (case insensitive)
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="wildcarded" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
      <Expression success="true" type="REQUIRE_THROWS_WITH" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
        <Original>
          thisThrows(), StartsWith( "expected" )
        </Original>
        <Expanded>
          "expected exception" starts with: "expected"
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THROWS_WITH" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
        <Original>
          thisThrows(), EndsWith( "exception" )
        </Original>
        <Expanded>
          "expected exception" ends with: "exception"
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THROWS_WITH" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
        <Original>
          thisThrows(), ContainsSubstring( "except" )
        </Original>
        <Expanded>
          "expected exception" contains: "except"
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THROWS_WITH" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
        <Original>
          thisThrows(), ContainsSubstring( "exCept", Catch::CaseSensitive::No )
        </Original>
        <Expanded>
          "expected exception" contains: "except" (case insensitive)
        </Expanded>
      </Expression>
      <OverallResults successes="4" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Exceptions matchers" tags="[!throws][exceptions][matchers]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Expression success="true" type="REQUIRE_THROWS_MATCHES" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        throwsDerivedException(), DerivedException, Message( "DerivedException::what" )
      </Original>
      <Expanded>
        DerivedException::what exception message matches "DerivedException::what"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_THROWS_MATCHES" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        throwsDerivedException(), DerivedException, !Message( "derivedexception::what" )
      </Original>
      <Expanded>
        DerivedException::what not exception message matches "derivedexception::what"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_THROWS_MATCHES" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        throwsSpecialException( 2 ), SpecialException, !Message( "DerivedException::what" )
      </Original>
      <Expanded>
        SpecialException::what not exception message matches "DerivedException::what"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_THROWS_MATCHES" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        throwsSpecialException( 2 ), SpecialException, Message( "SpecialException::what" )
      </Original>
      <Expanded>
        SpecialException::what exception message matches "SpecialException::what"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Expected exceptions that don't throw or unexpected exceptions fail the test" tags="[!throws][.][failing]" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
    <Expression success="false" type="CHECK_THROWS_AS" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
      <Original>
        thisThrows(), std::string
      </Original>
      <Expanded>
        thisThrows(), std::string
      </Expanded>
      <Exception filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
        expected exception
      </Exception>
    </Expression>
    <Expression success="false" type="CHECK_THROWS_AS" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
      <Original>
        thisDoesntThrow(), std::domain_error
      </Original>
      <Expanded>
        thisDoesntThrow(), std::domain_error
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK_NOTHROW" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
      <Original>
        thisThrows()
      </Original>
      <Expanded>
        thisThrows()
      </Expanded>
      <Exception filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
        expected exception
      </Exception>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="FAIL aborts the test" tags="[.][failing][messages]" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
    <Failure filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      This is a failure
    </Failure>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="FAIL does not require an argument" tags="[.][failing][messages]" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
    <Failure filename="tests/<exe-name>/UsageTests/Message.tests.cpp" />
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="FAIL_CHECK does not abort the test" tags="[.][failing][messages]" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
    <Failure filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      This is a failure
    </Failure>
    <Warning filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      This message appears in the output
    </Warning>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="Factorials are computed" tags="[factorial]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        Factorial(0) == 1
      </Original>
      <Expanded>
        1 == 1
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        Factorial(1) == 1
      </Original>
      <Expanded>
        1 == 1
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        Factorial(2) == 2
      </Original>
      <Expanded>
        2 == 2
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        Factorial(3) == 6
      </Original>
      <Expanded>
        6 == 6
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        Factorial(10) == 3628800
      </Original>
      <Expanded>
        3628800 (0x<hex digits>) == 3628800 (0x<hex digits>)
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Filter generator throws exception for empty generator" tags="[generators]" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
    <Expression success="true" type="REQUIRE_THROWS_AS" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
      <Original>
        filter( []( int ) { return false; }, value( 3 ) ), Catch::GeneratorException
      </Original>
      <Expanded>
        filter( []( int ) { return false; }, value( 3 ) ), Catch::GeneratorException
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Floating point matchers: double" tags="[floating-point][matchers]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Section name="Relative" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          10., WithinRel( 11.1, 0.1 )
        </Original>
        <Expanded>
          10.0 and 11.1 are within 10% of each other
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          10., !WithinRel( 11.2, 0.1 )
        </Original>
        <Expanded>
          10.0 not and 11.2 are within 10% of each other
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          1., !WithinRel( 0., 0.99 )
        </Original>
        <Expanded>
          1.0 not and 0 are within 99% of each other
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          -0., WithinRel( 0. )
        </Original>
        <Expanded>
          -0.0 and 0 are within 2.22045e-12% of each other
        </Expanded>
      </Expression>
      <Section name="Some subnormal values" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
          <Original>
            v1, WithinRel( v2 )
          </Original>
          <Expanded>
            0.0 and 2.22507e-308 are within 2.22045e-12% of each other
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="5" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Margin" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          1., WithinAbs( 1., 0 )
        </Original>
        <Expanded>
          1.0 is within 0.0 of 1.0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          0., WithinAbs( 1., 1 )
        </Original>
        <Expanded>
          0.0 is within 1.0 of 1.0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          0., !WithinAbs( 1., 0.99 )
        </Original>
        <Expanded>
          0.0 not is within 0.99 of 1.0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          0., !WithinAbs( 1., 0.99 )
        </Original>
        <Expanded>
          0.0 not is within 0.99 of 1.0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          11., !WithinAbs( 10., 0.5 )
        </Original>
        <Expanded>
          11.0 not is within 0.5 of 10.0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          10., !WithinAbs( 11., 0.5 )
        </Original>
        <Expanded>
          10.0 not is within 0.5 of 11.0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          -10., WithinAbs( -10., 0.5 )
        </Original>
        <Expanded>
          -10.0 is within 0.5 of -10.0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          -10., WithinAbs( -9.6, 0.5 )
        </Original>
        <Expanded>
          -10.0 is within 0.5 of -9.6
        </Expanded>
      </Expression>
      <OverallResults successes="8" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="ULPs" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          1., WithinULP( 1., 0 )
        </Original>
        <Expanded>
          1.0 is within 0 ULPs of 1.0000000000000000e+00 ([1.0000000000000000e+00, 1.0000000000000000e+00])
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          nextafter( 1., 2. ), WithinULP( 1., 1 )
        </Original>
        <Expanded>
          1.0 is within 1 ULPs of 1.0000000000000000e+00 ([9.9999999999999989e-01, 1.0000000000000002e+00])
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          0., WithinULP( nextafter( 0., 1. ), 1 )
        </Original>
        <Expanded>
          0.0 is within 1 ULPs of 4.9406564584124654e-324 ([0.0000000000000000e+00, 9.8813129168249309e-324])
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          1., WithinULP( nextafter( 1., 0. ), 1 )
        </Original>
        <Expanded>
          1.0 is within 1 ULPs of 9.9999999999999989e-01 ([9.9999999999999978e-01, 1.0000000000000000e+00])
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          1., !WithinULP( nextafter( 1., 2. ), 0 )
        </Original>
        <Expanded>
          1.0 not is within 0 ULPs of 1.0000000000000002e+00 ([1.0000000000000002e+00, 1.0000000000000002e+00])
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          1., WithinULP( 1., 0 )
        </Original>
        <Expanded>
          1.0 is within 0 ULPs of 1.0000000000000000e+00 ([1.0000000000000000e+00, 1.0000000000000000e+00])
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          -0., WithinULP( 0., 0 )
        </Original>
        <Expanded>
          -0.0 is within 0 ULPs of 0.0000000000000000e+00 ([0.0000000000000000e+00, 0.0000000000000000e+00])
        </Expanded>
      </Expression>
      <OverallResults successes="7" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Composed" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          1., WithinAbs( 1., 0.5 ) || WithinULP( 2., 1 )
        </Original>
        <Expanded>
          1.0 ( is within 0.5 of 1.0 or is within 1 ULPs of 2.0000000000000000e+00 ([1.9999999999999998e+00, 2.0000000000000004e+00]) )
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          1., WithinAbs( 2., 0.5 ) || WithinULP( 1., 0 )
        </Original>
        <Expanded>
          1.0 ( is within 0.5 of 2.0 or is within 0 ULPs of 1.0000000000000000e+00 ([1.0000000000000000e+00, 1.0000000000000000e+00]) )
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          0.0001, WithinAbs( 0., 0.001 ) || WithinRel( 0., 0.1 )
        </Original>
        <Expanded>
          0.0001 ( is within 0.001 of 0.0 or and 0 are within 10% of each other )
        </Expanded>
      </Expression>
      <OverallResults successes="3" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Constructor validation" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Expression success="true" type="REQUIRE_NOTHROW" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          WithinAbs( 1., 0. )
        </Original>
        <Expanded>
          WithinAbs( 1., 0. )
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THROWS_AS" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          WithinAbs( 1., -1. ), std::domain_error
        </Original>
        <Expanded>
          WithinAbs( 1., -1. ), std::domain_error
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_NOTHROW" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          WithinULP( 1., 0 )
        </Original>
        <Expanded>
          WithinULP( 1., 0 )
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_NOTHROW" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          WithinRel( 1., 0. )
        </Original>
        <Expanded>
          WithinRel( 1., 0. )
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THROWS_AS" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          WithinRel( 1., -0.2 ), std::domain_error
        </Original>
        <Expanded>
          WithinRel( 1., -0.2 ), std::domain_error
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THROWS_AS" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          WithinRel( 1., 1. ), std::domain_error
        </Original>
        <Expanded>
          WithinRel( 1., 1. ), std::domain_error
        </Expanded>
      </Expression>
      <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="IsNaN" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          1., !IsNaN()
        </Original>
        <Expanded>
          1.0 not is NaN
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Floating point matchers: float" tags="[floating-point][matchers]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Section name="Relative" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          10.f, WithinRel( 11.1f, 0.1f )
        </Original>
        <Expanded>
          10.0f and 11.1 are within 10% of each other
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          10.f, !WithinRel( 11.2f, 0.1f )
        </Original>
        <Expanded>
          10.0f not and 11.2 are within 10% of each other
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          1.f, !WithinRel( 0.f, 0.99f )
        </Original>
        <Expanded>
          1.0f not and 0 are within 99% of each other
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          -0.f, WithinRel( 0.f )
        </Original>
        <Expanded>
          -0.0f and 0 are within 0.00119209% of each other
        </Expanded>
      </Expression>
      <Section name="Some subnormal values" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
          <Original>
            v1, WithinRel( v2 )
          </Original>
          <Expanded>
            0.0f and 1.17549e-38 are within 0.00119209% of each other
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="5" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Margin" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          1.f, WithinAbs( 1.f, 0 )
        </Original>
        <Expanded>
          1.0f is within 0.0 of 1.0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          0.f, WithinAbs( 1.f, 1 )
        </Original>
        <Expanded>
          0.0f is within 1.0 of 1.0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          0.f, !WithinAbs( 1.f, 0.99f )
        </Original>
        <Expanded>
          0.0f not is within 0.9900000095 of 1.0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          0.f, !WithinAbs( 1.f, 0.99f )
        </Original>
        <Expanded>
          0.0f not is within 0.9900000095 of 1.0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          0.f, WithinAbs( -0.f, 0 )
        </Original>
        <Expanded>
          0.0f is within 0.0 of -0.0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          11.f, !WithinAbs( 10.f, 0.5f )
        </Original>
        <Expanded>
          11.0f not is within 0.5 of 10.0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          10.f, !WithinAbs( 11.f, 0.5f )
        </Original>
        <Expanded>
          10.0f not is within 0.5 of 11.0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          -10.f, WithinAbs( -10.f, 0.5f )
        </Original>
        <Expanded>
          -10.0f is within 0.5 of -10.0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          -10.f, WithinAbs( -9.6f, 0.5f )
        </Original>
        <Expanded>
          -10.0f is within 0.5 of -9.6000003815
        </Expanded>
      </Expression>
      <OverallResults successes="9" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="ULPs" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          1.f, WithinULP( 1.f, 0 )
        </Original>
        <Expanded>
          1.0f is within 0 ULPs of 1.00000000e+00f ([1.00000000e+00, 1.00000000e+00])
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          -1.f, WithinULP( -1.f, 0 )
        </Original>
        <Expanded>
          -1.0f is within 0 ULPs of -1.00000000e+00f ([-1.00000000e+00, -1.00000000e+00])
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          nextafter( 1.f, 2.f ), WithinULP( 1.f, 1 )
        </Original>
        <Expanded>
          1.0f is within 1 ULPs of 1.00000000e+00f ([9.99999940e-01, 1.00000012e+00])
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          0.f, WithinULP( nextafter( 0.f, 1.f ), 1 )
        </Original>
        <Expanded>
          0.0f is within 1 ULPs of 1.40129846e-45f ([0.00000000e+00, 2.80259693e-45])
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          1.f, WithinULP( nextafter( 1.f, 0.f ), 1 )
        </Original>
        <Expanded>
          1.0f is within 1 ULPs of 9.99999940e-01f ([9.99999881e-01, 1.00000000e+00])
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          1.f, !WithinULP( nextafter( 1.f, 2.f ), 0 )
        </Original>
        <Expanded>
          1.0f not is within 0 ULPs of 1.00000012e+00f ([1.00000012e+00, 1.00000012e+00])
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          1.f, WithinULP( 1.f, 0 )
        </Original>
        <Expanded>
          1.0f is within 0 ULPs of 1.00000000e+00f ([1.00000000e+00, 1.00000000e+00])
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          -0.f, WithinULP( 0.f, 0 )
        </Original>
        <Expanded>
          -0.0f is within 0 ULPs of 0.00000000e+00f ([0.00000000e+00, 0.00000000e+00])
        </Expanded>
      </Expression>
      <OverallResults successes="8" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Composed" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          1.f, WithinAbs( 1.f, 0.5 ) || WithinULP( 1.f, 1 )
        </Original>
        <Expanded>
          1.0f ( is within 0.5 of 1.0 or is within 1 ULPs of 1.00000000e+00f ([9.99999940e-01, 1.00000012e+00]) )
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          1.f, WithinAbs( 2.f, 0.5 ) || WithinULP( 1.f, 0 )
        </Original>
        <Expanded>
          1.0f ( is within 0.5 of 2.0 or is within 0 ULPs of 1.00000000e+00f ([1.00000000e+00, 1.00000000e+00]) )
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          0.0001f, WithinAbs( 0.f, 0.001f ) || WithinRel( 0.f, 0.1f )
        </Original>
        <Expanded>
          0.0001f ( is within 0.001 of 0.0 or and 0 are within 10% of each other )
        </Expanded>
      </Expression>
      <OverallResults successes="3" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Constructor validation" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Expression success="true" type="REQUIRE_NOTHROW" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          WithinAbs( 1.f, 0.f )
        </Original>
        <Expanded>
          WithinAbs( 1.f, 0.f )
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THROWS_AS" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          WithinAbs( 1.f, -1.f ), std::domain_error
        </Original>
        <Expanded>
          WithinAbs( 1.f, -1.f ), std::domain_error
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_NOTHROW" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          WithinULP( 1.f, 0 )
        </Original>
        <Expanded>
          WithinULP( 1.f, 0 )
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THROWS_AS" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          WithinULP( 1.f, static_cast&lt;uint64_t>( -1 ) ), std::domain_error
        </Original>
        <Expanded>
          WithinULP( 1.f, static_cast&lt;uint64_t>( -1 ) ), std::domain_error
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_NOTHROW" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          WithinRel( 1.f, 0.f )
        </Original>
        <Expanded>
          WithinRel( 1.f, 0.f )
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THROWS_AS" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          WithinRel( 1.f, -0.2f ), std::domain_error
        </Original>
        <Expanded>
          WithinRel( 1.f, -0.2f ), std::domain_error
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THROWS_AS" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          WithinRel( 1.f, 1.f ), std::domain_error
        </Original>
        <Expanded>
          WithinRel( 1.f, 1.f ), std::domain_error
        </Expanded>
      </Expression>
      <OverallResults successes="7" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="IsNaN" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          1., !IsNaN()
        </Original>
        <Expanded>
          1.0 not is NaN
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Generators -- adapters" tags="[generators][generic]" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
    <Section name="Filtering by predicate" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Section name="Basic usage" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
          <Original>
            i % 2 == 0
          </Original>
          <Expanded>
            0 == 0
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Filtering by predicate" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Section name="Basic usage" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
          <Original>
            i % 2 == 0
          </Original>
          <Expanded>
            0 == 0
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Filtering by predicate" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Section name="Basic usage" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
          <Original>
            i % 2 == 0
          </Original>
          <Expanded>
            0 == 0
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Filtering by predicate" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Section name="Throws if there are no matching values" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Expression success="true" type="REQUIRE_THROWS_AS" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
          <Original>
            filter([] (int) {return false; }, value(1)), Catch::GeneratorException
          </Original>
          <Expanded>
            filter([] (int) {return false; }, value(1)), Catch::GeneratorException
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Shortening a range" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          i &lt; 4
        </Original>
        <Expanded>
          1 &lt; 4
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Shortening a range" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          i &lt; 4
        </Original>
        <Expanded>
          2 &lt; 4
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Shortening a range" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          i &lt; 4
        </Original>
        <Expanded>
          3 &lt; 4
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Transforming elements" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Section name="Same type" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
          <Original>
            i % 2 == 0
          </Original>
          <Expanded>
            0 == 0
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Transforming elements" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Section name="Same type" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
          <Original>
            i % 2 == 0
          </Original>
          <Expanded>
            0 == 0
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Transforming elements" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Section name="Same type" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
          <Original>
            i % 2 == 0
          </Original>
          <Expanded>
            0 == 0
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Transforming elements" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Section name="Different type" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
          <Original>
            i.size() == 1
          </Original>
          <Expanded>
            1 == 1
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Transforming elements" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Section name="Different type" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
          <Original>
            i.size() == 1
          </Original>
          <Expanded>
            1 == 1
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Transforming elements" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Section name="Different type" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
          <Original>
            i.size() == 1
          </Original>
          <Expanded>
            1 == 1
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Transforming elements" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Section name="Different deduced type" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
          <Original>
            i.size() == 1
          </Original>
          <Expanded>
            1 == 1
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Transforming elements" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Section name="Different deduced type" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
          <Original>
            i.size() == 1
          </Original>
          <Expanded>
            1 == 1
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Transforming elements" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Section name="Different deduced type" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
          <Original>
            i.size() == 1
          </Original>
          <Expanded>
            1 == 1
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Repeating a generator" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          j > 0
        </Original>
        <Expanded>
          1 > 0
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Repeating a generator" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          j > 0
        </Original>
        <Expanded>
          2 > 0
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Repeating a generator" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          j > 0
        </Original>
        <Expanded>
          3 > 0
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Repeating a generator" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          j > 0
        </Original>
        <Expanded>
          1 > 0
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Repeating a generator" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          j > 0
        </Original>
        <Expanded>
          2 > 0
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Repeating a generator" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          j > 0
        </Original>
        <Expanded>
          3 > 0
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Chunking a generator into sized pieces" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Section name="Number of elements in source is divisible by chunk size" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
          <Original>
            chunk2.size() == 2
          </Original>
          <Expanded>
            2 == 2
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
          <Original>
            chunk2.front() == chunk2.back()
          </Original>
          <Expanded>
            1 == 1
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Chunking a generator into sized pieces" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Section name="Number of elements in source is divisible by chunk size" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
          <Original>
            chunk2.size() == 2
          </Original>
          <Expanded>
            2 == 2
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
          <Original>
            chunk2.front() == chunk2.back()
          </Original>
          <Expanded>
            2 == 2
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Chunking a generator into sized pieces" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Section name="Number of elements in source is divisible by chunk size" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
          <Original>
            chunk2.size() == 2
          </Original>
          <Expanded>
            2 == 2
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
          <Original>
            chunk2.front() == chunk2.back()
          </Original>
          <Expanded>
            3 == 3
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Chunking a generator into sized pieces" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Section name="Number of elements in source is not divisible by chunk size" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
          <Original>
            chunk2.size() == 2
          </Original>
          <Expanded>
            2 == 2
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
          <Original>
            chunk2.front() == chunk2.back()
          </Original>
          <Expanded>
            1 == 1
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
          <Original>
            chunk2.front() &lt; 3
          </Original>
          <Expanded>
            1 &lt; 3
          </Expanded>
        </Expression>
        <OverallResults successes="3" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="3" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Chunking a generator into sized pieces" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Section name="Number of elements in source is not divisible by chunk size" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
          <Original>
            chunk2.size() == 2
          </Original>
          <Expanded>
            2 == 2
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
          <Original>
            chunk2.front() == chunk2.back()
          </Original>
          <Expanded>
            2 == 2
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
          <Original>
            chunk2.front() &lt; 3
          </Original>
          <Expanded>
            2 &lt; 3
          </Expanded>
        </Expression>
        <OverallResults successes="3" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="3" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Chunking a generator into sized pieces" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Section name="Chunk size of zero" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
          <Original>
            chunk2.size() == 0
          </Original>
          <Expanded>
            0 == 0
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Chunking a generator into sized pieces" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Section name="Chunk size of zero" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
          <Original>
            chunk2.size() == 0
          </Original>
          <Expanded>
            0 == 0
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Chunking a generator into sized pieces" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Section name="Chunk size of zero" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
          <Original>
            chunk2.size() == 0
          </Original>
          <Expanded>
            0 == 0
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Chunking a generator into sized pieces" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Section name="Throws on too small generators" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Expression success="true" type="REQUIRE_THROWS_AS" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
          <Original>
            chunk(2, value(1)), Catch::GeneratorException
          </Original>
          <Expanded>
            chunk(2, value(1)), Catch::GeneratorException
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Generators -- simple" tags="[generators]" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
    <Section name="one" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          j &lt; i
        </Original>
        <Expanded>
          -3 &lt; 1
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="one" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          j &lt; i
        </Original>
        <Expanded>
          -2 &lt; 1
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="one" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          j &lt; i
        </Original>
        <Expanded>
          -1 &lt; 1
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="two" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          4u * i > str.size()
        </Original>
        <Expanded>
          4 > 1
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="two" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          4u * i > str.size()
        </Original>
        <Expanded>
          4 > 2
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="two" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          4u * i > str.size()
        </Original>
        <Expanded>
          4 > 3
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="one" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          j &lt; i
        </Original>
        <Expanded>
          -3 &lt; 2
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="one" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          j &lt; i
        </Original>
        <Expanded>
          -2 &lt; 2
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="one" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          j &lt; i
        </Original>
        <Expanded>
          -1 &lt; 2
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="two" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          4u * i > str.size()
        </Original>
        <Expanded>
          8 > 1
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="two" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          4u * i > str.size()
        </Original>
        <Expanded>
          8 > 2
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="two" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          4u * i > str.size()
        </Original>
        <Expanded>
          8 > 3
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="one" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          j &lt; i
        </Original>
        <Expanded>
          -3 &lt; 3
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="one" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          j &lt; i
        </Original>
        <Expanded>
          -2 &lt; 3
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="one" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          j &lt; i
        </Original>
        <Expanded>
          -1 &lt; 3
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="two" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          4u * i > str.size()
        </Original>
        <Expanded>
          12 > 1
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="two" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          4u * i > str.size()
        </Original>
        <Expanded>
          12 > 2
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="two" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
        <Original>
          4u * i > str.size()
        </Original>
        <Expanded>
          12 > 3
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Generators internals" tags="[generators][internals]" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
    <Section name="Single value" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          gen.get() == 123
        </Original>
        <Expanded>
          123 == 123
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          !(gen.next())
        </Original>
        <Expanded>
          !false
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Preset values" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          gen.get() == 1
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          gen.next()
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          gen.get() == 3
        </Original>
        <Expanded>
          3 == 3
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          gen.next()
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          gen.get() == 5
        </Original>
        <Expanded>
          5 == 5
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          !(gen.next())
        </Original>
        <Expanded>
          !false
        </Expanded>
      </Expression>
      <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Generator combinator" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          gen.get() == 1
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          gen.next()
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          gen.get() == 5
        </Original>
        <Expanded>
          5 == 5
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          gen.next()
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          gen.get() == 2
        </Original>
        <Expanded>
          2 == 2
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          gen.next()
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          gen.get() == 4
        </Original>
        <Expanded>
          4 == 4
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          gen.next()
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          gen.get() == 0
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          !(gen.next())
        </Original>
        <Expanded>
          !false
        </Expanded>
      </Expression>
      <OverallResults successes="10" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Explicitly typed generator sequence" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          gen.get().size() == 2
        </Original>
        <Expanded>
          2 == 2
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          gen.get() == "aa"
        </Original>
        <Expanded>
          "aa" == "aa"
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          gen.next()
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          gen.get() == "bb"
        </Original>
        <Expanded>
          "bb" == "bb"
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          gen.next()
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          gen.get() == "cc"
        </Original>
        <Expanded>
          "cc" == "cc"
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          !(gen.next())
        </Original>
        <Expanded>
          !false
        </Expanded>
      </Expression>
      <OverallResults successes="7" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Filter generator" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
      <Section name="Simple filtering" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Original>
            gen.get() == 1
          </Original>
          <Expanded>
            1 == 1
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Original>
            gen.next()
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Original>
            gen.get() == 3
          </Original>
          <Expanded>
            3 == 3
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Original>
            !(gen.next())
          </Original>
          <Expanded>
            !false
          </Expanded>
        </Expression>
        <OverallResults successes="4" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="4" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Filter generator" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
      <Section name="Filter out multiple elements at the start and end" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Original>
            gen.get() == 1
          </Original>
          <Expanded>
            1 == 1
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Original>
            gen.next()
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Original>
            gen.get() == 3
          </Original>
          <Expanded>
            3 == 3
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Original>
            !(gen.next())
          </Original>
          <Expanded>
            !false
          </Expanded>
        </Expression>
        <OverallResults successes="4" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="4" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Filter generator" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
      <Section name="Throws on construction if it can't get initial element" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Expression success="true" type="REQUIRE_THROWS_AS" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Original>
            filter([](int) { return false; }, value(1)), Catch::GeneratorException
          </Original>
          <Expanded>
            filter([](int) { return false; }, value(1)), Catch::GeneratorException
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE_THROWS_AS" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Original>
            filter([](int) { return false; }, values({ 1, 2, 3 })), Catch::GeneratorException
          </Original>
          <Expanded>
            filter([](int) { return false; }, values({ 1, 2, 3 })), Catch::GeneratorException
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Take generator" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
      <Section name="Take less" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Original>
            gen.get() == 1
          </Original>
          <Expanded>
            1 == 1
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Original>
            gen.next()
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Original>
            gen.get() == 2
          </Original>
          <Expanded>
            2 == 2
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Original>
            !(gen.next())
          </Original>
          <Expanded>
            !false
          </Expanded>
        </Expression>
        <OverallResults successes="4" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="4" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Take generator" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
      <Section name="Take more" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Original>
            gen.get() == 1
          </Original>
          <Expanded>
            1 == 1
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Original>
            !(gen.next())
          </Original>
          <Expanded>
            !false
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Map with explicit return type" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          gen.get() == 2.0
        </Original>
        <Expanded>
          2.0 == 2.0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          gen.next()
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          gen.get() == 4.0
        </Original>
        <Expanded>
          4.0 == 4.0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          gen.next()
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          gen.get() == 6.0
        </Original>
        <Expanded>
          6.0 == 6.0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          !(gen.next())
        </Original>
        <Expanded>
          !false
        </Expanded>
      </Expression>
      <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Map with deduced return type" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          gen.get() == 2.0
        </Original>
        <Expanded>
          2.0 == 2.0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          gen.next()
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          gen.get() == 4.0
        </Original>
        <Expanded>
          4.0 == 4.0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          gen.next()
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          gen.get() == 6.0
        </Original>
        <Expanded>
          6.0 == 6.0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Original>
          !(gen.next())
        </Original>
        <Expanded>
          !false
        </Expanded>
      </Expression>
      <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Repeat" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
      <Section name="Singular repeat" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Original>
            gen.get() == 3
          </Original>
          <Expanded>
            3 == 3
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Original>
            !(gen.next())
          </Original>
          <Expanded>
            !false
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Repeat" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
      <Section name="Actual repeat" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Original>
            gen.get() == 1
          </Original>
          <Expanded>
            1 == 1
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Original>
            gen.next()
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Original>
            gen.get() == 2
          </Original>
          <Expanded>
            2 == 2
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Original>
            gen.next()
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Original>
            gen.get() == 3
          </Original>
          <Expanded>
            3 == 3
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Original>
            gen.next()
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Original>
            gen.get() == 1
          </Original>
          <Expanded>
            1 == 1
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Original>
            gen.next()
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Original>
            gen.get() == 2
          </Original>
          <Expanded>
            2 == 2
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Original>
            gen.next()
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Original>
            gen.get() == 3
          </Original>
          <Expanded>
            3 == 3
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Original>
            !(gen.next())
          </Original>
          <Expanded>
            !false
          </Expanded>
        </Expression>
        <OverallResults successes="12" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="12" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Range" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
      <Section name="Positive auto step" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Section name="Integer" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
            <Original>
              gen.get() == -2
            </Original>
            <Expanded>
              -2 == -2
            </Expanded>
          </Expression>
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
            <Original>
              gen.next()
            </Original>
            <Expanded>
              true
            </Expanded>
          </Expression>
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
            <Original>
              gen.get() == -1
            </Original>
            <Expanded>
              -1 == -1
            </Expanded>
          </Expression>
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
            <Original>
              gen.next()
            </Original>
            <Expanded>
              true
            </Expanded>
          </Expression>
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
            <Original>
              gen.get() == 0
            </Original>
            <Expanded>
              0 == 0
            </Expanded>
          </Expression>
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
            <Original>
              gen.next()
            </Original>
            <Expanded>
              true
            </Expanded>
          </Expression>
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
            <Original>
              gen.get() == 1
            </Original>
            <Expanded>
              1 == 1
            </Expanded>
          </Expression>
          <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
            <Original>
              !(gen.next())
            </Original>
            <Expanded>
              !false
            </Expanded>
          </Expression>
          <OverallResults successes="8" failures="0" expectedFailures="0" skipped="false"/>
        </Section>
        <OverallResults successes="8" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="8" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Range" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
      <Section name="Negative auto step" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Section name="Integer" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
            <Original>
              gen.get() == 2
            </Original>
            <Expanded>
              2 == 2
            </Expanded>
          </Expression>
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
            <Original>
              gen.next()
            </Original>
            <Expanded>
              true
            </Expanded>
          </Expression>
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
            <Original>
              gen.get() == 1
            </Original>
            <Expanded>
              1 == 1
            </Expanded>
          </Expression>
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
            <Original>
              gen.next()
            </Original>
            <Expanded>
              true
            </Expanded>
          </Expression>
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
            <Original>
              gen.get() == 0
            </Original>
            <Expanded>
              0 == 0
            </Expanded>
          </Expression>
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
            <Original>
              gen.next()
            </Original>
            <Expanded>
              true
            </Expanded>
          </Expression>
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
            <Original>
              gen.get() == -1
            </Original>
            <Expanded>
              -1 == -1
            </Expanded>
          </Expression>
          <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
            <Original>
              !(gen.next())
            </Original>
            <Expanded>
              !false
            </Expanded>
          </Expression>
          <OverallResults successes="8" failures="0" expectedFailures="0" skipped="false"/>
        </Section>
        <OverallResults successes="8" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="8" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Range" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
      <Section name="Positive manual step" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Section name="Integer" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Section name="Exact" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == -7
              </Original>
              <Expanded>
                -7 == -7
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == -4
              </Original>
              <Expanded>
                -4 == -4
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == -1
              </Original>
              <Expanded>
                -1 == -1
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == 2
              </Original>
              <Expanded>
                2 == 2
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                !(gen.next())
              </Original>
              <Expanded>
                !false
              </Expanded>
            </Expression>
            <OverallResults successes="8" failures="0" expectedFailures="0" skipped="false"/>
          </Section>
          <OverallResults successes="8" failures="0" expectedFailures="0" skipped="false"/>
        </Section>
        <OverallResults successes="8" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="8" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Range" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
      <Section name="Positive manual step" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Section name="Integer" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Section name="Slightly over end" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == -7
              </Original>
              <Expanded>
                -7 == -7
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == -4
              </Original>
              <Expanded>
                -4 == -4
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == -1
              </Original>
              <Expanded>
                -1 == -1
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == 2
              </Original>
              <Expanded>
                2 == 2
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                !(gen.next())
              </Original>
              <Expanded>
                !false
              </Expanded>
            </Expression>
            <OverallResults successes="8" failures="0" expectedFailures="0" skipped="false"/>
          </Section>
          <OverallResults successes="8" failures="0" expectedFailures="0" skipped="false"/>
        </Section>
        <OverallResults successes="8" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="8" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Range" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
      <Section name="Positive manual step" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Section name="Integer" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Section name="Slightly under end" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == -7
              </Original>
              <Expanded>
                -7 == -7
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == -4
              </Original>
              <Expanded>
                -4 == -4
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == -1
              </Original>
              <Expanded>
                -1 == -1
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == 2
              </Original>
              <Expanded>
                2 == 2
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == 5
              </Original>
              <Expanded>
                5 == 5
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                !(gen.next())
              </Original>
              <Expanded>
                !false
              </Expanded>
            </Expression>
            <OverallResults successes="10" failures="0" expectedFailures="0" skipped="false"/>
          </Section>
          <OverallResults successes="10" failures="0" expectedFailures="0" skipped="false"/>
        </Section>
        <OverallResults successes="10" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="10" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Range" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
      <Section name="Positive manual step" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Section name="Floating Point" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Section name="Exact" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -1
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == Approx(expected)
              </Original>
              <Expanded>
                -1.0 == Approx( -1.0 )
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -1
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -0.9
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == Approx(expected)
              </Original>
              <Expanded>
                -0.9 == Approx( -0.9 )
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -0.9
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -0.8
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == Approx(expected)
              </Original>
              <Expanded>
                -0.8 == Approx( -0.8 )
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -0.8
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -0.7
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == Approx(expected)
              </Original>
              <Expanded>
                -0.7 == Approx( -0.7 )
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -0.7
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -0.6
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == Approx(expected)
              </Original>
              <Expanded>
                -0.6 == Approx( -0.6 )
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -0.6
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -0.5
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == Approx(expected)
              </Original>
              <Expanded>
                -0.5 == Approx( -0.5 )
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -0.5
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -0.4
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == Approx(expected)
              </Original>
              <Expanded>
                -0.4 == Approx( -0.4 )
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -0.4
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -0.3
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == Approx(expected)
              </Original>
              <Expanded>
                -0.3 == Approx( -0.3 )
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -0.3
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -0.2
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == Approx(expected)
              </Original>
              <Expanded>
                -0.2 == Approx( -0.2 )
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -0.2
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -0.1
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == Approx(expected)
              </Original>
              <Expanded>
                -0.1 == Approx( -0.1 )
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -0.1
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -1.38778e-16
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == Approx(expected)
              </Original>
              <Expanded>
                -0.0 == Approx( -0.0 )
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -1.38778e-16
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is 0.1
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == Approx(expected)
              </Original>
              <Expanded>
                0.1 == Approx( 0.1 )
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is 0.1
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is 0.2
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == Approx(expected)
              </Original>
              <Expanded>
                0.2 == Approx( 0.2 )
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is 0.2
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is 0.3
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == Approx(expected)
              </Original>
              <Expanded>
                0.3 == Approx( 0.3 )
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is 0.3
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is 0.4
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == Approx(expected)
              </Original>
              <Expanded>
                0.4 == Approx( 0.4 )
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is 0.4
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is 0.5
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == Approx(expected)
              </Original>
              <Expanded>
                0.5 == Approx( 0.5 )
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is 0.5
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is 0.6
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == Approx(expected)
              </Original>
              <Expanded>
                0.6 == Approx( 0.6 )
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is 0.6
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is 0.7
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == Approx(expected)
              </Original>
              <Expanded>
                0.7 == Approx( 0.7 )
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is 0.7
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is 0.8
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == Approx(expected)
              </Original>
              <Expanded>
                0.8 == Approx( 0.8 )
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is 0.8
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is 0.9
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == Approx(expected)
              </Original>
              <Expanded>
                0.9 == Approx( 0.9 )
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is 0.9
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == Approx( rangeEnd )
              </Original>
              <Expanded>
                1.0 == Approx( 1.0 )
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                !(gen.next())
              </Original>
              <Expanded>
                !false
              </Expanded>
            </Expression>
            <OverallResults successes="42" failures="0" expectedFailures="0" skipped="false"/>
          </Section>
          <OverallResults successes="42" failures="0" expectedFailures="0" skipped="false"/>
        </Section>
        <OverallResults successes="42" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="42" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Range" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
      <Section name="Positive manual step" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Section name="Floating Point" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Section name="Slightly over end" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -1
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == Approx(expected)
              </Original>
              <Expanded>
                -1.0 == Approx( -1.0 )
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -1
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -0.7
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == Approx(expected)
              </Original>
              <Expanded>
                -0.7 == Approx( -0.7 )
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -0.7
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -0.4
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == Approx(expected)
              </Original>
              <Expanded>
                -0.4 == Approx( -0.4 )
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -0.4
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -0.1
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == Approx(expected)
              </Original>
              <Expanded>
                -0.1 == Approx( -0.1 )
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -0.1
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is 0.2
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == Approx(expected)
              </Original>
              <Expanded>
                0.2 == Approx( 0.2 )
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is 0.2
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is 0.5
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == Approx(expected)
              </Original>
              <Expanded>
                0.5 == Approx( 0.5 )
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is 0.5
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                !(gen.next())
              </Original>
              <Expanded>
                !false
              </Expanded>
            </Expression>
            <OverallResults successes="13" failures="0" expectedFailures="0" skipped="false"/>
          </Section>
          <OverallResults successes="13" failures="0" expectedFailures="0" skipped="false"/>
        </Section>
        <OverallResults successes="13" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="13" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Range" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
      <Section name="Positive manual step" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Section name="Floating Point" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Section name="Slightly under end" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -1
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == Approx(expected)
              </Original>
              <Expanded>
                -1.0 == Approx( -1.0 )
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -1
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -0.7
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == Approx(expected)
              </Original>
              <Expanded>
                -0.7 == Approx( -0.7 )
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -0.7
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -0.4
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == Approx(expected)
              </Original>
              <Expanded>
                -0.4 == Approx( -0.4 )
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -0.4
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -0.1
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == Approx(expected)
              </Original>
              <Expanded>
                -0.1 == Approx( -0.1 )
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is -0.1
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is 0.2
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == Approx(expected)
              </Original>
              <Expanded>
                0.2 == Approx( 0.2 )
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is 0.2
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is 0.5
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == Approx(expected)
              </Original>
              <Expanded>
                0.5 == Approx( 0.5 )
              </Expanded>
            </Expression>
            <Info filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              Current expected value is 0.5
            </Info>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                !(gen.next())
              </Original>
              <Expanded>
                !false
              </Expanded>
            </Expression>
            <OverallResults successes="13" failures="0" expectedFailures="0" skipped="false"/>
          </Section>
          <OverallResults successes="13" failures="0" expectedFailures="0" skipped="false"/>
        </Section>
        <OverallResults successes="13" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="13" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Range" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
      <Section name="Negative manual step" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Section name="Integer" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Section name="Exact" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == 5
              </Original>
              <Expanded>
                5 == 5
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == 2
              </Original>
              <Expanded>
                2 == 2
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == -1
              </Original>
              <Expanded>
                -1 == -1
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == -4
              </Original>
              <Expanded>
                -4 == -4
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                !(gen.next())
              </Original>
              <Expanded>
                !false
              </Expanded>
            </Expression>
            <OverallResults successes="8" failures="0" expectedFailures="0" skipped="false"/>
          </Section>
          <OverallResults successes="8" failures="0" expectedFailures="0" skipped="false"/>
        </Section>
        <OverallResults successes="8" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="8" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Range" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
      <Section name="Negative manual step" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Section name="Integer" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Section name="Slightly over end" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == 5
              </Original>
              <Expanded>
                5 == 5
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == 2
              </Original>
              <Expanded>
                2 == 2
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == -1
              </Original>
              <Expanded>
                -1 == -1
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == -4
              </Original>
              <Expanded>
                -4 == -4
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                !(gen.next())
              </Original>
              <Expanded>
                !false
              </Expanded>
            </Expression>
            <OverallResults successes="8" failures="0" expectedFailures="0" skipped="false"/>
          </Section>
          <OverallResults successes="8" failures="0" expectedFailures="0" skipped="false"/>
        </Section>
        <OverallResults successes="8" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="8" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Range" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
      <Section name="Negative manual step" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
        <Section name="Integer" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
          <Section name="Slightly under end" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == 5
              </Original>
              <Expanded>
                5 == 5
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == 2
              </Original>
              <Expanded>
                2 == 2
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == -1
              </Original>
              <Expanded>
                -1 == -1
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == -4
              </Original>
              <Expanded>
                -4 == -4
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.next()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                gen.get() == -7
              </Original>
              <Expanded>
                -7 == -7
              </Expanded>
            </Expression>
            <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
              <Original>
                !(gen.next())
              </Original>
              <Expanded>
                !false
              </Expanded>
            </Expression>
            <OverallResults successes="10" failures="0" expectedFailures="0" skipped="false"/>
          </Section>
          <OverallResults successes="10" failures="0" expectedFailures="0" skipped="false"/>
        </Section>
        <OverallResults successes="10" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="10" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Greater-than inequalities with different epsilons" tags="[Approx]" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        d >= Approx( 1.22 )
      </Original>
      <Expanded>
        1.23 >= Approx( 1.22 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        d >= Approx( 1.23 )
      </Original>
      <Expanded>
        1.23 >= Approx( 1.23 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        !(d >= Approx( 1.24 ))
      </Original>
      <Expanded>
        !(1.23 >= Approx( 1.24 ))
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        d >= Approx( 1.24 ).epsilon(0.1)
      </Original>
      <Expanded>
        1.23 >= Approx( 1.24 )
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Hashers with different seed produce different hash with same test case" tags="[test-case-hash]" filename="tests/<exe-name>/IntrospectiveTests/TestCaseInfoHasher.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/TestCaseInfoHasher.tests.cpp" >
      <Original>
        h1( dummy ) != h2( dummy )
      </Original>
      <Expanded>
        3422778688 (0x<hex digits>)
!=
130711275 (0x<hex digits>)
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Hashers with same seed produce same hash" tags="[test-case-hash]" filename="tests/<exe-name>/IntrospectiveTests/TestCaseInfoHasher.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/TestCaseInfoHasher.tests.cpp" >
      <Original>
        h1( dummy ) == h2( dummy )
      </Original>
      <Expanded>
        3422778688 (0x<hex digits>)
==
3422778688 (0x<hex digits>)
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Hashing different test cases produces different result" tags="[test-case-hash]" filename="tests/<exe-name>/IntrospectiveTests/TestCaseInfoHasher.tests.cpp" >
    <Section name="Different test name" filename="tests/<exe-name>/IntrospectiveTests/TestCaseInfoHasher.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/TestCaseInfoHasher.tests.cpp" >
        <Original>
          h( dummy1 ) != h( dummy2 )
        </Original>
        <Expanded>
          2903002874 (0x<hex digits>)
!=
2668622104 (0x<hex digits>)
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Different classname" filename="tests/<exe-name>/IntrospectiveTests/TestCaseInfoHasher.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/TestCaseInfoHasher.tests.cpp" >
        <Original>
          h( dummy1 ) != h( dummy2 )
        </Original>
        <Expanded>
          2673152918 (0x<hex digits>)
!=
3916075712 (0x<hex digits>)
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Different tags" filename="tests/<exe-name>/IntrospectiveTests/TestCaseInfoHasher.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/TestCaseInfoHasher.tests.cpp" >
        <Original>
          h( dummy1 ) != h( dummy2 )
        </Original>
        <Expanded>
          2074929312 (0x<hex digits>)
!=
3429949824 (0x<hex digits>)
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Hashing test case produces same hash across multiple calls" tags="[test-case-hash]" filename="tests/<exe-name>/IntrospectiveTests/TestCaseInfoHasher.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/TestCaseInfoHasher.tests.cpp" >
      <Original>
        h( dummy ) == h( dummy )
      </Original>
      <Expanded>
        3422778688 (0x<hex digits>)
==
3422778688 (0x<hex digits>)
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="INFO and WARN do not abort tests" tags="[.][messages]" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      this is a message
    </Info>
    <Warning filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      this is a warning
    </Warning>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="INFO gets logged on failure" tags="[.][failing][messages]" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      this message should be logged
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      so should this
    </Info>
    <Expression success="false" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      <Original>
        a == 1
      </Original>
      <Expanded>
        2 == 1
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="INFO gets logged on failure, even if captured before successful assertions" tags="[.][failing][messages]" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      this message may be logged later
    </Info>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      <Original>
        a == 2
      </Original>
      <Expanded>
        2 == 2
      </Expanded>
    </Expression>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      this message may be logged later
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      this message should be logged
    </Info>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      <Original>
        a == 1
      </Original>
      <Expanded>
        2 == 1
      </Expanded>
    </Expression>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      this message may be logged later
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      this message should be logged
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      and this, but later
    </Info>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      <Original>
        a == 0
      </Original>
      <Expanded>
        2 == 0
      </Expanded>
    </Expression>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      this message may be logged later
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      this message should be logged
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      and this, but later
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      but not this
    </Info>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      <Original>
        a == 2
      </Original>
      <Expanded>
        2 == 2
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="INFO is reset for each loop" tags="[.][failing][messages]" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      current counter 0
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      i := 0
    </Info>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      <Original>
        i &lt; 10
      </Original>
      <Expanded>
        0 &lt; 10
      </Expanded>
    </Expression>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      current counter 1
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      i := 1
    </Info>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      <Original>
        i &lt; 10
      </Original>
      <Expanded>
        1 &lt; 10
      </Expanded>
    </Expression>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      current counter 2
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      i := 2
    </Info>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      <Original>
        i &lt; 10
      </Original>
      <Expanded>
        2 &lt; 10
      </Expanded>
    </Expression>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      current counter 3
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      i := 3
    </Info>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      <Original>
        i &lt; 10
      </Original>
      <Expanded>
        3 &lt; 10
      </Expanded>
    </Expression>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      current counter 4
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      i := 4
    </Info>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      <Original>
        i &lt; 10
      </Original>
      <Expanded>
        4 &lt; 10
      </Expanded>
    </Expression>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      current counter 5
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      i := 5
    </Info>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      <Original>
        i &lt; 10
      </Original>
      <Expanded>
        5 &lt; 10
      </Expanded>
    </Expression>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      current counter 6
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      i := 6
    </Info>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      <Original>
        i &lt; 10
      </Original>
      <Expanded>
        6 &lt; 10
      </Expanded>
    </Expression>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      current counter 7
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      i := 7
    </Info>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      <Original>
        i &lt; 10
      </Original>
      <Expanded>
        7 &lt; 10
      </Expanded>
    </Expression>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      current counter 8
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      i := 8
    </Info>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      <Original>
        i &lt; 10
      </Original>
      <Expanded>
        8 &lt; 10
      </Expanded>
    </Expression>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      current counter 9
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      i := 9
    </Info>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      <Original>
        i &lt; 10
      </Original>
      <Expanded>
        9 &lt; 10
      </Expanded>
    </Expression>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      current counter 10
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      i := 10
    </Info>
    <Expression success="false" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      <Original>
        i &lt; 10
      </Original>
      <Expanded>
        10 &lt; 10
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="Inequality checks that should fail" tags="[!shouldfail][.][failing]" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.int_seven != 7
      </Original>
      <Expanded>
        7 != 7
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.float_nine_point_one != Approx( 9.1f )
      </Original>
      <Expanded>
        9.1f != Approx( 9.1000003815 )
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.double_pi != Approx( 3.1415926535 )
      </Original>
      <Expanded>
        3.1415926535 != Approx( 3.1415926535 )
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.str_hello != "hello"
      </Original>
      <Expanded>
        "hello" != "hello"
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.str_hello.size() != 5
      </Original>
      <Expanded>
        5 != 5
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Inequality checks that should succeed" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.int_seven != 6
      </Original>
      <Expanded>
        7 != 6
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.int_seven != 8
      </Original>
      <Expanded>
        7 != 8
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.float_nine_point_one != Approx( 9.11f )
      </Original>
      <Expanded>
        9.1f != Approx( 9.1099996567 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.float_nine_point_one != Approx( 9.0f )
      </Original>
      <Expanded>
        9.1f != Approx( 9.0 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.float_nine_point_one != Approx( 1 )
      </Original>
      <Expanded>
        9.1f != Approx( 1.0 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.float_nine_point_one != Approx( 0 )
      </Original>
      <Expanded>
        9.1f != Approx( 0.0 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.double_pi != Approx( 3.1415 )
      </Original>
      <Expanded>
        3.1415926535 != Approx( 3.1415 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.str_hello != "goodbye"
      </Original>
      <Expanded>
        "hello" != "goodbye"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.str_hello != "hell"
      </Original>
      <Expanded>
        "hello" != "hell"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.str_hello != "hello1"
      </Original>
      <Expanded>
        "hello" != "hello1"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.str_hello.size() != 6
      </Original>
      <Expanded>
        5 != 6
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Lambdas in assertions" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
      <Original>
        []() { return true; }()
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Less-than inequalities with different epsilons" tags="[Approx]" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        d &lt;= Approx( 1.24 )
      </Original>
      <Expanded>
        1.23 &lt;= Approx( 1.24 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        d &lt;= Approx( 1.23 )
      </Original>
      <Expanded>
        1.23 &lt;= Approx( 1.23 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        !(d &lt;= Approx( 1.22 ))
      </Original>
      <Expanded>
        !(1.23 &lt;= Approx( 1.22 ))
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        d &lt;= Approx( 1.22 ).epsilon(0.1)
      </Original>
      <Expanded>
        1.23 &lt;= Approx( 1.22 )
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="ManuallyRegistered" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Matchers can be (AllOf) composed with the &amp;&amp; operator" tags="[matchers][operator&amp;&amp;][operators]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        testStringForMatching(), ContainsSubstring( "string" ) &amp;&amp; ContainsSubstring( "abc" ) &amp;&amp; ContainsSubstring( "substring" ) &amp;&amp; ContainsSubstring( "contains" )
      </Original>
      <Expanded>
        "this string contains 'abc' as a substring" ( contains: "string" and contains: "abc" and contains: "substring" and contains: "contains" )
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Matchers can be (AnyOf) composed with the || operator" tags="[matchers][operators][operator||]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        testStringForMatching(), ContainsSubstring( "string" ) || ContainsSubstring( "different" ) || ContainsSubstring( "random" )
      </Original>
      <Expanded>
        "this string contains 'abc' as a substring" ( contains: "string" or contains: "different" or contains: "random" )
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        testStringForMatching2(), ContainsSubstring( "string" ) || ContainsSubstring( "different" ) || ContainsSubstring( "random" )
      </Original>
      <Expanded>
        "some completely different text that contains one common word" ( contains: "string" or contains: "different" or contains: "random" )
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Matchers can be composed with both &amp;&amp; and ||" tags="[matchers][operator&amp;&amp;][operators][operator||]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        testStringForMatching(), ( ContainsSubstring( "string" ) || ContainsSubstring( "different" ) ) &amp;&amp; ContainsSubstring( "substring" )
      </Original>
      <Expanded>
        "this string contains 'abc' as a substring" ( ( contains: "string" or contains: "different" ) and contains: "substring" )
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Matchers can be composed with both &amp;&amp; and || - failing" tags="[.][failing][matchers][operator&amp;&amp;][operators][operator||]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Expression success="false" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        testStringForMatching(), ( ContainsSubstring( "string" ) || ContainsSubstring( "different" ) ) &amp;&amp; ContainsSubstring( "random" )
      </Original>
      <Expanded>
        "this string contains 'abc' as a substring" ( ( contains: "string" or contains: "different" ) and contains: "random" )
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="Matchers can be negated (Not) with the ! operator" tags="[matchers][not][operators]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        testStringForMatching(), !ContainsSubstring( "different" )
      </Original>
      <Expanded>
        "this string contains 'abc' as a substring" not contains: "different"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Matchers can be negated (Not) with the ! operator - failing" tags="[.][failing][matchers][not][operators]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Expression success="false" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        testStringForMatching(), !ContainsSubstring( "substring" )
      </Original>
      <Expanded>
        "this string contains 'abc' as a substring" not contains: "substring"
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="Mayfail test case with nested sections" tags="[!mayfail]" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
    <Section name="A" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Section name="1" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
        <Failure filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" />
        <OverallResults successes="0" failures="0" expectedFailures="1" skipped="false"/>
      </Section>
      <OverallResults successes="0" failures="0" expectedFailures="1" skipped="false"/>
    </Section>
    <Section name="A" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Section name="2" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
        <Failure filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" />
        <OverallResults successes="0" failures="0" expectedFailures="1" skipped="false"/>
      </Section>
      <OverallResults successes="0" failures="0" expectedFailures="1" skipped="false"/>
    </Section>
    <Section name="A" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <OverallResults successes="0" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="B" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Section name="1" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
        <Failure filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" />
        <OverallResults successes="0" failures="0" expectedFailures="1" skipped="false"/>
      </Section>
      <OverallResults successes="0" failures="0" expectedFailures="1" skipped="false"/>
    </Section>
    <Section name="B" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Section name="2" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
        <Failure filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" />
        <OverallResults successes="0" failures="0" expectedFailures="1" skipped="false"/>
      </Section>
      <OverallResults successes="0" failures="0" expectedFailures="1" skipped="false"/>
    </Section>
    <Section name="B" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <OverallResults successes="0" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Mismatching exception messages failing the test" tags="[!throws][.][failing]" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
    <Expression success="true" type="REQUIRE_THROWS_WITH" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
      <Original>
        thisThrows(), "expected exception"
      </Original>
      <Expanded>
        "expected exception" equals: "expected exception"
      </Expanded>
    </Expression>
    <Expression success="false" type="REQUIRE_THROWS_WITH" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
      <Original>
        thisThrows(), "should fail"
      </Original>
      <Expanded>
        "expected exception" equals: "should fail"
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="Multireporter calls reporters and listeners in correct order" tags="[multi-reporter][reporters]" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Original>
        records == expected
      </Original>
      <Expanded>
        { "Hello", "world", "Goodbye", "world" }
==
{ "Hello", "world", "Goodbye", "world" }
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Multireporter updates ReporterPreferences properly" tags="[multi-reporter][reporters]" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Original>
        multiReporter.getPreferences().shouldRedirectStdOut == false
      </Original>
      <Expanded>
        false == false
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Original>
        multiReporter.getPreferences().shouldReportAllAssertions == false
      </Original>
      <Expanded>
        false == false
      </Expanded>
    </Expression>
    <Section name="Adding listeners" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          multiReporter.getPreferences().shouldRedirectStdOut == true
        </Original>
        <Expanded>
          true == true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          multiReporter.getPreferences().shouldReportAllAssertions == false
        </Original>
        <Expanded>
          false == false
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          multiReporter.getPreferences().shouldRedirectStdOut == true
        </Original>
        <Expanded>
          true == true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          multiReporter.getPreferences().shouldReportAllAssertions == true
        </Original>
        <Expanded>
          true == true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          multiReporter.getPreferences().shouldRedirectStdOut == true
        </Original>
        <Expanded>
          true == true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          multiReporter.getPreferences().shouldReportAllAssertions == true
        </Original>
        <Expanded>
          true == true
        </Expanded>
      </Expression>
      <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Original>
        multiReporter.getPreferences().shouldRedirectStdOut == false
      </Original>
      <Expanded>
        false == false
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Original>
        multiReporter.getPreferences().shouldReportAllAssertions == false
      </Original>
      <Expanded>
        false == false
      </Expanded>
    </Expression>
    <Section name="Adding reporters" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          multiReporter.getPreferences().shouldRedirectStdOut == true
        </Original>
        <Expanded>
          true == true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          multiReporter.getPreferences().shouldReportAllAssertions == false
        </Original>
        <Expanded>
          false == false
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          multiReporter.getPreferences().shouldRedirectStdOut == true
        </Original>
        <Expanded>
          true == true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          multiReporter.getPreferences().shouldReportAllAssertions == true
        </Original>
        <Expanded>
          true == true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          multiReporter.getPreferences().shouldRedirectStdOut == true
        </Original>
        <Expanded>
          true == true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          multiReporter.getPreferences().shouldReportAllAssertions == true
        </Original>
        <Expanded>
          true == true
        </Expanded>
      </Expression>
      <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Nested generators and captured variables" tags="[generators]" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        values > -6
      </Original>
      <Expanded>
        3 > -6
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        values > -6
      </Original>
      <Expanded>
        4 > -6
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        values > -6
      </Original>
      <Expanded>
        5 > -6
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        values > -6
      </Original>
      <Expanded>
        6 > -6
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        values > -6
      </Original>
      <Expanded>
        -5 > -6
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        values > -6
      </Original>
      <Expanded>
        -4 > -6
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        values > -6
      </Original>
      <Expanded>
        90 > -6
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        values > -6
      </Original>
      <Expanded>
        91 > -6
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        values > -6
      </Original>
      <Expanded>
        92 > -6
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        values > -6
      </Original>
      <Expanded>
        93 > -6
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        values > -6
      </Original>
      <Expanded>
        94 > -6
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        values > -6
      </Original>
      <Expanded>
        95 > -6
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        values > -6
      </Original>
      <Expanded>
        96 > -6
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        values > -6
      </Original>
      <Expanded>
        97 > -6
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        values > -6
      </Original>
      <Expanded>
        98 > -6
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        values > -6
      </Original>
      <Expanded>
        99 > -6
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Nice descriptive name" tags="[.][tag1][tag2][tag3]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Warning filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      This one ran
    </Warning>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="Non-std exceptions can be translated" tags="[!throws][.][failing]" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
    <Exception filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
      custom exception
    </Exception>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="Objects that evaluated in boolean contexts can be checked" tags="[SafeBool][Tricky]" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      <Original>
        True
      </Original>
      <Expanded>
        {?}
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      <Original>
        !False
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK_FALSE" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      <Original>
        !(False)
      </Original>
      <Expanded>
        !{?}
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Optionally static assertions" tags="[compilation]" filename="tests/<exe-name>/UsageTests/Compilation.tests.cpp" >
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Ordering comparison checks that should fail" tags="[.][failing]" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.int_seven > 7
      </Original>
      <Expanded>
        7 > 7
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.int_seven &lt; 7
      </Original>
      <Expanded>
        7 &lt; 7
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.int_seven > 8
      </Original>
      <Expanded>
        7 > 8
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.int_seven &lt; 6
      </Original>
      <Expanded>
        7 &lt; 6
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.int_seven &lt; 0
      </Original>
      <Expanded>
        7 &lt; 0
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.int_seven &lt; -1
      </Original>
      <Expanded>
        7 &lt; -1
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.int_seven >= 8
      </Original>
      <Expanded>
        7 >= 8
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.int_seven &lt;= 6
      </Original>
      <Expanded>
        7 &lt;= 6
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.float_nine_point_one &lt; 9
      </Original>
      <Expanded>
        9.1f &lt; 9
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.float_nine_point_one > 10
      </Original>
      <Expanded>
        9.1f > 10
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.float_nine_point_one > 9.2
      </Original>
      <Expanded>
        9.1f > 9.2
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.str_hello > "hello"
      </Original>
      <Expanded>
        "hello" > "hello"
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.str_hello &lt; "hello"
      </Original>
      <Expanded>
        "hello" &lt; "hello"
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.str_hello > "hellp"
      </Original>
      <Expanded>
        "hello" > "hellp"
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.str_hello > "z"
      </Original>
      <Expanded>
        "hello" > "z"
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.str_hello &lt; "hellm"
      </Original>
      <Expanded>
        "hello" &lt; "hellm"
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.str_hello &lt; "a"
      </Original>
      <Expanded>
        "hello" &lt; "a"
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.str_hello >= "z"
      </Original>
      <Expanded>
        "hello" >= "z"
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.str_hello &lt;= "a"
      </Original>
      <Expanded>
        "hello" &lt;= "a"
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="Ordering comparison checks that should succeed" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.int_seven &lt; 8
      </Original>
      <Expanded>
        7 &lt; 8
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.int_seven > 6
      </Original>
      <Expanded>
        7 > 6
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.int_seven > 0
      </Original>
      <Expanded>
        7 > 0
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.int_seven > -1
      </Original>
      <Expanded>
        7 > -1
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.int_seven >= 7
      </Original>
      <Expanded>
        7 >= 7
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.int_seven >= 6
      </Original>
      <Expanded>
        7 >= 6
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.int_seven &lt;= 7
      </Original>
      <Expanded>
        7 &lt;= 7
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.int_seven &lt;= 8
      </Original>
      <Expanded>
        7 &lt;= 8
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.float_nine_point_one > 9
      </Original>
      <Expanded>
        9.1f > 9
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.float_nine_point_one &lt; 10
      </Original>
      <Expanded>
        9.1f &lt; 10
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.float_nine_point_one &lt; 9.2
      </Original>
      <Expanded>
        9.1f &lt; 9.2
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.str_hello &lt;= "hello"
      </Original>
      <Expanded>
        "hello" &lt;= "hello"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.str_hello >= "hello"
      </Original>
      <Expanded>
        "hello" >= "hello"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.str_hello &lt; "hellp"
      </Original>
      <Expanded>
        "hello" &lt; "hellp"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.str_hello &lt; "zebra"
      </Original>
      <Expanded>
        "hello" &lt; "zebra"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.str_hello > "hellm"
      </Original>
      <Expanded>
        "hello" > "hellm"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        data.str_hello > "a"
      </Original>
      <Expanded>
        "hello" > "a"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Our PCG implementation provides expected results for known seeds" tags="[rng]" filename="tests/<exe-name>/IntrospectiveTests/RandomNumberGeneration.tests.cpp" >
    <Section name="Default seeded" filename="tests/<exe-name>/IntrospectiveTests/RandomNumberGeneration.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/RandomNumberGeneration.tests.cpp" >
        <Original>
          rng() == 0x<hex digits>
        </Original>
        <Expanded>
          4242248763 (0x<hex digits>)
==
4242248763 (0x<hex digits>)
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/RandomNumberGeneration.tests.cpp" >
        <Original>
          rng() == 0x<hex digits>
        </Original>
        <Expanded>
          1867888929 (0x<hex digits>)
==
1867888929 (0x<hex digits>)
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/RandomNumberGeneration.tests.cpp" >
        <Original>
          rng() == 0x<hex digits>
        </Original>
        <Expanded>
          1276619030 (0x<hex digits>)
==
1276619030 (0x<hex digits>)
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/RandomNumberGeneration.tests.cpp" >
        <Original>
          rng() == 0x<hex digits>
        </Original>
        <Expanded>
          1911218783 (0x<hex digits>)
==
1911218783 (0x<hex digits>)
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/RandomNumberGeneration.tests.cpp" >
        <Original>
          rng() == 0x<hex digits>
        </Original>
        <Expanded>
          1827115164 (0x<hex digits>)
==
1827115164 (0x<hex digits>)
        </Expanded>
      </Expression>
      <OverallResults successes="5" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Specific seed" filename="tests/<exe-name>/IntrospectiveTests/RandomNumberGeneration.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/RandomNumberGeneration.tests.cpp" >
        <Original>
          rng() == 0x<hex digits>
        </Original>
        <Expanded>
          1472234645 (0x<hex digits>)
==
1472234645 (0x<hex digits>)
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/RandomNumberGeneration.tests.cpp" >
        <Original>
          rng() == 0x<hex digits>
        </Original>
        <Expanded>
          868832940 (0x<hex digits>)
==
868832940 (0x<hex digits>)
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/RandomNumberGeneration.tests.cpp" >
        <Original>
          rng() == 0x<hex digits>
        </Original>
        <Expanded>
          570883446 (0x<hex digits>)
==
570883446 (0x<hex digits>)
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/RandomNumberGeneration.tests.cpp" >
        <Original>
          rng() == 0x<hex digits>
        </Original>
        <Expanded>
          889299803 (0x<hex digits>)
==
889299803 (0x<hex digits>)
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/RandomNumberGeneration.tests.cpp" >
        <Original>
          rng() == 0x<hex digits>
        </Original>
        <Expanded>
          4261393167 (0x<hex digits>)
==
4261393167 (0x<hex digits>)
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/RandomNumberGeneration.tests.cpp" >
        <Original>
          rng() == 0x<hex digits>
        </Original>
        <Expanded>
          1472234645 (0x<hex digits>)
==
1472234645 (0x<hex digits>)
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/RandomNumberGeneration.tests.cpp" >
        <Original>
          rng() == 0x<hex digits>
        </Original>
        <Expanded>
          868832940 (0x<hex digits>)
==
868832940 (0x<hex digits>)
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/RandomNumberGeneration.tests.cpp" >
        <Original>
          rng() == 0x<hex digits>
        </Original>
        <Expanded>
          570883446 (0x<hex digits>)
==
570883446 (0x<hex digits>)
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/RandomNumberGeneration.tests.cpp" >
        <Original>
          rng() == 0x<hex digits>
        </Original>
        <Expanded>
          889299803 (0x<hex digits>)
==
889299803 (0x<hex digits>)
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/RandomNumberGeneration.tests.cpp" >
        <Original>
          rng() == 0x<hex digits>
        </Original>
        <Expanded>
          4261393167 (0x<hex digits>)
==
4261393167 (0x<hex digits>)
        </Expanded>
      </Expression>
      <OverallResults successes="10" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Output from all sections is reported" tags="[.][failing][messages]" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
    <Section name="one" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      <Failure filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
        Message from section one
      </Failure>
      <OverallResults successes="0" failures="1" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="two" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      <Failure filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
        Message from section two
      </Failure>
      <OverallResults successes="0" failures="1" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="Overloaded comma or address-of operators are not used" tags="[matchers][templated]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Expression success="true" type="REQUIRE_THROWS_AS" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        ( EvilMatcher(), EvilMatcher() ), EvilCommaOperatorUsed
      </Original>
      <Expanded>
        ( EvilMatcher(), EvilMatcher() ), EvilCommaOperatorUsed
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_THROWS_AS" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        &amp;EvilMatcher(), EvilAddressOfOperatorUsed
      </Original>
      <Expanded>
        &amp;EvilMatcher(), EvilAddressOfOperatorUsed
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_NOTHROW" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        EvilMatcher() || ( EvilMatcher() &amp;&amp; !EvilMatcher() )
      </Original>
      <Expanded>
        EvilMatcher() || ( EvilMatcher() &amp;&amp; !EvilMatcher() )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_NOTHROW" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        ( EvilMatcher() &amp;&amp; EvilMatcher() ) || !EvilMatcher()
      </Original>
      <Expanded>
        ( EvilMatcher() &amp;&amp; EvilMatcher() ) || !EvilMatcher()
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Parse uints" tags="[parse-numbers]" filename="tests/<exe-name>/IntrospectiveTests/Parse.tests.cpp" >
    <Section name="proper inputs" filename="tests/<exe-name>/IntrospectiveTests/Parse.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Parse.tests.cpp" >
        <Original>
          parseUInt( "0" ) == Optional&lt;unsigned int>{ 0 }
        </Original>
        <Expanded>
          {?} == {?}
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Parse.tests.cpp" >
        <Original>
          parseUInt( "100" ) == Optional&lt;unsigned int>{ 100 }
        </Original>
        <Expanded>
          {?} == {?}
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Parse.tests.cpp" >
        <Original>
          parseUInt( "4294967295" ) == Optional&lt;unsigned int>{ 4294967295 }
        </Original>
        <Expanded>
          {?} == {?}
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Parse.tests.cpp" >
        <Original>
          parseUInt( "0x<hex digits>", 16 ) == Optional&lt;unsigned int>{ 255 }
        </Original>
        <Expanded>
          {?} == {?}
        </Expanded>
      </Expression>
      <OverallResults successes="4" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Bad inputs" filename="tests/<exe-name>/IntrospectiveTests/Parse.tests.cpp" >
      <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Parse.tests.cpp" >
        <Original>
          !(parseUInt( "" ))
        </Original>
        <Expanded>
          !{?}
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Parse.tests.cpp" >
        <Original>
          !(parseUInt( "!!KJHF*#" ))
        </Original>
        <Expanded>
          !{?}
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Parse.tests.cpp" >
        <Original>
          !(parseUInt( "-1" ))
        </Original>
        <Expanded>
          !{?}
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Parse.tests.cpp" >
        <Original>
          !(parseUInt( "4294967296" ))
        </Original>
        <Expanded>
          !{?}
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Parse.tests.cpp" >
        <Original>
          !(parseUInt( "42949672964294967296429496729642949672964294967296" ))
        </Original>
        <Expanded>
          !{?}
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Parse.tests.cpp" >
        <Original>
          !(parseUInt( "2 4" ))
        </Original>
        <Expanded>
          !{?}
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Parse.tests.cpp" >
        <Original>
          !(parseUInt( "0x<hex digits>", 10 ))
        </Original>
        <Expanded>
          !{?}
        </Expanded>
      </Expression>
      <OverallResults successes="7" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Parsed tags are matched case insensitive" tags="[test-spec][test-spec-parser]" filename="tests/<exe-name>/IntrospectiveTests/TestSpecParser.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/TestSpecParser.tests.cpp" >
      <Original>
        spec.hasFilters()
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/TestSpecParser.tests.cpp" >
      <Original>
        spec.getInvalidSpecs().empty()
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/TestSpecParser.tests.cpp" >
      <Original>
        spec.matches( testCase )
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Parsing sharding-related cli flags" tags="[sharding]" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
    <Section name="shard-count" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Original>
          cli.parse({ "test", "--shard-count=8" })
        </Original>
        <Expanded>
          {?}
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Original>
          config.shardCount == 8
        </Original>
        <Expanded>
          8 == 8
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Negative shard count reports error" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Expression success="true" type="CHECK_FALSE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Original>
          !(result)
        </Original>
        <Expanded>
          !{?}
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Original>
          result.errorMessage(), ContainsSubstring( "Could not parse '-1' as shard count" )
        </Original>
        <Expanded>
          "Could not parse '-1' as shard count" contains: "Could not parse '-1' as shard count"
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Zero shard count reports error" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Expression success="true" type="CHECK_FALSE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Original>
          !(result)
        </Original>
        <Expanded>
          !{?}
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Original>
          result.errorMessage(), ContainsSubstring( "Shard count must be positive" )
        </Original>
        <Expanded>
          "Shard count must be positive" contains: "Shard count must be positive"
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="shard-index" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Original>
          cli.parse({ "test", "--shard-index=2" })
        </Original>
        <Expanded>
          {?}
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Original>
          config.shardIndex == 2
        </Original>
        <Expanded>
          2 == 2
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Negative shard index reports error" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Expression success="true" type="CHECK_FALSE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Original>
          !(result)
        </Original>
        <Expanded>
          !{?}
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Original>
          result.errorMessage(), ContainsSubstring( "Could not parse '-12' as shard index" )
        </Original>
        <Expanded>
          "Could not parse '-12' as shard index" contains: "Could not parse '-12' as shard index"
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Shard index 0 is accepted" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Original>
          cli.parse({ "test", "--shard-index=0" })
        </Original>
        <Expanded>
          {?}
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Original>
          config.shardIndex == 0
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Parsing tags with non-alphabetical characters is pass-through" tags="[test-spec][test-spec-parser]" filename="tests/<exe-name>/IntrospectiveTests/TestSpecParser.tests.cpp" >
    <Info filename="tests/<exe-name>/IntrospectiveTests/TestSpecParser.tests.cpp" >
      tagString := "[tag with spaces]"
    </Info>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/TestSpecParser.tests.cpp" >
      <Original>
        spec.hasFilters()
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Info filename="tests/<exe-name>/IntrospectiveTests/TestSpecParser.tests.cpp" >
      tagString := "[tag with spaces]"
    </Info>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/TestSpecParser.tests.cpp" >
      <Original>
        spec.getInvalidSpecs().empty()
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Info filename="tests/<exe-name>/IntrospectiveTests/TestSpecParser.tests.cpp" >
      tagString := "[tag with spaces]"
    </Info>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/TestSpecParser.tests.cpp" >
      <Original>
        spec.matches( testCase )
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Info filename="tests/<exe-name>/IntrospectiveTests/TestSpecParser.tests.cpp" >
      tagString := "[I said "good day" sir!]"
    </Info>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/TestSpecParser.tests.cpp" >
      <Original>
        spec.hasFilters()
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Info filename="tests/<exe-name>/IntrospectiveTests/TestSpecParser.tests.cpp" >
      tagString := "[I said "good day" sir!]"
    </Info>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/TestSpecParser.tests.cpp" >
      <Original>
        spec.getInvalidSpecs().empty()
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Info filename="tests/<exe-name>/IntrospectiveTests/TestSpecParser.tests.cpp" >
      tagString := "[I said "good day" sir!]"
    </Info>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/TestSpecParser.tests.cpp" >
      <Original>
        spec.matches( testCase )
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Parsing warnings" tags="[cli][warnings]" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
    <Section name="NoAssertions" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Original>
          cli.parse( { "test", "-w", "NoAssertions" } )
        </Original>
        <Expanded>
          {?}
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Original>
          config.warnings == WarnAbout::NoAssertions
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="NoTests is no longer supported" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Original>
          !(cli.parse( { "test", "-w", "NoTests" } ))
        </Original>
        <Expanded>
          !{?}
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Combining multiple warnings" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Original>
          cli.parse( { "test", "--warn", "NoAssertions", "--warn", "UnmatchedTestSpec" } )
        </Original>
        <Expanded>
          {?}
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Original>
          config.warnings == ( WarnAbout::NoAssertions | WarnAbout::UnmatchedTestSpec )
        </Original>
        <Expanded>
          3 == 3
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Pointers can be compared to null" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        p == 0
      </Original>
      <Expanded>
        0 == 0
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        p == pNULL
      </Original>
      <Expanded>
        0 == 0
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        p != 0
      </Original>
      <Expanded>
        0x<hex digits> != 0
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        cp != 0
      </Original>
      <Expanded>
        0x<hex digits> != 0
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        cpc != 0
      </Original>
      <Expanded>
        0x<hex digits> != 0
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        returnsNull() == 0
      </Original>
      <Expanded>
        {null string} == 0
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        returnsConstNull() == 0
      </Original>
      <Expanded>
        {null string} == 0
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        0 != p
      </Original>
      <Expanded>
        0 != 0x<hex digits>
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Precision of floating point stringification can be set" tags="[floatingPoint][toString]" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
    <Section name="Floats" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
        <Original>
          str1.size() == 3 + 5
        </Original>
        <Expanded>
          8 == 8
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
        <Original>
          str2.size() == 3 + 10
        </Original>
        <Expanded>
          13 == 13
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Double" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
        <Original>
          str1.size() == 2 + 5
        </Original>
        <Expanded>
          7 == 7
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
        <Original>
          str2.size() == 2 + 15
        </Original>
        <Expanded>
          17 == 17
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Predicate matcher can accept const char*" tags="[compilation][matchers]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        "foo", Predicate&lt;const char*>( []( const char* const&amp; ) { return true; } )
      </Original>
      <Expanded>
        "foo" matches undescribed predicate
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Process can be configured on command line" tags="[command-line][config]" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
    <Section name="empty args don't cause a crash" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Original>
          result
        </Original>
        <Expanded>
          {?}
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Original>
          config.processName == ""
        </Original>
        <Expanded>
          "" == ""
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="default - no arguments" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Original>
          result
        </Original>
        <Expanded>
          {?}
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Original>
          config.processName == "test"
        </Original>
        <Expanded>
          "test" == "test"
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Original>
          config.shouldDebugBreak == false
        </Original>
        <Expanded>
          false == false
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Original>
          config.abortAfter == -1
        </Original>
        <Expanded>
          -1 == -1
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Original>
          config.noThrow == false
        </Original>
        <Expanded>
          false == false
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Original>
          config.reporterSpecifications.empty()
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK_FALSE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Original>
          !(cfg.hasTestFilters())
        </Original>
        <Expanded>
          !false
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Original>
          cfg.getReporterSpecs().size() == 1
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Original>
          cfg.getReporterSpecs()[0] == Catch::ReporterSpec{ expectedReporter, {}, {}, {} }
        </Original>
        <Expanded>
          {?} == {?}
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Original>
          cfg.getProcessedReporterSpecs().size() == 1
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Original>
          cfg.getProcessedReporterSpecs()[0] == Catch::ProcessedReporterSpec{ expectedReporter, std::string{}, Catch::ColourMode::PlatformDefault, {} }
        </Original>
        <Expanded>
          {?} == {?}
        </Expanded>
      </Expression>
      <OverallResults successes="11" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="test lists" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="Specify one test case using" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            result
          </Original>
          <Expanded>
            {?}
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            cfg.hasTestFilters()
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            cfg.testSpec().matches(*fakeTestCase("notIncluded")) == false
          </Original>
          <Expanded>
            false == false
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            cfg.testSpec().matches(*fakeTestCase("test1"))
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <OverallResults successes="4" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="4" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="test lists" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="Specify one test case exclusion using exclude:" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            result
          </Original>
          <Expanded>
            {?}
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            cfg.hasTestFilters()
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            cfg.testSpec().matches(*fakeTestCase("test1")) == false
          </Original>
          <Expanded>
            false == false
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            cfg.testSpec().matches(*fakeTestCase("alwaysIncluded"))
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <OverallResults successes="4" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="4" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="test lists" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="Specify one test case exclusion using ~" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            result
          </Original>
          <Expanded>
            {?}
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            cfg.hasTestFilters()
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            cfg.testSpec().matches(*fakeTestCase("test1")) == false
          </Original>
          <Expanded>
            false == false
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            cfg.testSpec().matches(*fakeTestCase("alwaysIncluded"))
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <OverallResults successes="4" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="4" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="reporter" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="-r/console" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Info filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          result.errorMessage() := ""
        </Info>
        <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            result
          </Original>
          <Expanded>
            {?}
          </Expanded>
        </Expression>
        <Info filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          result.errorMessage() := ""
        </Info>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            config.reporterSpecifications == vec_Specs{ { "console", {}, {}, {} } }
          </Original>
          <Expanded>
            { {?} } == { {?} }
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="reporter" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="-r/xml" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Info filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          result.errorMessage() := ""
        </Info>
        <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            result
          </Original>
          <Expanded>
            {?}
          </Expanded>
        </Expression>
        <Info filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          result.errorMessage() := ""
        </Info>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            config.reporterSpecifications == vec_Specs{ { "xml", {}, {}, {} } }
          </Original>
          <Expanded>
            { {?} } == { {?} }
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="reporter" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="--reporter/junit" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Info filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          result.errorMessage() := ""
        </Info>
        <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            result
          </Original>
          <Expanded>
            {?}
          </Expanded>
        </Expression>
        <Info filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          result.errorMessage() := ""
        </Info>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            config.reporterSpecifications == vec_Specs{ { "junit", {}, {}, {} } }
          </Original>
          <Expanded>
            { {?} } == { {?} }
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="reporter" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="must match one of the available ones" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            !result
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            result.errorMessage(), ContainsSubstring("Unrecognized reporter")
          </Original>
          <Expanded>
            "Unrecognized reporter, 'unsupported'. Check available with --list-reporters" contains: "Unrecognized reporter"
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="reporter" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="With output file" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Info filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          result.errorMessage() := ""
        </Info>
        <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            result
          </Original>
          <Expanded>
            {?}
          </Expanded>
        </Expression>
        <Info filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          result.errorMessage() := ""
        </Info>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            config.reporterSpecifications == vec_Specs{ { "console", "out.txt"s, {}, {} } }
          </Original>
          <Expanded>
            { {?} } == { {?} }
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="reporter" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="With Windows-like absolute path as output file" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Info filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          result.errorMessage() := ""
        </Info>
        <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            result
          </Original>
          <Expanded>
            {?}
          </Expanded>
        </Expression>
        <Info filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          result.errorMessage() := ""
        </Info>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            config.reporterSpecifications == vec_Specs{ { "console", "C:\\Temp\\out.txt"s, {}, {} } }
          </Original>
          <Expanded>
            { {?} } == { {?} }
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="reporter" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="Multiple reporters" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Section name="All with output files" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
            <Original>
              cli.parse({ "test", "-r", "xml::out=output.xml", "-r", "junit::out=output-junit.xml" })
            </Original>
            <Expanded>
              {?}
            </Expanded>
          </Expression>
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
            <Original>
              config.reporterSpecifications == vec_Specs{ { "xml", "output.xml"s, {}, {} }, { "junit", "output-junit.xml"s, {}, {} } }
            </Original>
            <Expanded>
              { {?}, {?} } == { {?}, {?} }
            </Expanded>
          </Expression>
          <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="reporter" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="Multiple reporters" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Section name="Mixed output files and default output" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
            <Original>
              cli.parse({ "test", "-r", "xml::out=output.xml", "-r", "console" })
            </Original>
            <Expanded>
              {?}
            </Expanded>
          </Expression>
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
            <Original>
              config.reporterSpecifications == vec_Specs{ { "xml", "output.xml"s, {}, {} }, { "console", {}, {}, {} } }
            </Original>
            <Expanded>
              { {?}, {?} } == { {?}, {?} }
            </Expanded>
          </Expression>
          <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="reporter" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="Multiple reporters" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Section name="cannot have multiple reporters with default output" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
            <Original>
              !result
            </Original>
            <Expanded>
              true
            </Expanded>
          </Expression>
          <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
            <Original>
              result.errorMessage(), ContainsSubstring("Only one reporter may have unspecified output file.")
            </Original>
            <Expanded>
              "Only one reporter may have unspecified output file." contains: "Only one reporter may have unspecified output file."
            </Expanded>
          </Expression>
          <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="debugger" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="-b" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            cli.parse({"test", "-b"})
          </Original>
          <Expanded>
            {?}
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            config.shouldDebugBreak == true
          </Original>
          <Expanded>
            true == true
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="debugger" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="--break" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            cli.parse({"test", "--break"})
          </Original>
          <Expanded>
            {?}
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            config.shouldDebugBreak
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="abort" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="-a aborts after first failure" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            cli.parse({"test", "-a"})
          </Original>
          <Expanded>
            {?}
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            config.abortAfter == 1
          </Original>
          <Expanded>
            1 == 1
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="abort" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="-x 2 aborts after two failures" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            cli.parse({"test", "-x", "2"})
          </Original>
          <Expanded>
            {?}
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            config.abortAfter == 2
          </Original>
          <Expanded>
            2 == 2
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="abort" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="-x must be numeric" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            !result
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            result.errorMessage(), ContainsSubstring("convert") &amp;&amp; ContainsSubstring("oops")
          </Original>
          <Expanded>
            "Unable to convert 'oops' to destination type" ( contains: "convert" and contains: "oops" )
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="abort" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="wait-for-keypress" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Section name="Accepted options" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
            <Original>
              cli.parse({"test", "--wait-for-keypress", std::get&lt;0>(input)})
            </Original>
            <Expanded>
              {?}
            </Expanded>
          </Expression>
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
            <Original>
              config.waitForKeypress == std::get&lt;1>(input)
            </Original>
            <Expanded>
              0 == 0
            </Expanded>
          </Expression>
          <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="abort" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="wait-for-keypress" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Section name="Accepted options" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
            <Original>
              cli.parse({"test", "--wait-for-keypress", std::get&lt;0>(input)})
            </Original>
            <Expanded>
              {?}
            </Expanded>
          </Expression>
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
            <Original>
              config.waitForKeypress == std::get&lt;1>(input)
            </Original>
            <Expanded>
              1 == 1
            </Expanded>
          </Expression>
          <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="abort" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="wait-for-keypress" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Section name="Accepted options" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
            <Original>
              cli.parse({"test", "--wait-for-keypress", std::get&lt;0>(input)})
            </Original>
            <Expanded>
              {?}
            </Expanded>
          </Expression>
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
            <Original>
              config.waitForKeypress == std::get&lt;1>(input)
            </Original>
            <Expanded>
              2 == 2
            </Expanded>
          </Expression>
          <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="abort" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="wait-for-keypress" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Section name="Accepted options" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
            <Original>
              cli.parse({"test", "--wait-for-keypress", std::get&lt;0>(input)})
            </Original>
            <Expanded>
              {?}
            </Expanded>
          </Expression>
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
            <Original>
              config.waitForKeypress == std::get&lt;1>(input)
            </Original>
            <Expanded>
              3 == 3
            </Expanded>
          </Expression>
          <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="abort" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="wait-for-keypress" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Section name="invalid options are reported" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
            <Original>
              !result
            </Original>
            <Expanded>
              true
            </Expanded>
          </Expression>
          <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
            <Original>
              result.errorMessage(), ContainsSubstring("never") &amp;&amp; ContainsSubstring("both")
            </Original>
            <Expanded>
              "keypress argument must be one of: never, start, exit or both. 'sometimes' not recognised" ( contains: "never" and contains: "both" )
            </Expanded>
          </Expression>
          <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="nothrow" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="-e" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            cli.parse({"test", "-e"})
          </Original>
          <Expanded>
            {?}
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            config.noThrow
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="nothrow" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="--nothrow" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            cli.parse({"test", "--nothrow"})
          </Original>
          <Expanded>
            {?}
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            config.noThrow
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="output filename" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="-o filename" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            cli.parse({"test", "-o", "filename.ext"})
          </Original>
          <Expanded>
            {?}
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            config.defaultOutputFilename == "filename.ext"
          </Original>
          <Expanded>
            "filename.ext" == "filename.ext"
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="output filename" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="--out" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            cli.parse({"test", "--out", "filename.ext"})
          </Original>
          <Expanded>
            {?}
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            config.defaultOutputFilename == "filename.ext"
          </Original>
          <Expanded>
            "filename.ext" == "filename.ext"
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="combinations" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="Single character flags can be combined" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            cli.parse({"test", "-abe"})
          </Original>
          <Expanded>
            {?}
          </Expanded>
        </Expression>
        <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            config.abortAfter == 1
          </Original>
          <Expanded>
            1 == 1
          </Expanded>
        </Expression>
        <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            config.shouldDebugBreak
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            config.noThrow == true
          </Original>
          <Expanded>
            true == true
          </Expanded>
        </Expression>
        <OverallResults successes="4" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="4" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="use-colour" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="without option" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            cli.parse({"test"})
          </Original>
          <Expanded>
            {?}
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            config.defaultColourMode == ColourMode::PlatformDefault
          </Original>
          <Expanded>
            0 == 0
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="use-colour" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="auto" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            cli.parse( { "test", "--colour-mode", "default" } )
          </Original>
          <Expanded>
            {?}
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            config.defaultColourMode == ColourMode::PlatformDefault
          </Original>
          <Expanded>
            0 == 0
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="use-colour" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="yes" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            cli.parse({"test", "--colour-mode", "ansi"})
          </Original>
          <Expanded>
            {?}
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            config.defaultColourMode == ColourMode::ANSI
          </Original>
          <Expanded>
            1 == 1
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="use-colour" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="no" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            cli.parse({"test", "--colour-mode", "none"})
          </Original>
          <Expanded>
            {?}
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            config.defaultColourMode == ColourMode::None
          </Original>
          <Expanded>
            3 == 3
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="use-colour" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="error" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            !result
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            result.errorMessage(), ContainsSubstring( "colour mode must be one of" )
          </Original>
          <Expanded>
            "colour mode must be one of: default, ansi, win32, or none. 'wrong' is not recognised" contains: "colour mode must be one of"
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Benchmark options" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="samples" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            cli.parse({ "test", "--benchmark-samples=200" })
          </Original>
          <Expanded>
            {?}
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            config.benchmarkSamples == 200
          </Original>
          <Expanded>
            200 == 200
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Benchmark options" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="resamples" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            cli.parse({ "test", "--benchmark-resamples=20000" })
          </Original>
          <Expanded>
            {?}
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            config.benchmarkResamples == 20000
          </Original>
          <Expanded>
            20000 (0x<hex digits>) == 20000 (0x<hex digits>)
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Benchmark options" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="confidence-interval" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            cli.parse({ "test", "--benchmark-confidence-interval=0.99" })
          </Original>
          <Expanded>
            {?}
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            config.benchmarkConfidenceInterval == Catch::Approx(0.99)
          </Original>
          <Expanded>
            0.99 == Approx( 0.99 )
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Benchmark options" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="no-analysis" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            cli.parse({ "test", "--benchmark-no-analysis" })
          </Original>
          <Expanded>
            {?}
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            config.benchmarkNoAnalysis
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Benchmark options" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
      <Section name="warmup-time" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
        <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            cli.parse({ "test", "--benchmark-warmup-time=10" })
          </Original>
          <Expanded>
            {?}
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
          <Original>
            config.benchmarkWarmupTime == 10
          </Original>
          <Expanded>
            10 == 10
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Product with differing arities - std::tuple&lt;int, double, float>" tags="[product][template]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        std::tuple_size&lt;TestType>::value >= 1
      </Original>
      <Expanded>
        3 >= 1
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Product with differing arities - std::tuple&lt;int, double>" tags="[product][template]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        std::tuple_size&lt;TestType>::value >= 1
      </Original>
      <Expanded>
        2 >= 1
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Product with differing arities - std::tuple&lt;int>" tags="[product][template]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        std::tuple_size&lt;TestType>::value >= 1
      </Original>
      <Expanded>
        1 >= 1
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Random seed generation accepts known methods" tags="[rng][seed]" filename="tests/<exe-name>/IntrospectiveTests/RandomNumberGeneration.tests.cpp" >
    <Expression success="true" type="REQUIRE_NOTHROW" filename="tests/<exe-name>/IntrospectiveTests/RandomNumberGeneration.tests.cpp" >
      <Original>
        Catch::generateRandomSeed(method)
      </Original>
      <Expanded>
        Catch::generateRandomSeed(method)
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_NOTHROW" filename="tests/<exe-name>/IntrospectiveTests/RandomNumberGeneration.tests.cpp" >
      <Original>
        Catch::generateRandomSeed(method)
      </Original>
      <Expanded>
        Catch::generateRandomSeed(method)
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_NOTHROW" filename="tests/<exe-name>/IntrospectiveTests/RandomNumberGeneration.tests.cpp" >
      <Original>
        Catch::generateRandomSeed(method)
      </Original>
      <Expanded>
        Catch::generateRandomSeed(method)
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Random seed generation reports unknown methods" tags="[rng][seed]" filename="tests/<exe-name>/IntrospectiveTests/RandomNumberGeneration.tests.cpp" >
    <Expression success="true" type="REQUIRE_THROWS" filename="tests/<exe-name>/IntrospectiveTests/RandomNumberGeneration.tests.cpp" >
      <Original>
        Catch::generateRandomSeed(static_cast&lt;Catch::GenerateFrom>(77))
      </Original>
      <Expanded>
        Catch::generateRandomSeed(static_cast&lt;Catch::GenerateFrom>(77))
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Range type with sentinel" filename="tests/<exe-name>/IntrospectiveTests/ToString.tests.cpp" >
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/ToString.tests.cpp" >
      <Original>
        Catch::Detail::stringify(UsesSentinel{}) == "{  }"
      </Original>
      <Expanded>
        "{  }" == "{  }"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Reconstruction should be based on stringification: #914" tags="[.][Decomposition][failing]" filename="tests/<exe-name>/UsageTests/Decomposition.tests.cpp" >
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Decomposition.tests.cpp" >
      <Original>
        truthy(false)
      </Original>
      <Expanded>
        Hey, its truthy!
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="Regex string matcher" tags="[.][failing][matchers]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Expression success="false" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        testStringForMatching(), Matches( "this STRING contains 'abc' as a substring" )
      </Original>
      <Expanded>
        "this string contains 'abc' as a substring" matches "this STRING contains 'abc' as a substring" case sensitively
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        testStringForMatching(), Matches( "contains 'abc' as a substring" )
      </Original>
      <Expanded>
        "this string contains 'abc' as a substring" matches "contains 'abc' as a substring" case sensitively
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        testStringForMatching(), Matches( "this string contains 'abc' as a" )
      </Original>
      <Expanded>
        "this string contains 'abc' as a substring" matches "this string contains 'abc' as a" case sensitively
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="Registering reporter with '::' in name fails" tags="[registration][reporters]" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
    <Expression success="true" type="REQUIRE_THROWS_WITH" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Original>
        registry.registerReporter( "with::doublecolons", Catch::Detail::make_unique&lt;TestReporterFactory>() ), "'::' is not allowed in reporter name: 'with::doublecolons'"
      </Original>
      <Expanded>
        "'::' is not allowed in reporter name: 'with::doublecolons'" equals: "'::' is not allowed in reporter name: 'with::doublecolons'"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Regression test #1" tags="[matchers][vector]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        actual, !UnorderedEquals( expected )
      </Original>
      <Expanded>
        { 'a', 'b' } not UnorderedEquals: { 'c', 'b' }
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Reporter's write listings to provided stream" tags="[reporters]" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
    <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Original>
        !(factories.empty())
      </Original>
      <Expanded>
        !false
      </Expanded>
    </Expression>
    <Section name="Automake reporter lists tags" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Info filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        Tested reporter: Automake
      </Info>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          listingString, ContainsSubstring("fakeTag"s)
        </Original>
        <Expanded>
          "All available tags:
   1  [fakeTag]
1 tag

" contains: "fakeTag"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Original>
        !(factories.empty())
      </Original>
      <Expanded>
        !false
      </Expanded>
    </Expression>
    <Section name="Automake reporter lists reporters" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Info filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        Tested reporter: Automake
      </Info>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          listingString, ContainsSubstring("fake reporter"s)
        </Original>
        <Expanded>
          "Available reporters:
  fake reporter:  fake description

" contains: "fake reporter"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Original>
        !(factories.empty())
      </Original>
      <Expanded>
        !false
      </Expanded>
    </Expression>
    <Section name="Automake reporter lists tests" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Info filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        Tested reporter: Automake
      </Info>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          listingString, ContainsSubstring( "fake test name"s ) &amp;&amp; ContainsSubstring( "fakeTestTag"s )
        </Original>
        <Expanded>
          "All available test cases:
  fake test name
      [fakeTestTag]
1 test case

" ( contains: "fake test name" and contains: "fakeTestTag" )
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Original>
        !(factories.empty())
      </Original>
      <Expanded>
        !false
      </Expanded>
    </Expression>
    <Section name="compact reporter lists tags" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Info filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        Tested reporter: compact
      </Info>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          listingString, ContainsSubstring("fakeTag"s)
        </Original>
        <Expanded>
          "All available tags:
   1  [fakeTag]
1 tag

" contains: "fakeTag"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Original>
        !(factories.empty())
      </Original>
      <Expanded>
        !false
      </Expanded>
    </Expression>
    <Section name="compact reporter lists reporters" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Info filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        Tested reporter: compact
      </Info>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          listingString, ContainsSubstring("fake reporter"s)
        </Original>
        <Expanded>
          "Available reporters:
  fake reporter:  fake description

" contains: "fake reporter"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Original>
        !(factories.empty())
      </Original>
      <Expanded>
        !false
      </Expanded>
    </Expression>
    <Section name="compact reporter lists tests" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Info filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        Tested reporter: compact
      </Info>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          listingString, ContainsSubstring( "fake test name"s ) &amp;&amp; ContainsSubstring( "fakeTestTag"s )
        </Original>
        <Expanded>
          "All available test cases:
  fake test name
      [fakeTestTag]
1 test case

" ( contains: "fake test name" and contains: "fakeTestTag" )
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Original>
        !(factories.empty())
      </Original>
      <Expanded>
        !false
      </Expanded>
    </Expression>
    <Section name="console reporter lists tags" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Info filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        Tested reporter: console
      </Info>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          listingString, ContainsSubstring("fakeTag"s)
        </Original>
        <Expanded>
          "All available tags:
   1  [fakeTag]
1 tag

" contains: "fakeTag"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Original>
        !(factories.empty())
      </Original>
      <Expanded>
        !false
      </Expanded>
    </Expression>
    <Section name="console reporter lists reporters" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Info filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        Tested reporter: console
      </Info>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          listingString, ContainsSubstring("fake reporter"s)
        </Original>
        <Expanded>
          "Available reporters:
  fake reporter:  fake description

" contains: "fake reporter"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Original>
        !(factories.empty())
      </Original>
      <Expanded>
        !false
      </Expanded>
    </Expression>
    <Section name="console reporter lists tests" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Info filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        Tested reporter: console
      </Info>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          listingString, ContainsSubstring( "fake test name"s ) &amp;&amp; ContainsSubstring( "fakeTestTag"s )
        </Original>
        <Expanded>
          "All available test cases:
  fake test name
      [fakeTestTag]
1 test case

" ( contains: "fake test name" and contains: "fakeTestTag" )
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Original>
        !(factories.empty())
      </Original>
      <Expanded>
        !false
      </Expanded>
    </Expression>
    <Section name="JUnit reporter lists tags" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Info filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        Tested reporter: JUnit
      </Info>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          listingString, ContainsSubstring("fakeTag"s)
        </Original>
        <Expanded>
          "&lt;?xml version="1.0" encoding="UTF-8"?>
All available tags:
   1  [fakeTag]
1 tag

" contains: "fakeTag"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Original>
        !(factories.empty())
      </Original>
      <Expanded>
        !false
      </Expanded>
    </Expression>
    <Section name="JUnit reporter lists reporters" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Info filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        Tested reporter: JUnit
      </Info>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          listingString, ContainsSubstring("fake reporter"s)
        </Original>
        <Expanded>
          "&lt;?xml version="1.0" encoding="UTF-8"?>
Available reporters:
  fake reporter:  fake description

" contains: "fake reporter"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Original>
        !(factories.empty())
      </Original>
      <Expanded>
        !false
      </Expanded>
    </Expression>
    <Section name="JUnit reporter lists tests" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Info filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        Tested reporter: JUnit
      </Info>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          listingString, ContainsSubstring( "fake test name"s ) &amp;&amp; ContainsSubstring( "fakeTestTag"s )
        </Original>
        <Expanded>
          "&lt;?xml version="1.0" encoding="UTF-8"?>
All available test cases:
  fake test name
      [fakeTestTag]
1 test case

" ( contains: "fake test name" and contains: "fakeTestTag" )
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Original>
        !(factories.empty())
      </Original>
      <Expanded>
        !false
      </Expanded>
    </Expression>
    <Section name="SonarQube reporter lists tags" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Info filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        Tested reporter: SonarQube
      </Info>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          listingString, ContainsSubstring("fakeTag"s)
        </Original>
        <Expanded>
          "&lt;?xml version="1.0" encoding="UTF-8"?>
All available tags:
   1  [fakeTag]
1 tag

" contains: "fakeTag"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Original>
        !(factories.empty())
      </Original>
      <Expanded>
        !false
      </Expanded>
    </Expression>
    <Section name="SonarQube reporter lists reporters" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Info filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        Tested reporter: SonarQube
      </Info>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          listingString, ContainsSubstring("fake reporter"s)
        </Original>
        <Expanded>
          "&lt;?xml version="1.0" encoding="UTF-8"?>
Available reporters:
  fake reporter:  fake description

" contains: "fake reporter"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Original>
        !(factories.empty())
      </Original>
      <Expanded>
        !false
      </Expanded>
    </Expression>
    <Section name="SonarQube reporter lists tests" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Info filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        Tested reporter: SonarQube
      </Info>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          listingString, ContainsSubstring( "fake test name"s ) &amp;&amp; ContainsSubstring( "fakeTestTag"s )
        </Original>
        <Expanded>
          "&lt;?xml version="1.0" encoding="UTF-8"?>
All available test cases:
  fake test name
      [fakeTestTag]
1 test case

" ( contains: "fake test name" and contains: "fakeTestTag" )
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Original>
        !(factories.empty())
      </Original>
      <Expanded>
        !false
      </Expanded>
    </Expression>
    <Section name="TAP reporter lists tags" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Info filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        Tested reporter: TAP
      </Info>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          listingString, ContainsSubstring("fakeTag"s)
        </Original>
        <Expanded>
          "All available tags:
   1  [fakeTag]
1 tag

" contains: "fakeTag"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Original>
        !(factories.empty())
      </Original>
      <Expanded>
        !false
      </Expanded>
    </Expression>
    <Section name="TAP reporter lists reporters" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Info filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        Tested reporter: TAP
      </Info>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          listingString, ContainsSubstring("fake reporter"s)
        </Original>
        <Expanded>
          "Available reporters:
  fake reporter:  fake description

" contains: "fake reporter"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Original>
        !(factories.empty())
      </Original>
      <Expanded>
        !false
      </Expanded>
    </Expression>
    <Section name="TAP reporter lists tests" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Info filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        Tested reporter: TAP
      </Info>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          listingString, ContainsSubstring( "fake test name"s ) &amp;&amp; ContainsSubstring( "fakeTestTag"s )
        </Original>
        <Expanded>
          "All available test cases:
  fake test name
      [fakeTestTag]
1 test case

" ( contains: "fake test name" and contains: "fakeTestTag" )
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Original>
        !(factories.empty())
      </Original>
      <Expanded>
        !false
      </Expanded>
    </Expression>
    <Section name="TeamCity reporter lists tags" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Info filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        Tested reporter: TeamCity
      </Info>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          listingString, ContainsSubstring("fakeTag"s)
        </Original>
        <Expanded>
          "All available tags:
   1  [fakeTag]
1 tag

" contains: "fakeTag"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Original>
        !(factories.empty())
      </Original>
      <Expanded>
        !false
      </Expanded>
    </Expression>
    <Section name="TeamCity reporter lists reporters" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Info filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        Tested reporter: TeamCity
      </Info>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          listingString, ContainsSubstring("fake reporter"s)
        </Original>
        <Expanded>
          "Available reporters:
  fake reporter:  fake description

" contains: "fake reporter"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Original>
        !(factories.empty())
      </Original>
      <Expanded>
        !false
      </Expanded>
    </Expression>
    <Section name="TeamCity reporter lists tests" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Info filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        Tested reporter: TeamCity
      </Info>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          listingString, ContainsSubstring( "fake test name"s ) &amp;&amp; ContainsSubstring( "fakeTestTag"s )
        </Original>
        <Expanded>
          "All available test cases:
  fake test name
      [fakeTestTag]
1 test case

" ( contains: "fake test name" and contains: "fakeTestTag" )
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Original>
        !(factories.empty())
      </Original>
      <Expanded>
        !false
      </Expanded>
    </Expression>
    <Section name="XML reporter lists tags" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Info filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        Tested reporter: XML
      </Info>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          listingString, ContainsSubstring("fakeTag"s)
        </Original>
        <Expanded>
          "&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;TagsFromMatchingTests>
  &lt;Tag>
    &lt;Count>1&lt;/Count>
    &lt;Aliases>
      &lt;Alias>fakeTag&lt;/Alias>
    &lt;/Aliases>
  &lt;/Tag>
&lt;/TagsFromMatchingTests>" contains: "fakeTag"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Original>
        !(factories.empty())
      </Original>
      <Expanded>
        !false
      </Expanded>
    </Expression>
    <Section name="XML reporter lists reporters" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Info filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        Tested reporter: XML
      </Info>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          listingString, ContainsSubstring("fake reporter"s)
        </Original>
        <Expanded>
          "&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;AvailableReporters>
  &lt;Reporter>
    &lt;Name>fake reporter&lt;/Name>
    &lt;Description>fake description&lt;/Description>
  &lt;/Reporter>
&lt;/AvailableReporters>" contains: "fake reporter"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Original>
        !(factories.empty())
      </Original>
      <Expanded>
        !false
      </Expanded>
    </Expression>
    <Section name="XML reporter lists tests" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Info filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        Tested reporter: XML
      </Info>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          listingString, ContainsSubstring( "fake test name"s ) &amp;&amp; ContainsSubstring( "fakeTestTag"s )
        </Original>
        <Expanded>
          "&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;MatchingTests>
  &lt;TestCase>
    &lt;Name>fake test name&lt;/Name>
    &lt;ClassName/>
    &lt;Tags>[fakeTestTag]&lt;/Tags>
    &lt;SourceInfo>
      &lt;File>fake-file.cpp&lt;/File>
      &lt;Line>123456789&lt;/Line>
    &lt;/SourceInfo>
  &lt;/TestCase>
&lt;/MatchingTests>" ( contains: "fake test name" and contains: "fakeTestTag" )
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Reproducer for #2309 - a very long description past 80 chars (default console width) with a late colon : blablabla" tags="[console-reporter]" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="SUCCEED counts as a test pass" tags="[messages]" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="SUCCEED does not require an argument" tags="[.][messages]" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Scenario: BDD tests requiring Fixtures to provide commonly-accessed data or methods" tags="[bdd][fixtures]" filename="tests/<exe-name>/UsageTests/BDD.tests.cpp" >
    <Section name="Given: No operations precede me" filename="tests/<exe-name>/UsageTests/BDD.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/BDD.tests.cpp" >
        <Original>
          before == 0
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Section name="When: We get the count" filename="tests/<exe-name>/UsageTests/BDD.tests.cpp" >
        <Section name="Then: Subsequently values are higher" filename="tests/<exe-name>/UsageTests/BDD.tests.cpp" >
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/BDD.tests.cpp" >
            <Original>
              after > before
            </Original>
            <Expanded>
              1 > 0
            </Expanded>
          </Expression>
          <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
        </Section>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Scenario: Do that thing with the thing" tags="[Tags]" filename="tests/<exe-name>/UsageTests/BDD.tests.cpp" >
    <Section name="Given: This stuff exists" filename="tests/<exe-name>/UsageTests/BDD.tests.cpp" >
      <Section name="And given: And some assumption" filename="tests/<exe-name>/UsageTests/BDD.tests.cpp" >
        <Section name="When: I do this" filename="tests/<exe-name>/UsageTests/BDD.tests.cpp" >
          <Section name="Then: it should do this" filename="tests/<exe-name>/UsageTests/BDD.tests.cpp" >
            <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/BDD.tests.cpp" >
              <Original>
                itDoesThis()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Section name="And: do that" filename="tests/<exe-name>/UsageTests/BDD.tests.cpp" >
              <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/BDD.tests.cpp" >
                <Original>
                  itDoesThat()
                </Original>
                <Expanded>
                  true
                </Expanded>
              </Expression>
              <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
          </Section>
          <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Scenario: This is a really long scenario name to see how the list command deals with wrapping" tags="[anotherReallyLongTagNameButThisOneHasNoObviousWrapPointsSoShouldSplitWithinAWordUsingADashCharacter][long][lots][one very long tag name that should cause line wrapping writing out using the list command][tags][verbose][very long tags]" filename="tests/<exe-name>/UsageTests/BDD.tests.cpp" >
    <Section name="Given: A section name that is so long that it cannot fit in a single console width" filename="tests/<exe-name>/UsageTests/BDD.tests.cpp" >
      <Section name="When: The test headers are printed as part of the normal running of the scenario" filename="tests/<exe-name>/UsageTests/BDD.tests.cpp" >
        <Section name="Then: The, deliberately very long and overly verbose (you see what I did there?) section names must wrap, along with an indent" filename="tests/<exe-name>/UsageTests/BDD.tests.cpp" >
          <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
        </Section>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Scenario: Vector resizing affects size and capacity" tags="[bdd][capacity][size][vector]" filename="tests/<exe-name>/UsageTests/BDD.tests.cpp" >
    <Section name="Given: an empty vector" filename="tests/<exe-name>/UsageTests/BDD.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/BDD.tests.cpp" >
        <Original>
          v.size() == 0
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Section name="When: it is made larger" filename="tests/<exe-name>/UsageTests/BDD.tests.cpp" >
        <Section name="Then: the size and capacity go up" filename="tests/<exe-name>/UsageTests/BDD.tests.cpp" >
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/BDD.tests.cpp" >
            <Original>
              v.size() == 10
            </Original>
            <Expanded>
              10 == 10
            </Expanded>
          </Expression>
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/BDD.tests.cpp" >
            <Original>
              v.capacity() >= 10
            </Original>
            <Expanded>
              10 >= 10
            </Expanded>
          </Expression>
          <Section name="And when: it is made smaller again" filename="tests/<exe-name>/UsageTests/BDD.tests.cpp" >
            <Section name="Then: the size goes down but the capacity stays the same" filename="tests/<exe-name>/UsageTests/BDD.tests.cpp" >
              <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/BDD.tests.cpp" >
                <Original>
                  v.size() == 5
                </Original>
                <Expanded>
                  5 == 5
                </Expanded>
              </Expression>
              <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/BDD.tests.cpp" >
                <Original>
                  v.capacity() >= 10
                </Original>
                <Expanded>
                  10 >= 10
                </Expanded>
              </Expression>
              <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
          </Section>
          <OverallResults successes="4" failures="0" expectedFailures="0" skipped="false"/>
        </Section>
        <OverallResults successes="4" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="5" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Given: an empty vector" filename="tests/<exe-name>/UsageTests/BDD.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/BDD.tests.cpp" >
        <Original>
          v.size() == 0
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Section name="When: we reserve more space" filename="tests/<exe-name>/UsageTests/BDD.tests.cpp" >
        <Section name="Then: The capacity is increased but the size remains the same" filename="tests/<exe-name>/UsageTests/BDD.tests.cpp" >
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/BDD.tests.cpp" >
            <Original>
              v.capacity() >= 10
            </Original>
            <Expanded>
              10 >= 10
            </Expanded>
          </Expression>
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/BDD.tests.cpp" >
            <Original>
              v.size() == 0
            </Original>
            <Expanded>
              0 == 0
            </Expanded>
          </Expression>
          <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="3" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Sends stuff to stdout and stderr" tags="[.]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <OverallResult success="false" skips="0">
      <StdOut>
A string sent directly to stdout
      </StdOut>
      <StdErr>
A string sent directly to stderr
A string sent to stderr via clog
      </StdErr>
    </OverallResult>
  </TestCase>
  <TestCase name="Some simple comparisons between doubles" tags="[Approx]" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        d == Approx( 1.23 )
      </Original>
      <Expanded>
        1.23 == Approx( 1.23 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        d != Approx( 1.22 )
      </Original>
      <Expanded>
        1.23 != Approx( 1.22 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        d != Approx( 1.24 )
      </Original>
      <Expanded>
        1.23 != Approx( 1.24 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        d == 1.23_a
      </Original>
      <Expanded>
        1.23 == Approx( 1.23 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        d != 1.22_a
      </Original>
      <Expanded>
        1.23 != Approx( 1.22 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        Approx( d ) == 1.23
      </Original>
      <Expanded>
        Approx( 1.23 ) == 1.23
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        Approx( d ) != 1.22
      </Original>
      <Expanded>
        Approx( 1.23 ) != 1.22
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        Approx( d ) != 1.24
      </Original>
      <Expanded>
        Approx( 1.23 ) != 1.24
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Standard output from all sections is reported" tags="[.][messages]" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
    <Section name="one" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      <OverallResults successes="0" failures="1" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="two" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      <OverallResults successes="0" failures="1" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="false" skips="0">
      <StdOut>
Message from section one
Message from section two
      </StdOut>
    </OverallResult>
  </TestCase>
  <TestCase name="StartsWith string matcher" tags="[.][failing][matchers]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Expression success="false" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        testStringForMatching(), StartsWith( "This String" )
      </Original>
      <Expanded>
        "this string contains 'abc' as a substring" starts with: "This String"
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        testStringForMatching(), StartsWith( "string", Catch::CaseSensitive::No )
      </Original>
      <Expanded>
        "this string contains 'abc' as a substring" starts with: "string" (case insensitive)
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="Static arrays are convertible to string" tags="[toString]" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
    <Section name="Single item" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
        <Original>
          Catch::Detail::stringify(singular) == "{ 1 }"
        </Original>
        <Expanded>
          "{ 1 }" == "{ 1 }"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Multiple" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
        <Original>
          Catch::Detail::stringify(arr) == "{ 3, 2, 1 }"
        </Original>
        <Expanded>
          "{ 3, 2, 1 }" == "{ 3, 2, 1 }"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Non-trivial inner items" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
        <Original>
          Catch::Detail::stringify(arr) == R"({ { "1:1", "1:2", "1:3" }, { "2:1", "2:2" } })"
        </Original>
        <Expanded>
          "{ { "1:1", "1:2", "1:3" }, { "2:1", "2:2" } }"
==
"{ { "1:1", "1:2", "1:3" }, { "2:1", "2:2" } }"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="String matchers" tags="[matchers]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        testStringForMatching(), ContainsSubstring( "string" )
      </Original>
      <Expanded>
        "this string contains 'abc' as a substring" contains: "string"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        testStringForMatching(), ContainsSubstring( "string", Catch::CaseSensitive::No )
      </Original>
      <Expanded>
        "this string contains 'abc' as a substring" contains: "string" (case insensitive)
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        testStringForMatching(), ContainsSubstring( "abc" )
      </Original>
      <Expanded>
        "this string contains 'abc' as a substring" contains: "abc"
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        testStringForMatching(), ContainsSubstring( "aBC", Catch::CaseSensitive::No )
      </Original>
      <Expanded>
        "this string contains 'abc' as a substring" contains: "abc" (case insensitive)
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        testStringForMatching(), StartsWith( "this" )
      </Original>
      <Expanded>
        "this string contains 'abc' as a substring" starts with: "this"
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        testStringForMatching(), StartsWith( "THIS", Catch::CaseSensitive::No )
      </Original>
      <Expanded>
        "this string contains 'abc' as a substring" starts with: "this" (case insensitive)
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        testStringForMatching(), EndsWith( "substring" )
      </Original>
      <Expanded>
        "this string contains 'abc' as a substring" ends with: "substring"
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Original>
        testStringForMatching(), EndsWith( " SuBsTrInG", Catch::CaseSensitive::No )
      </Original>
      <Expanded>
        "this string contains 'abc' as a substring" ends with: " substring" (case insensitive)
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="StringRef" tags="[StringRef][Strings]" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
    <Section name="Empty string" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
        <Original>
          empty.empty()
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
        <Original>
          empty.size() == 0
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
        <Original>
          std::strcmp( empty.data(), "" ) == 0
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <OverallResults successes="3" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="From string literal" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
        <Original>
          s.empty() == false
        </Original>
        <Expanded>
          false == false
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
        <Original>
          s.size() == 5
        </Original>
        <Expanded>
          5 == 5
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
        <Original>
          std::strcmp( rawChars, "hello" ) == 0
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
        <Original>
          s.data() == rawChars
        </Original>
        <Expanded>
          "hello" == "hello"
        </Expanded>
      </Expression>
      <OverallResults successes="4" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="From sub-string" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
        <Original>
          original == "original"
        </Original>
        <Expanded>
          original == "original"
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_NOTHROW" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
        <Original>
          original.data()
        </Original>
        <Expanded>
          original.data()
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Copy construction is shallow" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
        <Original>
          original.begin() == copy.begin()
        </Original>
        <Expanded>
          "original string" == "original string"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Copy assignment is shallow" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
        <Original>
          original.begin() == copy.begin()
        </Original>
        <Expanded>
          "original string" == "original string"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Substrings" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
      <Section name="zero-based substring" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
          <Original>
            ss.empty() == false
          </Original>
          <Expanded>
            false == false
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
          <Original>
            ss.size() == 5
          </Original>
          <Expanded>
            5 == 5
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
          <Original>
            std::strncmp( ss.data(), "hello", 5 ) == 0
          </Original>
          <Expanded>
            0 == 0
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
          <Original>
            ss == "hello"
          </Original>
          <Expanded>
            hello == "hello"
          </Expanded>
        </Expression>
        <OverallResults successes="4" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="4" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Substrings" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
      <Section name="non-zero-based substring" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
          <Original>
            ss.size() == 6
          </Original>
          <Expanded>
            6 == 6
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
          <Original>
            std::strcmp( ss.data(), "world!" ) == 0
          </Original>
          <Expanded>
            0 == 0
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Substrings" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
      <Section name="Pointer values of full refs should match" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
          <Original>
            s.data() == s2.data()
          </Original>
          <Expanded>
            "hello world!" == "hello world!"
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Substrings" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
      <Section name="Pointer values of substring refs should also match" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
          <Original>
            s.data() == ss.data()
          </Original>
          <Expanded>
            "hello world!" == "hello world!"
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Substrings" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
      <Section name="Past the end substring" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
          <Original>
            s.substr(s.size() + 1, 123).empty()
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Substrings" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
      <Section name="Substring off the end are trimmed" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
          <Original>
            std::strcmp(ss.data(), "world!") == 0
          </Original>
          <Expanded>
            0 == 0
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Substrings" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
      <Section name="substring start after the end is empty" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
          <Original>
            s.substr(1'000'000, 1).empty()
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Comparisons are deep" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
        <Original>
          reinterpret_cast&lt;char*>(buffer1) != reinterpret_cast&lt;char*>(buffer2)
        </Original>
        <Expanded>
          "Hello" != "Hello"
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
        <Original>
          left == right
        </Original>
        <Expanded>
          Hello == Hello
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
        <Original>
          left != left.substr(0, 3)
        </Original>
        <Expanded>
          Hello != Hel
        </Expanded>
      </Expression>
      <OverallResults successes="3" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="from std::string" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
      <Section name="implicitly constructed" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
          <Original>
            sr == "a standard string"
          </Original>
          <Expanded>
            a standard string == "a standard string"
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
          <Original>
            sr.size() == stdStr.size()
          </Original>
          <Expanded>
            17 == 17
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="from std::string" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
      <Section name="explicitly constructed" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
          <Original>
            sr == "a standard string"
          </Original>
          <Expanded>
            a standard string == "a standard string"
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
          <Original>
            sr.size() == stdStr.size()
          </Original>
          <Expanded>
            17 == 17
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="from std::string" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
      <Section name="assigned" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
          <Original>
            sr == "a standard string"
          </Original>
          <Expanded>
            a standard string == "a standard string"
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
          <Original>
            sr.size() == stdStr.size()
          </Original>
          <Expanded>
            17 == 17
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="to std::string" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
      <Section name="explicitly constructed" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
          <Original>
            stdStr == "a stringref"
          </Original>
          <Expanded>
            "a stringref" == "a stringref"
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
          <Original>
            stdStr.size() == sr.size()
          </Original>
          <Expanded>
            11 == 11
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="to std::string" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
      <Section name="assigned" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
          <Original>
            stdStr == "a stringref"
          </Original>
          <Expanded>
            "a stringref" == "a stringref"
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
          <Original>
            stdStr.size() == sr.size()
          </Original>
          <Expanded>
            11 == 11
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="std::string += StringRef" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
        <Original>
          lhs == "some string += the stringref contents"
        </Original>
        <Expanded>
          "some string += the stringref contents"
==
"some string += the stringref contents"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="StringRef + StringRef" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
        <Original>
          together == "abrakadabra"
        </Original>
        <Expanded>
          "abrakadabra" == "abrakadabra"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="StringRef at compilation time" tags="[constexpr][StringRef][Strings]" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
    <Section name="Simple constructors" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
      <OverallResults successes="12" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="UDL construction" filename="tests/<exe-name>/IntrospectiveTests/String.tests.cpp" >
      <OverallResults successes="4" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Stringifying char arrays with statically known sizes - char" tags="[toString]" filename="tests/<exe-name>/IntrospectiveTests/ToString.tests.cpp" >
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/ToString.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify( with_null_terminator ) == R"("abc")"s
      </Original>
      <Expanded>
        ""abc"" == ""abc""
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/ToString.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify( no_null_terminator ) == R"("abc")"s
      </Original>
      <Expanded>
        ""abc"" == ""abc""
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Stringifying char arrays with statically known sizes - signed char" tags="[toString]" filename="tests/<exe-name>/IntrospectiveTests/ToString.tests.cpp" >
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/ToString.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify( with_null_terminator ) == R"("abc")"s
      </Original>
      <Expanded>
        ""abc"" == ""abc""
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/ToString.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify( no_null_terminator ) == R"("abc")"s
      </Original>
      <Expanded>
        ""abc"" == ""abc""
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Stringifying char arrays with statically known sizes - unsigned char" tags="[toString]" filename="tests/<exe-name>/IntrospectiveTests/ToString.tests.cpp" >
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/ToString.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify( with_null_terminator ) == R"("abc")"s
      </Original>
      <Expanded>
        ""abc"" == ""abc""
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/ToString.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify( no_null_terminator ) == R"("abc")"s
      </Original>
      <Expanded>
        ""abc"" == ""abc""
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Stringifying std::chrono::duration helpers" tags="[chrono][toString]" filename="tests/<exe-name>/UsageTests/ToStringChrono.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringChrono.tests.cpp" >
      <Original>
        minute == seconds
      </Original>
      <Expanded>
        1 m == 60 s
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringChrono.tests.cpp" >
      <Original>
        hour != seconds
      </Original>
      <Expanded>
        1 h != 60 s
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringChrono.tests.cpp" >
      <Original>
        micro != milli
      </Original>
      <Expanded>
        1 us != 1 ms
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringChrono.tests.cpp" >
      <Original>
        nano != micro
      </Original>
      <Expanded>
        1 ns != 1 us
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Stringifying std::chrono::duration with weird ratios" tags="[chrono][toString]" filename="tests/<exe-name>/UsageTests/ToStringChrono.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringChrono.tests.cpp" >
      <Original>
        half_minute != femto_second
      </Original>
      <Expanded>
        1 [30/1]s != 1 fs
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringChrono.tests.cpp" >
      <Original>
        pico_second != atto_second
      </Original>
      <Expanded>
        1 ps != 1 as
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Stringifying std::chrono::time_point&lt;system_clock>" tags="[chrono][toString]" filename="tests/<exe-name>/UsageTests/ToStringChrono.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringChrono.tests.cpp" >
      <Original>
        now != later
      </Original>
      <Expanded>
        {iso8601-timestamp}
!=
{iso8601-timestamp}
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Tabs and newlines show in output" tags="[.][failing][whitespace]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        s1 == s2
      </Original>
      <Expanded>
        "if ($b == 10) {
		$a	= 20;
}"
==
"if ($b == 10) {
	$a = 20;
}
"
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="Tag alias can be registered against tag patterns" filename="tests/<exe-name>/IntrospectiveTests/Tag.tests.cpp" >
    <Section name="The same tag alias can only be registered once" filename="tests/<exe-name>/IntrospectiveTests/Tag.tests.cpp" >
      <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/IntrospectiveTests/Tag.tests.cpp" >
        <Original>
          what, ContainsSubstring( "[@zzz]" )
        </Original>
        <Expanded>
          "error: tag alias, '[@zzz]' already registered.
	First seen at: file:2
	Redefined at: file:10" contains: "[@zzz]"
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/IntrospectiveTests/Tag.tests.cpp" >
        <Original>
          what, ContainsSubstring( "file" )
        </Original>
        <Expanded>
          "error: tag alias, '[@zzz]' already registered.
	First seen at: file:2
	Redefined at: file:10" contains: "file"
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/IntrospectiveTests/Tag.tests.cpp" >
        <Original>
          what, ContainsSubstring( "2" )
        </Original>
        <Expanded>
          "error: tag alias, '[@zzz]' already registered.
	First seen at: file:2
	Redefined at: file:10" contains: "2"
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/IntrospectiveTests/Tag.tests.cpp" >
        <Original>
          what, ContainsSubstring( "10" )
        </Original>
        <Expanded>
          "error: tag alias, '[@zzz]' already registered.
	First seen at: file:2
	Redefined at: file:10" contains: "10"
        </Expanded>
      </Expression>
      <OverallResults successes="4" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Tag aliases must be of the form [@name]" filename="tests/<exe-name>/IntrospectiveTests/Tag.tests.cpp" >
      <Expression success="true" type="CHECK_THROWS" filename="tests/<exe-name>/IntrospectiveTests/Tag.tests.cpp" >
        <Original>
          registry.add( "[no ampersat]", "", Catch::SourceLineInfo( "file", 3 ) )
        </Original>
        <Expanded>
          registry.add( "[no ampersat]", "", Catch::SourceLineInfo( "file", 3 ) )
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK_THROWS" filename="tests/<exe-name>/IntrospectiveTests/Tag.tests.cpp" >
        <Original>
          registry.add( "[the @ is not at the start]", "", Catch::SourceLineInfo( "file", 3 ) )
        </Original>
        <Expanded>
          registry.add( "[the @ is not at the start]", "", Catch::SourceLineInfo( "file", 3 ) )
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK_THROWS" filename="tests/<exe-name>/IntrospectiveTests/Tag.tests.cpp" >
        <Original>
          registry.add( "@no square bracket at start]", "", Catch::SourceLineInfo( "file", 3 ) )
        </Original>
        <Expanded>
          registry.add( "@no square bracket at start]", "", Catch::SourceLineInfo( "file", 3 ) )
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK_THROWS" filename="tests/<exe-name>/IntrospectiveTests/Tag.tests.cpp" >
        <Original>
          registry.add( "[@no square bracket at end", "", Catch::SourceLineInfo( "file", 3 ) )
        </Original>
        <Expanded>
          registry.add( "[@no square bracket at end", "", Catch::SourceLineInfo( "file", 3 ) )
        </Expanded>
      </Expression>
      <OverallResults successes="4" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Tags with spaces and non-alphanumerical characters are accepted" tags="[tags]" filename="tests/<exe-name>/IntrospectiveTests/Tag.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Tag.tests.cpp" >
      <Original>
        testCase.tags.size() == 2
      </Original>
      <Expanded>
        2 == 2
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/Tag.tests.cpp" >
      <Original>
        testCase.tags, VectorContains( Tag( "tag with spaces" ) ) &amp;&amp; VectorContains( Tag( "I said \"good day\" sir!"_catch_sr ) )
      </Original>
      <Expanded>
        { {?}, {?} } ( Contains: {?} and Contains: {?} )
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Template test case method with test types specified inside std::tuple - MyTypes - 0" tags="[class][list][template]" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
      <Original>
        Template_Fixture&lt;TestType>::m_a == 1
      </Original>
      <Expanded>
        1 == 1
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Template test case method with test types specified inside std::tuple - MyTypes - 1" tags="[class][list][template]" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
      <Original>
        Template_Fixture&lt;TestType>::m_a == 1
      </Original>
      <Expanded>
        1 == 1
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Template test case method with test types specified inside std::tuple - MyTypes - 2" tags="[class][list][template]" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Class.tests.cpp" >
      <Original>
        Template_Fixture&lt;TestType>::m_a == 1
      </Original>
      <Expanded>
        1.0 == 1
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Template test case with test types specified inside non-copyable and non-movable std::tuple - NonCopyableAndNonMovableTypes - 0" tags="[list][template]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        sizeof(TestType) > 0
      </Original>
      <Expanded>
        1 > 0
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Template test case with test types specified inside non-copyable and non-movable std::tuple - NonCopyableAndNonMovableTypes - 1" tags="[list][template]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        sizeof(TestType) > 0
      </Original>
      <Expanded>
        4 > 0
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Template test case with test types specified inside non-default-constructible std::tuple - MyNonDefaultConstructibleTypes - 0" tags="[list][template]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        sizeof(TestType) > 0
      </Original>
      <Expanded>
        1 > 0
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Template test case with test types specified inside non-default-constructible std::tuple - MyNonDefaultConstructibleTypes - 1" tags="[list][template]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        sizeof(TestType) > 0
      </Original>
      <Expanded>
        4 > 0
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Template test case with test types specified inside std::tuple - MyTypes - 0" tags="[list][template]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        sizeof(TestType) > 0
      </Original>
      <Expanded>
        4 > 0
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Template test case with test types specified inside std::tuple - MyTypes - 1" tags="[list][template]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        sizeof(TestType) > 0
      </Original>
      <Expanded>
        1 > 0
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Template test case with test types specified inside std::tuple - MyTypes - 2" tags="[list][template]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        sizeof(TestType) > 0
      </Original>
      <Expanded>
        4 > 0
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="TemplateTest: vectors can be sized and resized - float" tags="[template][vector]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.size() == 5
      </Original>
      <Expanded>
        5 == 5
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.capacity() >= 5
      </Original>
      <Expanded>
        5 >= 5
      </Expanded>
    </Expression>
    <Section name="resizing bigger changes size and capacity" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.size() == 10
        </Original>
        <Expanded>
          10 == 10
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.capacity() >= 10
        </Original>
        <Expanded>
          10 >= 10
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.size() == 5
      </Original>
      <Expanded>
        5 == 5
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.capacity() >= 5
      </Original>
      <Expanded>
        5 >= 5
      </Expanded>
    </Expression>
    <Section name="resizing smaller changes size but not capacity" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.size() == 0
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.capacity() >= 5
        </Original>
        <Expanded>
          5 >= 5
        </Expanded>
      </Expression>
      <Section name="We can use the 'swap trick' to reset the capacity" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
          <Original>
            v.capacity() == 0
          </Original>
          <Expanded>
            0 == 0
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="3" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.size() == 5
      </Original>
      <Expanded>
        5 == 5
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.capacity() >= 5
      </Original>
      <Expanded>
        5 >= 5
      </Expanded>
    </Expression>
    <Section name="reserving bigger changes capacity but not size" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.size() == 5
        </Original>
        <Expanded>
          5 == 5
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.capacity() >= 10
        </Original>
        <Expanded>
          10 >= 10
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.size() == 5
      </Original>
      <Expanded>
        5 == 5
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.capacity() >= 5
      </Original>
      <Expanded>
        5 >= 5
      </Expanded>
    </Expression>
    <Section name="reserving smaller does not change size or capacity" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.size() == 5
        </Original>
        <Expanded>
          5 == 5
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.capacity() >= 5
        </Original>
        <Expanded>
          5 >= 5
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="TemplateTest: vectors can be sized and resized - int" tags="[template][vector]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.size() == 5
      </Original>
      <Expanded>
        5 == 5
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.capacity() >= 5
      </Original>
      <Expanded>
        5 >= 5
      </Expanded>
    </Expression>
    <Section name="resizing bigger changes size and capacity" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.size() == 10
        </Original>
        <Expanded>
          10 == 10
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.capacity() >= 10
        </Original>
        <Expanded>
          10 >= 10
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.size() == 5
      </Original>
      <Expanded>
        5 == 5
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.capacity() >= 5
      </Original>
      <Expanded>
        5 >= 5
      </Expanded>
    </Expression>
    <Section name="resizing smaller changes size but not capacity" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.size() == 0
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.capacity() >= 5
        </Original>
        <Expanded>
          5 >= 5
        </Expanded>
      </Expression>
      <Section name="We can use the 'swap trick' to reset the capacity" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
          <Original>
            v.capacity() == 0
          </Original>
          <Expanded>
            0 == 0
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="3" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.size() == 5
      </Original>
      <Expanded>
        5 == 5
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.capacity() >= 5
      </Original>
      <Expanded>
        5 >= 5
      </Expanded>
    </Expression>
    <Section name="reserving bigger changes capacity but not size" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.size() == 5
        </Original>
        <Expanded>
          5 == 5
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.capacity() >= 10
        </Original>
        <Expanded>
          10 >= 10
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.size() == 5
      </Original>
      <Expanded>
        5 == 5
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.capacity() >= 5
      </Original>
      <Expanded>
        5 >= 5
      </Expanded>
    </Expression>
    <Section name="reserving smaller does not change size or capacity" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.size() == 5
        </Original>
        <Expanded>
          5 == 5
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.capacity() >= 5
        </Original>
        <Expanded>
          5 >= 5
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="TemplateTest: vectors can be sized and resized - std::string" tags="[template][vector]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.size() == 5
      </Original>
      <Expanded>
        5 == 5
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.capacity() >= 5
      </Original>
      <Expanded>
        5 >= 5
      </Expanded>
    </Expression>
    <Section name="resizing bigger changes size and capacity" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.size() == 10
        </Original>
        <Expanded>
          10 == 10
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.capacity() >= 10
        </Original>
        <Expanded>
          10 >= 10
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.size() == 5
      </Original>
      <Expanded>
        5 == 5
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.capacity() >= 5
      </Original>
      <Expanded>
        5 >= 5
      </Expanded>
    </Expression>
    <Section name="resizing smaller changes size but not capacity" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.size() == 0
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.capacity() >= 5
        </Original>
        <Expanded>
          5 >= 5
        </Expanded>
      </Expression>
      <Section name="We can use the 'swap trick' to reset the capacity" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
          <Original>
            v.capacity() == 0
          </Original>
          <Expanded>
            0 == 0
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="3" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.size() == 5
      </Original>
      <Expanded>
        5 == 5
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.capacity() >= 5
      </Original>
      <Expanded>
        5 >= 5
      </Expanded>
    </Expression>
    <Section name="reserving bigger changes capacity but not size" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.size() == 5
        </Original>
        <Expanded>
          5 == 5
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.capacity() >= 10
        </Original>
        <Expanded>
          10 >= 10
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.size() == 5
      </Original>
      <Expanded>
        5 == 5
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.capacity() >= 5
      </Original>
      <Expanded>
        5 >= 5
      </Expanded>
    </Expression>
    <Section name="reserving smaller does not change size or capacity" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.size() == 5
        </Original>
        <Expanded>
          5 == 5
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.capacity() >= 5
        </Original>
        <Expanded>
          5 >= 5
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="TemplateTest: vectors can be sized and resized - std::tuple&lt;int,float>" tags="[template][vector]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.size() == 5
      </Original>
      <Expanded>
        5 == 5
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.capacity() >= 5
      </Original>
      <Expanded>
        5 >= 5
      </Expanded>
    </Expression>
    <Section name="resizing bigger changes size and capacity" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.size() == 10
        </Original>
        <Expanded>
          10 == 10
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.capacity() >= 10
        </Original>
        <Expanded>
          10 >= 10
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.size() == 5
      </Original>
      <Expanded>
        5 == 5
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.capacity() >= 5
      </Original>
      <Expanded>
        5 >= 5
      </Expanded>
    </Expression>
    <Section name="resizing smaller changes size but not capacity" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.size() == 0
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.capacity() >= 5
        </Original>
        <Expanded>
          5 >= 5
        </Expanded>
      </Expression>
      <Section name="We can use the 'swap trick' to reset the capacity" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
          <Original>
            v.capacity() == 0
          </Original>
          <Expanded>
            0 == 0
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="3" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.size() == 5
      </Original>
      <Expanded>
        5 == 5
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.capacity() >= 5
      </Original>
      <Expanded>
        5 >= 5
      </Expanded>
    </Expression>
    <Section name="reserving bigger changes capacity but not size" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.size() == 5
        </Original>
        <Expanded>
          5 == 5
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.capacity() >= 10
        </Original>
        <Expanded>
          10 >= 10
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.size() == 5
      </Original>
      <Expanded>
        5 == 5
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.capacity() >= 5
      </Original>
      <Expanded>
        5 >= 5
      </Expanded>
    </Expression>
    <Section name="reserving smaller does not change size or capacity" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.size() == 5
        </Original>
        <Expanded>
          5 == 5
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.capacity() >= 5
        </Original>
        <Expanded>
          5 >= 5
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="TemplateTestSig: vectors can be sized and resized - (std::tuple&lt;int, float>), 6" tags="[nttp][template][vector]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.size() == V
      </Original>
      <Expanded>
        6 == 6
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.capacity() >= V
      </Original>
      <Expanded>
        6 >= 6
      </Expanded>
    </Expression>
    <Section name="resizing bigger changes size and capacity" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.size() == 2 * V
        </Original>
        <Expanded>
          12 == 12
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.capacity() >= 2 * V
        </Original>
        <Expanded>
          12 >= 12
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.size() == V
      </Original>
      <Expanded>
        6 == 6
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.capacity() >= V
      </Original>
      <Expanded>
        6 >= 6
      </Expanded>
    </Expression>
    <Section name="resizing smaller changes size but not capacity" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.size() == 0
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.capacity() >= V
        </Original>
        <Expanded>
          6 >= 6
        </Expanded>
      </Expression>
      <Section name="We can use the 'swap trick' to reset the capacity" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
          <Original>
            v.capacity() == 0
          </Original>
          <Expanded>
            0 == 0
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="3" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.size() == V
      </Original>
      <Expanded>
        6 == 6
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.capacity() >= V
      </Original>
      <Expanded>
        6 >= 6
      </Expanded>
    </Expression>
    <Section name="reserving bigger changes capacity but not size" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.size() == V
        </Original>
        <Expanded>
          6 == 6
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.capacity() >= 2 * V
        </Original>
        <Expanded>
          12 >= 12
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.size() == V
      </Original>
      <Expanded>
        6 == 6
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.capacity() >= V
      </Original>
      <Expanded>
        6 >= 6
      </Expanded>
    </Expression>
    <Section name="reserving smaller does not change size or capacity" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.size() == V
        </Original>
        <Expanded>
          6 == 6
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.capacity() >= V
        </Original>
        <Expanded>
          6 >= 6
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="TemplateTestSig: vectors can be sized and resized - float,4" tags="[nttp][template][vector]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.size() == V
      </Original>
      <Expanded>
        4 == 4
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.capacity() >= V
      </Original>
      <Expanded>
        4 >= 4
      </Expanded>
    </Expression>
    <Section name="resizing bigger changes size and capacity" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.size() == 2 * V
        </Original>
        <Expanded>
          8 == 8
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.capacity() >= 2 * V
        </Original>
        <Expanded>
          8 >= 8
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.size() == V
      </Original>
      <Expanded>
        4 == 4
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.capacity() >= V
      </Original>
      <Expanded>
        4 >= 4
      </Expanded>
    </Expression>
    <Section name="resizing smaller changes size but not capacity" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.size() == 0
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.capacity() >= V
        </Original>
        <Expanded>
          4 >= 4
        </Expanded>
      </Expression>
      <Section name="We can use the 'swap trick' to reset the capacity" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
          <Original>
            v.capacity() == 0
          </Original>
          <Expanded>
            0 == 0
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="3" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.size() == V
      </Original>
      <Expanded>
        4 == 4
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.capacity() >= V
      </Original>
      <Expanded>
        4 >= 4
      </Expanded>
    </Expression>
    <Section name="reserving bigger changes capacity but not size" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.size() == V
        </Original>
        <Expanded>
          4 == 4
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.capacity() >= 2 * V
        </Original>
        <Expanded>
          8 >= 8
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.size() == V
      </Original>
      <Expanded>
        4 == 4
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.capacity() >= V
      </Original>
      <Expanded>
        4 >= 4
      </Expanded>
    </Expression>
    <Section name="reserving smaller does not change size or capacity" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.size() == V
        </Original>
        <Expanded>
          4 == 4
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.capacity() >= V
        </Original>
        <Expanded>
          4 >= 4
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="TemplateTestSig: vectors can be sized and resized - int,5" tags="[nttp][template][vector]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.size() == V
      </Original>
      <Expanded>
        5 == 5
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.capacity() >= V
      </Original>
      <Expanded>
        5 >= 5
      </Expanded>
    </Expression>
    <Section name="resizing bigger changes size and capacity" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.size() == 2 * V
        </Original>
        <Expanded>
          10 == 10
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.capacity() >= 2 * V
        </Original>
        <Expanded>
          10 >= 10
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.size() == V
      </Original>
      <Expanded>
        5 == 5
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.capacity() >= V
      </Original>
      <Expanded>
        5 >= 5
      </Expanded>
    </Expression>
    <Section name="resizing smaller changes size but not capacity" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.size() == 0
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.capacity() >= V
        </Original>
        <Expanded>
          5 >= 5
        </Expanded>
      </Expression>
      <Section name="We can use the 'swap trick' to reset the capacity" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
          <Original>
            v.capacity() == 0
          </Original>
          <Expanded>
            0 == 0
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="3" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.size() == V
      </Original>
      <Expanded>
        5 == 5
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.capacity() >= V
      </Original>
      <Expanded>
        5 >= 5
      </Expanded>
    </Expression>
    <Section name="reserving bigger changes capacity but not size" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.size() == V
        </Original>
        <Expanded>
          5 == 5
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.capacity() >= 2 * V
        </Original>
        <Expanded>
          10 >= 10
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.size() == V
      </Original>
      <Expanded>
        5 == 5
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.capacity() >= V
      </Original>
      <Expanded>
        5 >= 5
      </Expanded>
    </Expression>
    <Section name="reserving smaller does not change size or capacity" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.size() == V
        </Original>
        <Expanded>
          5 == 5
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.capacity() >= V
        </Original>
        <Expanded>
          5 >= 5
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="TemplateTestSig: vectors can be sized and resized - std::string,15" tags="[nttp][template][vector]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.size() == V
      </Original>
      <Expanded>
        15 == 15
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.capacity() >= V
      </Original>
      <Expanded>
        15 >= 15
      </Expanded>
    </Expression>
    <Section name="resizing bigger changes size and capacity" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.size() == 2 * V
        </Original>
        <Expanded>
          30 == 30
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.capacity() >= 2 * V
        </Original>
        <Expanded>
          30 >= 30
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.size() == V
      </Original>
      <Expanded>
        15 == 15
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.capacity() >= V
      </Original>
      <Expanded>
        15 >= 15
      </Expanded>
    </Expression>
    <Section name="resizing smaller changes size but not capacity" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.size() == 0
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.capacity() >= V
        </Original>
        <Expanded>
          15 >= 15
        </Expanded>
      </Expression>
      <Section name="We can use the 'swap trick' to reset the capacity" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
          <Original>
            v.capacity() == 0
          </Original>
          <Expanded>
            0 == 0
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="3" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.size() == V
      </Original>
      <Expanded>
        15 == 15
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.capacity() >= V
      </Original>
      <Expanded>
        15 >= 15
      </Expanded>
    </Expression>
    <Section name="reserving bigger changes capacity but not size" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.size() == V
        </Original>
        <Expanded>
          15 == 15
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.capacity() >= 2 * V
        </Original>
        <Expanded>
          30 >= 30
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.size() == V
      </Original>
      <Expanded>
        15 == 15
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.capacity() >= V
      </Original>
      <Expanded>
        15 >= 15
      </Expanded>
    </Expression>
    <Section name="reserving smaller does not change size or capacity" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.size() == V
        </Original>
        <Expanded>
          15 == 15
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.capacity() >= V
        </Original>
        <Expanded>
          15 >= 15
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Test case with identical tags keeps just one" tags="[tags]" filename="tests/<exe-name>/IntrospectiveTests/Tag.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Tag.tests.cpp" >
      <Original>
        testCase.tags.size() == 1
      </Original>
      <Expanded>
        1 == 1
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Tag.tests.cpp" >
      <Original>
        testCase.tags[0] == Tag( "tag1" )
      </Original>
      <Expanded>
        {?} == {?}
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Test case with one argument" filename="tests/<exe-name>/UsageTests/VariadicMacros.tests.cpp" >
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Test enum bit values" tags="[Tricky]" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      <Original>
        0x<hex digits> == bit30and31
      </Original>
      <Expanded>
        3221225472 (0x<hex digits>) == 3221225472
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Test with special, characters &quot;in name" tags="[cli][regression]" filename="tests/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Testing checked-if" tags="[checked-if]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="CHECKED_IF" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        true
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECKED_IF" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        false
      </Original>
      <Expanded>
        false
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECKED_ELSE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        true
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Expression success="false" type="CHECKED_ELSE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        false
      </Original>
      <Expanded>
        false
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Testing checked-if 2" tags="[!shouldfail][checked-if]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="CHECKED_IF" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        true
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Failure filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" />
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Testing checked-if 3" tags="[!shouldfail][checked-if]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="false" type="CHECKED_ELSE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        false
      </Original>
      <Expanded>
        false
      </Expanded>
    </Expression>
    <Failure filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" />
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="The NO_FAIL macro reports a failure but does not fail the test" tags="[messages]" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
    <Expression success="false" type="CHECK_NOFAIL" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      <Original>
        1 == 2
      </Original>
      <Expanded>
        1 == 2
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="The default listing implementation write to provided stream" tags="[reporter-helpers][reporters]" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
    <Section name="Listing tags" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          listingString, ContainsSubstring("[fakeTag]"s)
        </Original>
        <Expanded>
          "All available tags:
   1  [fakeTag]
1 tag

" contains: "[fakeTag]"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Listing reporters" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          listingString, ContainsSubstring( "fake reporter"s ) &amp;&amp; ContainsSubstring( "fake description"s )
        </Original>
        <Expanded>
          "Available reporters:
  fake reporter:  fake description

" ( contains: "fake reporter" and contains: "fake description" )
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Listing tests" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          listingString, ContainsSubstring( "fake test name"s ) &amp;&amp; ContainsSubstring( "fakeTestTag"s )
        </Original>
        <Expanded>
          "All available test cases:
  fake test name
      [fakeTestTag]
1 test case

" ( contains: "fake test name" and contains: "fakeTestTag" )
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Listing listeners" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/Reporters.tests.cpp" >
        <Original>
          listingString, ContainsSubstring( "fakeListener"s ) &amp;&amp; ContainsSubstring( "fake description"s )
        </Original>
        <Expanded>
          "Registered listeners:
  fakeListener:  fake description

" ( contains: "fakeListener" and contains: "fake description" )
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="This test 'should' fail but doesn't" tags="[!shouldfail][.][failing]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="Thrown string literals are translated" tags="[!throws][.][failing]" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
    <Exception filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
      For some reason someone is throwing a string literal!
    </Exception>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="Tracker" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Original>
        testCase.isOpen()
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Original>
        s1.isOpen()
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Section name="successfully close one section" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
        <Original>
          s1.isSuccessfullyCompleted()
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
        <Original>
          testCase.isComplete() == false
        </Original>
        <Expanded>
          false == false
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
        <Original>
          ctx.completedCycle()
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
        <Original>
          testCase.isSuccessfullyCompleted()
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <OverallResults successes="4" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Original>
        testCase.isOpen()
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Original>
        s1.isOpen()
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Section name="fail one section" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
        <Original>
          s1.isComplete()
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
        <Original>
          s1.isSuccessfullyCompleted() == false
        </Original>
        <Expanded>
          false == false
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
        <Original>
          testCase.isComplete() == false
        </Original>
        <Expanded>
          false == false
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
        <Original>
          ctx.completedCycle()
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
        <Original>
          testCase.isSuccessfullyCompleted() == false
        </Original>
        <Expanded>
          false == false
        </Expanded>
      </Expression>
      <Section name="re-enter after failed section" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
          <Original>
            testCase2.isOpen()
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
          <Original>
            s1b.isOpen() == false
          </Original>
          <Expanded>
            false == false
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
          <Original>
            ctx.completedCycle()
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
          <Original>
            testCase.isComplete()
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
          <Original>
            testCase.isSuccessfullyCompleted()
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <OverallResults successes="5" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="10" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Original>
        testCase.isOpen()
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Original>
        s1.isOpen()
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Section name="fail one section" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
        <Original>
          s1.isComplete()
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
        <Original>
          s1.isSuccessfullyCompleted() == false
        </Original>
        <Expanded>
          false == false
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
        <Original>
          testCase.isComplete() == false
        </Original>
        <Expanded>
          false == false
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
        <Original>
          ctx.completedCycle()
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
        <Original>
          testCase.isSuccessfullyCompleted() == false
        </Original>
        <Expanded>
          false == false
        </Expanded>
      </Expression>
      <Section name="re-enter after failed section and find next section" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
          <Original>
            testCase2.isOpen()
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
          <Original>
            s1b.isOpen() == false
          </Original>
          <Expanded>
            false == false
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
          <Original>
            s2.isOpen()
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
          <Original>
            ctx.completedCycle()
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
          <Original>
            testCase.isComplete()
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
          <Original>
            testCase.isSuccessfullyCompleted()
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="11" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Original>
        testCase.isOpen()
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Original>
        s1.isOpen()
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Section name="successfully close one section, then find another" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
        <Original>
          s2.isOpen() == false
        </Original>
        <Expanded>
          false == false
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
        <Original>
          testCase.isComplete() == false
        </Original>
        <Expanded>
          false == false
        </Expanded>
      </Expression>
      <Section name="Re-enter - skips S1 and enters S2" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
          <Original>
            testCase2.isOpen()
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
          <Original>
            s1b.isOpen() == false
          </Original>
          <Expanded>
            false == false
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
          <Original>
            s2b.isOpen()
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
          <Original>
            ctx.completedCycle() == false
          </Original>
          <Expanded>
            false == false
          </Expanded>
        </Expression>
        <Section name="Successfully close S2" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
            <Original>
              ctx.completedCycle()
            </Original>
            <Expanded>
              true
            </Expanded>
          </Expression>
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
            <Original>
              s2b.isSuccessfullyCompleted()
            </Original>
            <Expanded>
              true
            </Expanded>
          </Expression>
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
            <Original>
              testCase2.isComplete() == false
            </Original>
            <Expanded>
              false == false
            </Expanded>
          </Expression>
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
            <Original>
              testCase2.isSuccessfullyCompleted()
            </Original>
            <Expanded>
              true
            </Expanded>
          </Expression>
          <OverallResults successes="4" failures="0" expectedFailures="0" skipped="false"/>
        </Section>
        <OverallResults successes="8" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="10" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Original>
        testCase.isOpen()
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Original>
        s1.isOpen()
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Section name="successfully close one section, then find another" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
        <Original>
          s2.isOpen() == false
        </Original>
        <Expanded>
          false == false
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
        <Original>
          testCase.isComplete() == false
        </Original>
        <Expanded>
          false == false
        </Expanded>
      </Expression>
      <Section name="Re-enter - skips S1 and enters S2" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
          <Original>
            testCase2.isOpen()
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
          <Original>
            s1b.isOpen() == false
          </Original>
          <Expanded>
            false == false
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
          <Original>
            s2b.isOpen()
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
          <Original>
            ctx.completedCycle() == false
          </Original>
          <Expanded>
            false == false
          </Expanded>
        </Expression>
        <Section name="fail S2" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
            <Original>
              ctx.completedCycle()
            </Original>
            <Expanded>
              true
            </Expanded>
          </Expression>
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
            <Original>
              s2b.isComplete()
            </Original>
            <Expanded>
              true
            </Expanded>
          </Expression>
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
            <Original>
              s2b.isSuccessfullyCompleted() == false
            </Original>
            <Expanded>
              false == false
            </Expanded>
          </Expression>
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
            <Original>
              testCase2.isSuccessfullyCompleted() == false
            </Original>
            <Expanded>
              false == false
            </Expanded>
          </Expression>
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
            <Original>
              testCase3.isOpen()
            </Original>
            <Expanded>
              true
            </Expanded>
          </Expression>
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
            <Original>
              s1c.isOpen() == false
            </Original>
            <Expanded>
              false == false
            </Expanded>
          </Expression>
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
            <Original>
              s2c.isOpen() == false
            </Original>
            <Expanded>
              false == false
            </Expanded>
          </Expression>
          <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
            <Original>
              testCase3.isSuccessfullyCompleted()
            </Original>
            <Expanded>
              true
            </Expanded>
          </Expression>
          <OverallResults successes="8" failures="0" expectedFailures="0" skipped="false"/>
        </Section>
        <OverallResults successes="12" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="14" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Original>
        testCase.isOpen()
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Original>
        s1.isOpen()
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Section name="open a nested section" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
        <Original>
          s2.isOpen()
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
        <Original>
          s2.isComplete()
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
        <Original>
          s1.isComplete() == false
        </Original>
        <Expanded>
          false == false
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
        <Original>
          s1.isComplete()
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
        <Original>
          testCase.isComplete() == false
        </Original>
        <Expanded>
          false == false
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp" >
        <Original>
          testCase.isComplete()
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Trim strings" tags="[string-manip]" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
      <Original>
        trim(std::string(no_whitespace)) == no_whitespace
      </Original>
      <Expanded>
        "There is no extra whitespace here"
==
"There is no extra whitespace here"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
      <Original>
        trim(std::string(leading_whitespace)) == no_whitespace
      </Original>
      <Expanded>
        "There is no extra whitespace here"
==
"There is no extra whitespace here"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
      <Original>
        trim(std::string(trailing_whitespace)) == no_whitespace
      </Original>
      <Expanded>
        "There is no extra whitespace here"
==
"There is no extra whitespace here"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
      <Original>
        trim(std::string(whitespace_at_both_ends)) == no_whitespace
      </Original>
      <Expanded>
        "There is no extra whitespace here"
==
"There is no extra whitespace here"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
      <Original>
        trim(StringRef(no_whitespace)) == StringRef(no_whitespace)
      </Original>
      <Expanded>
        There is no extra whitespace here
==
There is no extra whitespace here
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
      <Original>
        trim(StringRef(leading_whitespace)) == StringRef(no_whitespace)
      </Original>
      <Expanded>
        There is no extra whitespace here
==
There is no extra whitespace here
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
      <Original>
        trim(StringRef(trailing_whitespace)) == StringRef(no_whitespace)
      </Original>
      <Expanded>
        There is no extra whitespace here
==
There is no extra whitespace here
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
      <Original>
        trim(StringRef(whitespace_at_both_ends)) == StringRef(no_whitespace)
      </Original>
      <Expanded>
        There is no extra whitespace here
==
There is no extra whitespace here
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Type conversions of RangeEquals and similar" tags="[matchers][quantifiers][templated]" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
    <Section name="Container conversions" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="Two equal containers of different container types" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            array_int_a, RangeEquals( c_array )
          </Original>
          <Expanded>
            { 1, 2, 3 } elements are { 1, 2, 3 }
          </Expanded>
        </Expression>
        <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            array_int_a, UnorderedRangeEquals( c_array )
          </Original>
          <Expanded>
            { 1, 2, 3 } unordered elements are { 1, 2, 3 }
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Container conversions" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="Two equal containers of different container types (differ in array N)" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            array_int_3, !RangeEquals( array_int_4 )
          </Original>
          <Expanded>
            { 1, 2, 3 } not elements are { 1, 2, 3, 4 }
          </Expanded>
        </Expression>
        <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            array_int_3, !UnorderedRangeEquals( array_int_4 )
          </Original>
          <Expanded>
            { 1, 2, 3 } not unordered elements are { 1, 2, 3, 4 }
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Container conversions" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="Two equal containers of different container types and value types" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            array_int_a, RangeEquals( vector_char_a )
          </Original>
          <Expanded>
            { 1, 2, 3 } elements are { 1, 2, 3 }
          </Expanded>
        </Expression>
        <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            array_int_a, UnorderedRangeEquals( vector_char_a )
          </Original>
          <Expanded>
            { 1, 2, 3 } unordered elements are { 1, 2, 3 }
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Container conversions" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="Two equal containers, one random access, one not" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            array_int_a, RangeEquals( list_char_a )
          </Original>
          <Expanded>
            { 1, 2, 3 } elements are { 1, 2, 3 }
          </Expanded>
        </Expression>
        <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            array_int_a, UnorderedRangeEquals( list_char_a )
          </Original>
          <Expanded>
            { 1, 2, 3 } unordered elements are { 1, 2, 3 }
          </Expanded>
        </Expression>
        <OverallResults successes="3" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="3" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Value type" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="Two equal containers of different value types" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            vector_int_a, RangeEquals( vector_char_a )
          </Original>
          <Expanded>
            { 1, 2, 3 } elements are { 1, 2, 3 }
          </Expanded>
        </Expression>
        <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            vector_int_a, UnorderedRangeEquals( vector_char_a )
          </Original>
          <Expanded>
            { 1, 2, 3 } unordered elements are { 1, 2, 3 }
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Value type" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="Two non-equal containers of different value types" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            vector_int_a, !RangeEquals( vector_char_b )
          </Original>
          <Expanded>
            { 1, 2, 3 } not elements are { 1, 2, 2 }
          </Expanded>
        </Expression>
        <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            vector_int_a, !UnorderedRangeEquals( vector_char_b )
          </Original>
          <Expanded>
            { 1, 2, 3 } not unordered elements are { 1, 2, 2 }
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Ranges with begin that needs ADL" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          a, !RangeEquals( b )
        </Original>
        <Expanded>
          { 1, 2, 3 } not elements are { 3, 2, 1 }
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          a, UnorderedRangeEquals( b )
        </Original>
        <Expanded>
          { 1, 2, 3 } unordered elements are { 3, 2, 1 }
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Custom predicate" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="Two equal non-empty containers (close enough)" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            vector_a, RangeEquals( array_a_plus_1, close_enough )
          </Original>
          <Expanded>
            { 1, 2, 3 } elements are { 2, 3, 4 }
          </Expanded>
        </Expression>
        <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            vector_a, UnorderedRangeEquals( array_a_plus_1, close_enough )
          </Original>
          <Expanded>
            { 1, 2, 3 } unordered elements are { 2, 3, 4 }
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Unexpected exceptions can be translated" tags="[!throws][.][failing]" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
    <Exception filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
      3.14
    </Exception>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="Upcasting special member functions" tags="[internals][unique-ptr]" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
    <Section name="Move constructor" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
        <Original>
          bptr->i == 3
        </Original>
        <Expanded>
          3 == 3
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="move assignment" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
        <Original>
          bptr->i == 3
        </Original>
        <Expanded>
          3 == 3
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Usage of AllMatch range matcher" tags="[matchers][quantifiers][templated]" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
    <Section name="Basic usage" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          data, AllMatch(SizeIs(5))
        </Original>
        <Expanded>
          { { 0, 1, 2, 3, 5 }, { 4, -3, -2, 5, 0 }, { 0, 0, 0, 5, 0 }, { 0, -5, 0, 5, 0 }, { 1, 0, 0, -1, 5 } } all match has size == 5
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          data, !AllMatch(Contains(0) &amp;&amp; Contains(1))
        </Original>
        <Expanded>
          { { 0, 1, 2, 3, 5 }, { 4, -3, -2, 5, 0 }, { 0, 0, 0, 5, 0 }, { 0, -5, 0, 5, 0 }, { 1, 0, 0, -1, 5 } } not all match ( contains element 0 and contains element 1 )
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Type requires ADL found begin and end" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          needs_adl, AllMatch( Predicate&lt;int>( []( int elem ) { return elem &lt; 6; } ) )
        </Original>
        <Expanded>
          { 1, 2, 3, 4, 5 } all match matches undescribed predicate
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Shortcircuiting" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="All are read" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked, allMatch
          </Original>
          <Expanded>
            { 1, 2, 3, 4, 5 } all match matches undescribed predicate
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[0]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[1]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[2]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[3]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[4]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Shortcircuiting" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="Short-circuited" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked, !allMatch
          </Original>
          <Expanded>
            { 1, 2, 3, 4, 5 } not all match matches undescribed predicate
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[0]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[1]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[2]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            !(mocked.m_derefed[3])
          </Original>
          <Expanded>
            !false
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            !(mocked.m_derefed[4])
          </Original>
          <Expanded>
            !false
          </Expanded>
        </Expression>
        <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Usage of AllTrue range matcher" tags="[matchers][quantifiers][templated]" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
    <Section name="Basic usage" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="All true evaluates to true" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            data, AllTrue()
          </Original>
          <Expanded>
            { true, true, true, true, true } contains only true
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Basic usage" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="Empty evaluates to true" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            data, AllTrue()
          </Original>
          <Expanded>
            {  } contains only true
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Basic usage" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="One false evaluates to false" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            data, !AllTrue()
          </Original>
          <Expanded>
            { true, true, false, true, true } not contains only true
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Basic usage" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="All false evaluates to false" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            data, !AllTrue()
          </Original>
          <Expanded>
            { false, false, false, false, false } not contains only true
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Contained type is convertible to bool" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="All true evaluates to true" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            data, AllTrue()
          </Original>
          <Expanded>
            { true, true, true, true, true } contains only true
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Contained type is convertible to bool" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="One false evaluates to false" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            data, !AllTrue()
          </Original>
          <Expanded>
            { true, true, false, true, true } not contains only true
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Contained type is convertible to bool" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="All false evaluates to false" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            data, !AllTrue()
          </Original>
          <Expanded>
            { false, false, false, false, false } not contains only true
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Shortcircuiting" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="All are read" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked, AllTrue()
          </Original>
          <Expanded>
            { true, true, true, true, true } contains only true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[0]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[1]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[2]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[3]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[4]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Shortcircuiting" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="Short-circuited" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked, !AllTrue()
          </Original>
          <Expanded>
            { true, true, false, true, true } not contains only true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[0]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[1]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[2]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            !(mocked.m_derefed[3])
          </Original>
          <Expanded>
            !false
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            !(mocked.m_derefed[4])
          </Original>
          <Expanded>
            !false
          </Expanded>
        </Expression>
        <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Usage of AnyMatch range matcher" tags="[matchers][quantifiers][templated]" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
    <Section name="Basic usage" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          data, AnyMatch(SizeIs(5))
        </Original>
        <Expanded>
          { { 0, 1, 2, 3, 5 }, { 4, -3, -2, 5, 0 }, { 0, 0, 0, 5, 0 }, { 0, -5, 0, 5, 0 }, { 1, 0, 0, -1, 5 } } any match has size == 5
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          data, !AnyMatch(Contains(0) &amp;&amp; Contains(10))
        </Original>
        <Expanded>
          { { 0, 1, 2, 3, 5 }, { 4, -3, -2, 5, 0 }, { 0, 0, 0, 5, 0 }, { 0, -5, 0, 5, 0 }, { 1, 0, 0, -1, 5 } } not any match ( contains element 0 and contains element 10 )
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Type requires ADL found begin and end" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          needs_adl, AnyMatch( Predicate&lt;int>( []( int elem ) { return elem &lt; 3; } ) )
        </Original>
        <Expanded>
          { 1, 2, 3, 4, 5 } any match matches undescribed predicate
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Shortcircuiting" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="All are read" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked, !anyMatch
          </Original>
          <Expanded>
            { 1, 2, 3, 4, 5 } not any match matches undescribed predicate
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[0]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[1]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[2]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[3]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[4]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Shortcircuiting" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="Short-circuited" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked, anyMatch
          </Original>
          <Expanded>
            { 1, 2, 3, 4, 5 } any match matches undescribed predicate
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[0]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            !(mocked.m_derefed[1])
          </Original>
          <Expanded>
            !false
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            !(mocked.m_derefed[2])
          </Original>
          <Expanded>
            !false
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            !(mocked.m_derefed[3])
          </Original>
          <Expanded>
            !false
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            !(mocked.m_derefed[4])
          </Original>
          <Expanded>
            !false
          </Expanded>
        </Expression>
        <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Usage of AnyTrue range matcher" tags="[matchers][quantifiers][templated]" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
    <Section name="Basic usage" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="All true evaluates to true" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            data, AnyTrue()
          </Original>
          <Expanded>
            { true, true, true, true, true } contains at least one true
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Basic usage" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="Empty evaluates to false" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            data, !AnyTrue()
          </Original>
          <Expanded>
            {  } not contains at least one true
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Basic usage" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="One true evaluates to true" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            data, AnyTrue()
          </Original>
          <Expanded>
            { false, false, true, false, false } contains at least one true
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Basic usage" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="All false evaluates to false" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            data, !AnyTrue()
          </Original>
          <Expanded>
            { false, false, false, false, false } not contains at least one true
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Contained type is convertible to bool" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="All true evaluates to true" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            data, AnyTrue()
          </Original>
          <Expanded>
            { true, true, true, true, true } contains at least one true
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Contained type is convertible to bool" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="One true evaluates to true" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            data, AnyTrue()
          </Original>
          <Expanded>
            { false, false, true, false, false } contains at least one true
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Contained type is convertible to bool" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="All false evaluates to false" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            data, !AnyTrue()
          </Original>
          <Expanded>
            { false, false, false, false, false } not contains at least one true
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Shortcircuiting" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="All are read" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked, AnyTrue()
          </Original>
          <Expanded>
            { false, false, false, false, true } contains at least one true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[0]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[1]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[2]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[3]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[4]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Shortcircuiting" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="Short-circuited" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked, AnyTrue()
          </Original>
          <Expanded>
            { false, false, true, true, true } contains at least one true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[0]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[1]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[2]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            !(mocked.m_derefed[3])
          </Original>
          <Expanded>
            !false
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            !(mocked.m_derefed[4])
          </Original>
          <Expanded>
            !false
          </Expanded>
        </Expression>
        <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Usage of NoneMatch range matcher" tags="[matchers][quantifiers][templated]" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
    <Section name="Basic usage" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          data, NoneMatch(SizeIs(6))
        </Original>
        <Expanded>
          { { 0, 1, 2, 3, 5 }, { 4, -3, -2, 5, 0 }, { 0, 0, 0, 5, 0 }, { 0, -5, 0, 5, 0 }, { 1, 0, 0, -1, 5 } } none match has size == 6
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          data, !NoneMatch(Contains(0) &amp;&amp; Contains(1))
        </Original>
        <Expanded>
          { { 0, 1, 2, 3, 5 }, { 4, -3, -2, 5, 0 }, { 0, 0, 0, 5, 0 }, { 0, -5, 0, 5, 0 }, { 1, 0, 0, -1, 5 } } not none match ( contains element 0 and contains element 1 )
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Type requires ADL found begin and end" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          needs_adl, NoneMatch( Predicate&lt;int>( []( int elem ) { return elem > 6; } ) )
        </Original>
        <Expanded>
          { 1, 2, 3, 4, 5 } none match matches undescribed predicate
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Shortcircuiting" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="All are read" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked, noneMatch
          </Original>
          <Expanded>
            { 1, 2, 3, 4, 5 } none match matches undescribed predicate
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[0]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[1]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[2]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[3]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[4]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Shortcircuiting" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="Short-circuited" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked, !noneMatch
          </Original>
          <Expanded>
            { 1, 2, 3, 4, 5 } not none match matches undescribed predicate
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[0]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            !(mocked.m_derefed[1])
          </Original>
          <Expanded>
            !false
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            !(mocked.m_derefed[2])
          </Original>
          <Expanded>
            !false
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            !(mocked.m_derefed[3])
          </Original>
          <Expanded>
            !false
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            !(mocked.m_derefed[4])
          </Original>
          <Expanded>
            !false
          </Expanded>
        </Expression>
        <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Usage of NoneTrue range matcher" tags="[matchers][quantifiers][templated]" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
    <Section name="Basic usage" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="All true evaluates to false" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            data, !NoneTrue()
          </Original>
          <Expanded>
            { true, true, true, true, true } not contains no true
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Basic usage" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="Empty evaluates to true" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            data, NoneTrue()
          </Original>
          <Expanded>
            {  } contains no true
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Basic usage" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="One true evaluates to false" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            data, !NoneTrue()
          </Original>
          <Expanded>
            { false, false, true, false, false } not contains no true
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Basic usage" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="All false evaluates to true" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            data, NoneTrue()
          </Original>
          <Expanded>
            { false, false, false, false, false } contains no true
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Contained type is convertible to bool" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="All true evaluates to false" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            data, !NoneTrue()
          </Original>
          <Expanded>
            { true, true, true, true, true } not contains no true
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Contained type is convertible to bool" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="One true evaluates to false" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            data, !NoneTrue()
          </Original>
          <Expanded>
            { false, false, true, false, false } not contains no true
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Contained type is convertible to bool" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="All false evaluates to true" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            data, NoneTrue()
          </Original>
          <Expanded>
            { false, false, false, false, false } contains no true
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Shortcircuiting" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="All are read" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked, NoneTrue()
          </Original>
          <Expanded>
            { false, false, false, false, false } contains no true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[0]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[1]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[2]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[3]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[4]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Shortcircuiting" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="Short-circuited" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked, !NoneTrue()
          </Original>
          <Expanded>
            { false, false, true, true, true } not contains no true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[0]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[1]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked.m_derefed[2]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            !(mocked.m_derefed[3])
          </Original>
          <Expanded>
            !false
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            !(mocked.m_derefed[4])
          </Original>
          <Expanded>
            !false
          </Expanded>
        </Expression>
        <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Usage of RangeEquals range matcher" tags="[matchers][quantifiers][templated]" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
    <Section name="Basic usage" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="Empty container matches empty container" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            empty_vector, RangeEquals( empty_vector )
          </Original>
          <Expanded>
            {  } elements are {  }
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Basic usage" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="Empty container does not match non-empty container" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            empty_vector, !RangeEquals( non_empty_vector )
          </Original>
          <Expanded>
            {  } not elements are { 1 }
          </Expanded>
        </Expression>
        <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            non_empty_vector, !RangeEquals( empty_vector )
          </Original>
          <Expanded>
            { 1 } not elements are {  }
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Basic usage" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="Two equal 1-length non-empty containers" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            non_empty_array, RangeEquals( non_empty_array )
          </Original>
          <Expanded>
            { 1 } elements are { 1 }
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Basic usage" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="Two equal-sized, equal, non-empty containers" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            array_a, RangeEquals( array_a )
          </Original>
          <Expanded>
            { 1, 2, 3 } elements are { 1, 2, 3 }
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Basic usage" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="Two equal-sized, non-equal, non-empty containers" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            array_a, !RangeEquals( array_b )
          </Original>
          <Expanded>
            { 1, 2, 3 } not elements are { 2, 2, 3 }
          </Expanded>
        </Expression>
        <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            array_a, !RangeEquals( array_c )
          </Original>
          <Expanded>
            { 1, 2, 3 } not elements are { 1, 2, 2 }
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Basic usage" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="Two non-equal-sized, non-empty containers (with same first elements)" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            vector_a, !RangeEquals( vector_b )
          </Original>
          <Expanded>
            { 1, 2, 3 } not elements are { 1, 2, 3, 4 }
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Custom predicate" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="Two equal non-empty containers (close enough)" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            vector_a, RangeEquals( vector_a_plus_1, close_enough )
          </Original>
          <Expanded>
            { 1, 2, 3 } elements are { 2, 3, 4 }
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Custom predicate" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="Two non-equal non-empty containers (close enough)" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            vector_a, !RangeEquals( vector_b, close_enough )
          </Original>
          <Expanded>
            { 1, 2, 3 } not elements are { 3, 3, 4 }
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Ranges that need ADL begin/end" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          needs_adl1, RangeEquals( needs_adl2 )
        </Original>
        <Expanded>
          { 1, 2, 3, 4, 5 } elements are { 1, 2, 3, 4, 5 }
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          needs_adl1, RangeEquals( needs_adl3, []( int l, int r ) { return l + 1 == r; } )
        </Original>
        <Expanded>
          { 1, 2, 3, 4, 5 } elements are { 2, 3, 4, 5, 6 }
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Check short-circuiting behaviour" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="Check short-circuits on failure" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked1, !RangeEquals( arr )
          </Original>
          <Expanded>
            { 1, 2, 3, 4 } not elements are { 1, 2, 4, 4 }
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked1.m_derefed[0]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked1.m_derefed[1]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked1.m_derefed[2]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            !(mocked1.m_derefed[3])
          </Original>
          <Expanded>
            !false
          </Expanded>
        </Expression>
        <OverallResults successes="5" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="5" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Check short-circuiting behaviour" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="All elements are checked on success" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked1, RangeEquals( arr )
          </Original>
          <Expanded>
            { 1, 2, 3, 4 } elements are { 1, 2, 3, 4 }
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked1.m_derefed[0]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked1.m_derefed[1]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked1.m_derefed[2]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            mocked1.m_derefed[3]
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <OverallResults successes="5" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="5" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Usage of UnorderedRangeEquals range matcher" tags="[matchers][quantifiers][templated]" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
    <Section name="Basic usage" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="Empty container matches empty container" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            empty_vector, UnorderedRangeEquals( empty_vector )
          </Original>
          <Expanded>
            {  } unordered elements are {  }
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Basic usage" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="Empty container does not match non-empty container" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            empty_vector, !UnorderedRangeEquals( non_empty_vector )
          </Original>
          <Expanded>
            {  } not unordered elements are { 1 }
          </Expanded>
        </Expression>
        <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            non_empty_vector, !UnorderedRangeEquals( empty_vector )
          </Original>
          <Expanded>
            { 1 } not unordered elements are {  }
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Basic usage" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="Two equal 1-length non-empty containers" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            non_empty_array, UnorderedRangeEquals( non_empty_array )
          </Original>
          <Expanded>
            { 1 } unordered elements are { 1 }
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Basic usage" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="Two equal-sized, equal, non-empty containers" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            array_a, UnorderedRangeEquals( array_a )
          </Original>
          <Expanded>
            { 1, 2, 3 } unordered elements are { 1, 2, 3 }
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Basic usage" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="Two equal-sized, non-equal, non-empty containers" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            array_a, !UnorderedRangeEquals( array_b )
          </Original>
          <Expanded>
            { 1, 2, 3 } not unordered elements are { 2, 2, 3 }
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Basic usage" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="Two non-equal-sized, non-empty containers" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            vector_a, !UnorderedRangeEquals( vector_b )
          </Original>
          <Expanded>
            { 1, 2, 3 } not unordered elements are { 1, 2, 3, 4 }
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Custom predicate" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="Two equal non-empty containers (close enough)" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            vector_a, UnorderedRangeEquals( vector_a_plus_1, close_enough )
          </Original>
          <Expanded>
            { 1, 10, 20 } unordered elements are { 11, 21, 2 }
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Custom predicate" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Section name="Two non-equal non-empty containers (close enough)" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
          <Original>
            vector_a, !UnorderedRangeEquals( vector_b, close_enough )
          </Original>
          <Expanded>
            { 1, 10, 21 } not unordered elements are { 11, 21, 3 }
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Ranges that need ADL begin/end" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          needs_adl1, UnorderedRangeEquals( needs_adl2 )
        </Original>
        <Expanded>
          { 1, 2, 3, 4, 5 } unordered elements are { 1, 2, 3, 4, 5 }
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Usage of the SizeIs range matcher" tags="[matchers][size][templated]" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
    <Section name="Some with stdlib containers" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          empty_vec, SizeIs(0)
        </Original>
        <Expanded>
          {  } has size == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          empty_vec, !SizeIs(2)
        </Original>
        <Expanded>
          {  } not has size == 2
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          empty_vec, SizeIs(Lt(2))
        </Original>
        <Expanded>
          {  } size matches is less than 2
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          arr, SizeIs(2)
        </Original>
        <Expanded>
          { 0, 0 } has size == 2
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          arr, SizeIs( Lt(3))
        </Original>
        <Expanded>
          { 0, 0 } size matches is less than 3
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          arr, !SizeIs(!Lt(3))
        </Original>
        <Expanded>
          { 0, 0 } not size matches not is less than 3
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          map, SizeIs(3)
        </Original>
        <Expanded>
          { {?}, {?}, {?} } has size == 3
        </Expanded>
      </Expression>
      <OverallResults successes="7" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Type requires ADL found size free function" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          unrelated::ADL_size{}, SizeIs(12)
        </Original>
        <Expanded>
          {?} has size == 12
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Type has size member" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/MatchersRanges.tests.cpp" >
        <Original>
          has_size{}, SizeIs(13)
        </Original>
        <Expanded>
          {?} has size == 13
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Use a custom approx" tags="[Approx][custom]" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        d == approx( 1.23 )
      </Original>
      <Expanded>
        1.23 == Approx( 1.23 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        d == approx( 1.22 )
      </Original>
      <Expanded>
        1.23 == Approx( 1.22 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        d == approx( 1.24 )
      </Original>
      <Expanded>
        1.23 == Approx( 1.24 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        d != approx( 1.25 )
      </Original>
      <Expanded>
        1.23 != Approx( 1.25 )
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        approx( d ) == 1.23
      </Original>
      <Expanded>
        Approx( 1.23 ) == 1.23
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        approx( d ) == 1.22
      </Original>
      <Expanded>
        Approx( 1.23 ) == 1.22
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        approx( d ) == 1.24
      </Original>
      <Expanded>
        Approx( 1.23 ) == 1.24
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Approx.tests.cpp" >
      <Original>
        approx( d ) != 1.25
      </Original>
      <Expanded>
        Approx( 1.23 ) != 1.25
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Variadic macros" tags="[sections][variadic]" filename="tests/<exe-name>/UsageTests/VariadicMacros.tests.cpp" >
    <Section name="Section with one argument" filename="tests/<exe-name>/UsageTests/VariadicMacros.tests.cpp" >
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Vector Approx matcher" tags="[approx][matchers][vector]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Section name="Empty vector is roughly equal to an empty vector" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          empty, Approx( empty )
        </Original>
        <Expanded>
          {  } is approx: {  }
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Vectors with elements" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Section name="A vector is approx equal to itself" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
          <Original>
            v1, Approx( v1 )
          </Original>
          <Expanded>
            { 1.0, 2.0, 3.0 } is approx: { 1.0, 2.0, 3.0 }
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
          <Original>
            v1, Approx&lt;double>( { 1., 2., 3. } )
          </Original>
          <Expanded>
            { 1.0, 2.0, 3.0 } is approx: { 1.0, 2.0, 3.0 }
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Vectors with elements" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Section name="Different length" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
          <Original>
            v1, !Approx( temp )
          </Original>
          <Expanded>
            { 1.0, 2.0, 3.0 } not is approx: { 1.0, 2.0, 3.0, 4.0 }
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Vectors with elements" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Section name="Same length, different elements" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
          <Original>
            v1, !Approx( v2 )
          </Original>
          <Expanded>
            { 1.0, 2.0, 3.0 } not is approx: { 1.5, 2.5, 3.5 }
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
          <Original>
            v1, Approx( v2 ).margin( 0.5 )
          </Original>
          <Expanded>
            { 1.0, 2.0, 3.0 } is approx: { 1.5, 2.5, 3.5 }
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
          <Original>
            v1, Approx( v2 ).epsilon( 0.5 )
          </Original>
          <Expanded>
            { 1.0, 2.0, 3.0 } is approx: { 1.5, 2.5, 3.5 }
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
          <Original>
            v1, Approx( v2 ).epsilon( 0.1 ).scale( 500 )
          </Original>
          <Expanded>
            { 1.0, 2.0, 3.0 } is approx: { 1.5, 2.5, 3.5 }
          </Expanded>
        </Expression>
        <OverallResults successes="4" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="4" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Vector Approx matcher -- failing" tags="[.][approx][failing][matchers][vector]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Section name="Empty and non empty vectors are not approx equal" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Expression success="false" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          empty, Approx( t1 )
        </Original>
        <Expanded>
          {  } is approx: { 1.0, 2.0 }
        </Expanded>
      </Expression>
      <OverallResults successes="0" failures="1" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Just different vectors" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Expression success="false" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          v1, Approx( v2 )
        </Original>
        <Expanded>
          { 2.0, 4.0, 6.0 } is approx: { 1.0, 3.0, 5.0 }
        </Expanded>
      </Expression>
      <OverallResults successes="0" failures="1" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="Vector matchers" tags="[matchers][vector]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Section name="Contains (element)" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          v, VectorContains( 1 )
        </Original>
        <Expanded>
          { 1, 2, 3 } Contains: 1
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          v, VectorContains( 2 )
        </Original>
        <Expanded>
          { 1, 2, 3 } Contains: 2
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          v5, ( VectorContains&lt;int, CustomAllocator&lt;int>>( 2 ) )
        </Original>
        <Expanded>
          { 1, 2, 3 } Contains: 2
        </Expanded>
      </Expression>
      <OverallResults successes="3" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Contains (vector)" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          v, Contains( v2 )
        </Original>
        <Expanded>
          { 1, 2, 3 } Contains: { 1, 2 }
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          v, Contains&lt;int>( { 1, 2 } )
        </Original>
        <Expanded>
          { 1, 2, 3 } Contains: { 1, 2 }
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          v5, ( Contains&lt;int, std::allocator&lt;int>, CustomAllocator&lt;int>>( v2 ) )
        </Original>
        <Expanded>
          { 1, 2, 3 } Contains: { 1, 2 }
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          v, Contains( v2 )
        </Original>
        <Expanded>
          { 1, 2, 3 } Contains: { 1, 2, 3 }
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          v, Contains( empty )
        </Original>
        <Expanded>
          { 1, 2, 3 } Contains: {  }
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          empty, Contains( empty )
        </Original>
        <Expanded>
          {  } Contains: {  }
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          v5, ( Contains&lt;int, std::allocator&lt;int>, CustomAllocator&lt;int>>( v2 ) )
        </Original>
        <Expanded>
          { 1, 2, 3 } Contains: { 1, 2, 3 }
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          v5, Contains( v6 )
        </Original>
        <Expanded>
          { 1, 2, 3 } Contains: { 1, 2 }
        </Expanded>
      </Expression>
      <OverallResults successes="8" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Contains (element), composed" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          v, VectorContains( 1 ) &amp;&amp; VectorContains( 2 )
        </Original>
        <Expanded>
          { 1, 2, 3 } ( Contains: 1 and Contains: 2 )
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Equals" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          v, Equals( v )
        </Original>
        <Expanded>
          { 1, 2, 3 } Equals: { 1, 2, 3 }
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          empty, Equals( empty )
        </Original>
        <Expanded>
          {  } Equals: {  }
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          v, Equals&lt;int>( { 1, 2, 3 } )
        </Original>
        <Expanded>
          { 1, 2, 3 } Equals: { 1, 2, 3 }
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          v, Equals( v2 )
        </Original>
        <Expanded>
          { 1, 2, 3 } Equals: { 1, 2, 3 }
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          v5, ( Equals&lt;int, std::allocator&lt;int>, CustomAllocator&lt;int>>( v2 ) )
        </Original>
        <Expanded>
          { 1, 2, 3 } Equals: { 1, 2, 3 }
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          v5, Equals( v6 )
        </Original>
        <Expanded>
          { 1, 2, 3 } Equals: { 1, 2, 3 }
        </Expanded>
      </Expression>
      <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="UnorderedEquals" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          v, UnorderedEquals( v )
        </Original>
        <Expanded>
          { 1, 2, 3 } UnorderedEquals: { 1, 2, 3 }
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          v, UnorderedEquals&lt;int>( { 3, 2, 1 } )
        </Original>
        <Expanded>
          { 1, 2, 3 } UnorderedEquals: { 3, 2, 1 }
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          empty, UnorderedEquals( empty )
        </Original>
        <Expanded>
          {  } UnorderedEquals: {  }
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          permuted, UnorderedEquals( v )
        </Original>
        <Expanded>
          { 1, 3, 2 } UnorderedEquals: { 1, 2, 3 }
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          permuted, UnorderedEquals( v )
        </Original>
        <Expanded>
          { 2, 3, 1 } UnorderedEquals: { 1, 2, 3 }
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          v5, ( UnorderedEquals&lt;int, std::allocator&lt;int>, CustomAllocator&lt;int>>( permuted ) )
        </Original>
        <Expanded>
          { 1, 2, 3 } UnorderedEquals: { 2, 3, 1 }
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          v5_permuted, UnorderedEquals( v5 )
        </Original>
        <Expanded>
          { 1, 3, 2 } UnorderedEquals: { 1, 2, 3 }
        </Expanded>
      </Expression>
      <OverallResults successes="7" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="Vector matchers that fail" tags="[.][failing][matchers][vector]" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
    <Section name="Contains (element)" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Expression success="false" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          v, VectorContains( -1 )
        </Original>
        <Expanded>
          { 1, 2, 3 } Contains: -1
        </Expanded>
      </Expression>
      <Expression success="false" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          empty, VectorContains( 1 )
        </Original>
        <Expanded>
          {  } Contains: 1
        </Expanded>
      </Expression>
      <OverallResults successes="0" failures="2" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Contains (vector)" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Expression success="false" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          empty, Contains( v )
        </Original>
        <Expanded>
          {  } Contains: { 1, 2, 3 }
        </Expanded>
      </Expression>
      <Expression success="false" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          v, Contains( v2 )
        </Original>
        <Expanded>
          { 1, 2, 3 } Contains: { 1, 2, 4 }
        </Expanded>
      </Expression>
      <OverallResults successes="0" failures="2" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Equals" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Expression success="false" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          v, Equals( v2 )
        </Original>
        <Expanded>
          { 1, 2, 3 } Equals: { 1, 2 }
        </Expanded>
      </Expression>
      <Expression success="false" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          v2, Equals( v )
        </Original>
        <Expanded>
          { 1, 2 } Equals: { 1, 2, 3 }
        </Expanded>
      </Expression>
      <Expression success="false" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          empty, Equals( v )
        </Original>
        <Expanded>
          {  } Equals: { 1, 2, 3 }
        </Expanded>
      </Expression>
      <Expression success="false" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          v, Equals( empty )
        </Original>
        <Expanded>
          { 1, 2, 3 } Equals: {  }
        </Expanded>
      </Expression>
      <OverallResults successes="0" failures="4" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="UnorderedEquals" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
      <Expression success="false" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          v, UnorderedEquals( empty )
        </Original>
        <Expanded>
          { 1, 2, 3 } UnorderedEquals: {  }
        </Expanded>
      </Expression>
      <Expression success="false" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          empty, UnorderedEquals( v )
        </Original>
        <Expanded>
          {  } UnorderedEquals: { 1, 2, 3 }
        </Expanded>
      </Expression>
      <Expression success="false" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          permuted, UnorderedEquals( v )
        </Original>
        <Expanded>
          { 1, 3 } UnorderedEquals: { 1, 2, 3 }
        </Expanded>
      </Expression>
      <Expression success="false" type="CHECK_THAT" filename="tests/<exe-name>/UsageTests/Matchers.tests.cpp" >
        <Original>
          permuted, UnorderedEquals( v )
        </Original>
        <Expanded>
          { 3, 1 } UnorderedEquals: { 1, 2, 3 }
        </Expanded>
      </Expression>
      <OverallResults successes="0" failures="4" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="When checked exceptions are thrown they can be expected or unexpected" tags="[!throws]" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
    <Expression success="true" type="REQUIRE_THROWS_AS" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
      <Original>
        thisThrows(), std::domain_error
      </Original>
      <Expanded>
        thisThrows(), std::domain_error
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_NOTHROW" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
      <Original>
        thisDoesntThrow()
      </Original>
      <Expanded>
        thisDoesntThrow()
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE_THROWS" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
      <Original>
        thisThrows()
      </Original>
      <Expanded>
        thisThrows()
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="When unchecked exceptions are thrown directly they are always failures" tags="[!throws][.][failing]" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
    <Exception filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
      unexpected exception
    </Exception>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="When unchecked exceptions are thrown during a CHECK the test should continue" tags="[!throws][.][failing]" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
      <Original>
        thisThrows() == 0
      </Original>
      <Expanded>
        thisThrows() == 0
      </Expanded>
      <Exception filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
        expected exception
      </Exception>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="When unchecked exceptions are thrown during a REQUIRE the test should abort fail" tags="[!throws][.][failing]" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
    <Expression success="false" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
      <Original>
        thisThrows() == 0
      </Original>
      <Expanded>
        thisThrows() == 0
      </Expanded>
      <Exception filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
        expected exception
      </Exception>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="When unchecked exceptions are thrown from functions they are always failures" tags="[!throws][.][failing]" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
      <Original>
        thisThrows() == 0
      </Original>
      <Expanded>
        thisThrows() == 0
      </Expanded>
      <Exception filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
        expected exception
      </Exception>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="When unchecked exceptions are thrown from sections they are always failures" tags="[!throws][.][failing]" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
    <Section name="section name" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
      <Exception filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
        unexpected exception
      </Exception>
      <OverallResults successes="0" failures="1" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="When unchecked exceptions are thrown, but caught, they do not affect the test" tags="[!throws]" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="X/level/0/a" tags="[Tricky]" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="X/level/0/b" tags="[fizz][Tricky]" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="X/level/1/a" tags="[Tricky]" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="X/level/1/b" tags="[Tricky]" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="XmlEncode" tags="[XML]" filename="tests/<exe-name>/IntrospectiveTests/Xml.tests.cpp" >
    <Section name="normal string" filename="tests/<exe-name>/IntrospectiveTests/Xml.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Xml.tests.cpp" >
        <Original>
          encode( "normal string" ) == "normal string"
        </Original>
        <Expanded>
          "normal string" == "normal string"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="empty string" filename="tests/<exe-name>/IntrospectiveTests/Xml.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Xml.tests.cpp" >
        <Original>
          encode( "" ) == ""
        </Original>
        <Expanded>
          "" == ""
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="string with ampersand" filename="tests/<exe-name>/IntrospectiveTests/Xml.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Xml.tests.cpp" >
        <Original>
          encode( "smith &amp; jones" ) == "smith &amp;amp; jones"
        </Original>
        <Expanded>
          "smith &amp;amp; jones" == "smith &amp;amp; jones"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="string with less-than" filename="tests/<exe-name>/IntrospectiveTests/Xml.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Xml.tests.cpp" >
        <Original>
          encode( "smith &lt; jones" ) == "smith &amp;lt; jones"
        </Original>
        <Expanded>
          "smith &amp;lt; jones" == "smith &amp;lt; jones"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="string with greater-than" filename="tests/<exe-name>/IntrospectiveTests/Xml.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Xml.tests.cpp" >
        <Original>
          encode( "smith > jones" ) == "smith > jones"
        </Original>
        <Expanded>
          "smith > jones" == "smith > jones"
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Xml.tests.cpp" >
        <Original>
          encode( "smith ]]&gt; jones" ) == "smith ]]&amp;gt; jones"
        </Original>
        <Expanded>
          "smith ]]&amp;gt; jones"
==
"smith ]]&amp;gt; jones"
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="string with quotes" filename="tests/<exe-name>/IntrospectiveTests/Xml.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Xml.tests.cpp" >
        <Original>
          encode( stringWithQuotes ) == stringWithQuotes
        </Original>
        <Expanded>
          "don't "quote" me on that"
==
"don't "quote" me on that"
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Xml.tests.cpp" >
        <Original>
          encode( stringWithQuotes, Catch::XmlEncode::ForAttributes ) == "don't &amp;quot;quote&amp;quot; me on that"
        </Original>
        <Expanded>
          "don't &amp;quot;quote&amp;quot; me on that"
==
"don't &amp;quot;quote&amp;quot; me on that"
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="string with control char (1)" filename="tests/<exe-name>/IntrospectiveTests/Xml.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Xml.tests.cpp" >
        <Original>
          encode( "[\x01]" ) == "[\\x01]"
        </Original>
        <Expanded>
          "[\x01]" == "[\x01]"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="string with control char (x7F)" filename="tests/<exe-name>/IntrospectiveTests/Xml.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Xml.tests.cpp" >
        <Original>
          encode( "[\x7F]" ) == "[\\x7F]"
        </Original>
        <Expanded>
          "[\x7F]" == "[\x7F]"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="XmlWriter writes boolean attributes as true/false" tags="[XML][XmlWriter]" filename="tests/<exe-name>/IntrospectiveTests/Xml.tests.cpp" >
    <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/Xml.tests.cpp" >
      <Original>
        stream.str(), ContainsSubstring(R"(attr1="true")") &amp;&amp; ContainsSubstring(R"(attr2="false")")
      </Original>
      <Expanded>
        "&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;Element1 attr1="true" attr2="false"/>
" ( contains: "attr1="true"" and contains: "attr2="false"" )
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="a succeeding test can still be skipped" tags="[!shouldfail][skipping]" filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" >
    <Skip filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" />
    <OverallResult success="true" skips="1"/>
  </TestCase>
  <TestCase name="analyse no analysis" tags="[benchmark]" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        analysis.mean.point.count() == 23
      </Original>
      <Expanded>
        23.0 == 23
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        analysis.mean.lower_bound.count() == 23
      </Original>
      <Expanded>
        23.0 == 23
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        analysis.mean.upper_bound.count() == 23
      </Original>
      <Expanded>
        23.0 == 23
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        analysis.standard_deviation.point.count() == 0
      </Original>
      <Expanded>
        0.0 == 0
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        analysis.standard_deviation.lower_bound.count() == 0
      </Original>
      <Expanded>
        0.0 == 0
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        analysis.standard_deviation.upper_bound.count() == 0
      </Original>
      <Expanded>
        0.0 == 0
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        analysis.outliers.total() == 0
      </Original>
      <Expanded>
        0 == 0
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        analysis.outliers.low_mild == 0
      </Original>
      <Expanded>
        0 == 0
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        analysis.outliers.low_severe == 0
      </Original>
      <Expanded>
        0 == 0
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        analysis.outliers.high_mild == 0
      </Original>
      <Expanded>
        0 == 0
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        analysis.outliers.high_severe == 0
      </Original>
      <Expanded>
        0 == 0
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        analysis.outliers.samples_seen == 0
      </Original>
      <Expanded>
        0 == 0
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        analysis.outlier_variance == 0
      </Original>
      <Expanded>
        0.0 == 0
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="array&lt;int, N> -> toString" tags="[array][containers][toString]" filename="tests/<exe-name>/UsageTests/ToStringVector.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringVector.tests.cpp" >
      <Original>
        Catch::Detail::stringify( empty ) == "{  }"
      </Original>
      <Expanded>
        "{  }" == "{  }"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringVector.tests.cpp" >
      <Original>
        Catch::Detail::stringify( oneValue ) == "{ 42 }"
      </Original>
      <Expanded>
        "{ 42 }" == "{ 42 }"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringVector.tests.cpp" >
      <Original>
        Catch::Detail::stringify( twoValues ) == "{ 42, 250 }"
      </Original>
      <Expanded>
        "{ 42, 250 }" == "{ 42, 250 }"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="benchmark function call" tags="[benchmark]" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
    <Section name="without chronometer" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          model.started == 1
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          model.finished == 0
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          model.started == 1
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          model.finished == 1
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          called == 1
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <OverallResults successes="5" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="with chronometer" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          model.started == 0
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          model.finished == 0
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          model.started == 0
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          model.finished == 0
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          called == 1
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <OverallResults successes="5" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="boolean member" tags="[Tricky]" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      <Original>
        obj.prop != 0
      </Original>
      <Expanded>
        0x<hex digits> != 0
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="checkedElse" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="CHECKED_ELSE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        flag
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        testCheckedElse( true )
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="checkedElse, failing" tags="[.][failing]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="false" type="CHECKED_ELSE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        flag
      </Original>
      <Expanded>
        false
      </Expanded>
    </Expression>
    <Expression success="false" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        testCheckedElse( false )
      </Original>
      <Expanded>
        false
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="checkedIf" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="CHECKED_IF" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        flag
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        testCheckedIf( true )
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="checkedIf, failing" tags="[.][failing]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="false" type="CHECKED_IF" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        flag
      </Original>
      <Expanded>
        false
      </Expanded>
    </Expression>
    <Expression success="false" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        testCheckedIf( false )
      </Original>
      <Expanded>
        false
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="classify_outliers" tags="[benchmark]" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
    <Section name="none" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          o.samples_seen == static_cast&lt;int>(x.size())
        </Original>
        <Expanded>
          6 == 6
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          o.low_severe == los
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          o.low_mild == lom
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          o.high_mild == him
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          o.high_severe == his
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          o.total() == los + lom + him + his
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="low severe" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          o.samples_seen == static_cast&lt;int>(x.size())
        </Original>
        <Expanded>
          6 == 6
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          o.low_severe == los
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          o.low_mild == lom
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          o.high_mild == him
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          o.high_severe == his
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          o.total() == los + lom + him + his
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="low mild" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          o.samples_seen == static_cast&lt;int>(x.size())
        </Original>
        <Expanded>
          6 == 6
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          o.low_severe == los
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          o.low_mild == lom
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          o.high_mild == him
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          o.high_severe == his
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          o.total() == los + lom + him + his
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="high mild" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          o.samples_seen == static_cast&lt;int>(x.size())
        </Original>
        <Expanded>
          6 == 6
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          o.low_severe == los
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          o.low_mild == lom
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          o.high_mild == him
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          o.high_severe == his
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          o.total() == los + lom + him + his
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="high severe" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          o.samples_seen == static_cast&lt;int>(x.size())
        </Original>
        <Expanded>
          6 == 6
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          o.low_severe == los
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          o.low_mild == lom
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          o.high_mild == him
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          o.high_severe == his
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          o.total() == los + lom + him + his
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="mixed" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          o.samples_seen == static_cast&lt;int>(x.size())
        </Original>
        <Expanded>
          6 == 6
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          o.low_severe == los
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          o.low_mild == lom
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          o.high_mild == him
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          o.high_severe == his
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
        <Original>
          o.total() == los + lom + him + his
        </Original>
        <Expanded>
          2 == 2
        </Expanded>
      </Expression>
      <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="comparisons between const int variables" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        unsigned_char_var == 1
      </Original>
      <Expanded>
        1 == 1
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        unsigned_short_var == 1
      </Original>
      <Expanded>
        1 == 1
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        unsigned_int_var == 1
      </Original>
      <Expanded>
        1 == 1
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        unsigned_long_var == 1
      </Original>
      <Expanded>
        1 == 1
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="comparisons between int variables" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        long_var == unsigned_char_var
      </Original>
      <Expanded>
        1 == 1
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        long_var == unsigned_short_var
      </Original>
      <Expanded>
        1 == 1
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        long_var == unsigned_int_var
      </Original>
      <Expanded>
        1 == 1
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Condition.tests.cpp" >
      <Original>
        long_var == unsigned_long_var
      </Original>
      <Expanded>
        1 == 1
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="convertToBits" tags="[conversion][floating-point]" filename="tests/<exe-name>/IntrospectiveTests/FloatingPoint.tests.cpp" >
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/FloatingPoint.tests.cpp" >
      <Original>
        convertToBits( 0.f ) == 0
      </Original>
      <Expanded>
        0 == 0
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/FloatingPoint.tests.cpp" >
      <Original>
        convertToBits( -0.f ) == ( 1ULL &lt;&lt; 31 )
      </Original>
      <Expanded>
        2147483648 (0x<hex digits>)
==
2147483648 (0x<hex digits>)
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/FloatingPoint.tests.cpp" >
      <Original>
        convertToBits( 0. ) == 0
      </Original>
      <Expanded>
        0 == 0
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/FloatingPoint.tests.cpp" >
      <Original>
        convertToBits( -0. ) == ( 1ULL &lt;&lt; 63 )
      </Original>
      <Expanded>
        9223372036854775808 (0x<hex digits>)
==
9223372036854775808 (0x<hex digits>)
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/FloatingPoint.tests.cpp" >
      <Original>
        convertToBits( std::numeric_limits&lt;float>::denorm_min() ) == 1
      </Original>
      <Expanded>
        1 == 1
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/FloatingPoint.tests.cpp" >
      <Original>
        convertToBits( std::numeric_limits&lt;double>::denorm_min() ) == 1
      </Original>
      <Expanded>
        1 == 1
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="dynamic skipping works with generators" tags="[skipping]" filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" >
    <Skip filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" >
      skipping because answer = 41
    </Skip>
    <Skip filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" >
      skipping because answer = 43
    </Skip>
    <OverallResult success="true" skips="2"/>
  </TestCase>
  <TestCase name="empty tags are not allowed" tags="[tags]" filename="tests/<exe-name>/IntrospectiveTests/Tag.tests.cpp" >
    <Expression success="true" type="REQUIRE_THROWS" filename="tests/<exe-name>/IntrospectiveTests/Tag.tests.cpp" >
      <Original>
        Catch::TestCaseInfo("", { "test with an empty tag", "[]" }, dummySourceLineInfo)
      </Original>
      <Expanded>
        Catch::TestCaseInfo("", { "test with an empty tag", "[]" }, dummySourceLineInfo)
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="erfc_inv" tags="[benchmark]" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        erfc_inv(1.103560) == Approx(-0.09203687623843015)
      </Original>
      <Expanded>
        -0.0920368762 == Approx( -0.0920368762 )
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        erfc_inv(1.067400) == Approx(-0.05980291115763361)
      </Original>
      <Expanded>
        -0.0598029112 == Approx( -0.0598029112 )
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        erfc_inv(0.050000) == Approx(1.38590382434967796)
      </Original>
      <Expanded>
        1.3859038243 == Approx( 1.3859038243 )
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="estimate_clock_resolution" tags="[benchmark]" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        res.mean.count() == rate
      </Original>
      <Expanded>
        2000.0 == 2000 (0x<hex digits>)
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        res.outliers.total() == 0
      </Original>
      <Expanded>
        0 == 0
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="even more nested SECTION tests" tags="[sections]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Section name="c" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Section name="d (leaf)" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="c" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Section name="e (leaf)" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="f (leaf)" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="failed assertions before SKIP cause test case to fail" tags="[!shouldfail][skipping]" filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" >
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" >
      <Original>
        3 == 4
      </Original>
      <Expanded>
        3 == 4
      </Expanded>
    </Expression>
    <Skip filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" />
    <OverallResult success="true" skips="1"/>
  </TestCase>
  <TestCase name="failing for some generator values causes entire test case to fail" tags="[!shouldfail][skipping]" filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" >
    <Failure filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" />
    <Skip filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" />
    <Failure filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" />
    <Skip filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" />
    <OverallResult success="true" skips="2"/>
  </TestCase>
  <TestCase name="failing in some unskipped sections causes entire test case to fail" tags="[!shouldfail][skipping]" filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" >
    <Section name="skipped" filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" >
      <Skip filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" />
      <OverallResults successes="0" failures="0" expectedFailures="0" skipped="true"/>
    </Section>
    <Section name="not skipped" filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" >
      <Failure filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" />
      <OverallResults successes="0" failures="0" expectedFailures="1" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="1"/>
  </TestCase>
  <TestCase name="first tag" tags="[tag1]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="has printf" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="is_unary_function" tags="[clara][compilation]" filename="tests/<exe-name>/IntrospectiveTests/Clara.tests.cpp" >
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="just failure" tags="[.][fail][isolated info][messages]" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
    <Failure filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      Previous info should not be seen
    </Failure>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="just failure after unscoped info" tags="[.][failing][info][unscoped]" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
    <Failure filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      previous unscoped info SHOULD not be seen
    </Failure>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="just info" tags="[info][isolated info][messages]" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="just unscoped info" tags="[info][unscoped]" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="long long" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        l == std::numeric_limits&lt;long long>::max()
      </Original>
      <Expanded>
        9223372036854775807 (0x<hex digits>)
==
9223372036854775807 (0x<hex digits>)
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="looped SECTION tests" tags="[.][failing][sections]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Section name="b is currently: 0" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          b > a
        </Original>
        <Expanded>
          0 > 1
        </Expanded>
      </Expression>
      <OverallResults successes="0" failures="1" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="b is currently: 1" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          b > a
        </Original>
        <Expanded>
          1 > 1
        </Expanded>
      </Expression>
      <OverallResults successes="0" failures="1" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="b is currently: 2" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          b > a
        </Original>
        <Expanded>
          2 > 1
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="b is currently: 3" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          b > a
        </Original>
        <Expanded>
          3 > 1
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="b is currently: 4" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          b > a
        </Original>
        <Expanded>
          4 > 1
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="b is currently: 5" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          b > a
        </Original>
        <Expanded>
          5 > 1
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="b is currently: 6" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          b > a
        </Original>
        <Expanded>
          6 > 1
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="b is currently: 7" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          b > a
        </Original>
        <Expanded>
          7 > 1
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="b is currently: 8" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          b > a
        </Original>
        <Expanded>
          8 > 1
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="b is currently: 9" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          b > a
        </Original>
        <Expanded>
          9 > 1
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="looped tests" tags="[.][failing]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Info filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      Testing if fib[0] (1) is even
    </Info>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        ( fib[i] % 2 ) == 0
      </Original>
      <Expanded>
        1 == 0
      </Expanded>
    </Expression>
    <Info filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      Testing if fib[1] (1) is even
    </Info>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        ( fib[i] % 2 ) == 0
      </Original>
      <Expanded>
        1 == 0
      </Expanded>
    </Expression>
    <Info filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      Testing if fib[2] (2) is even
    </Info>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        ( fib[i] % 2 ) == 0
      </Original>
      <Expanded>
        0 == 0
      </Expanded>
    </Expression>
    <Info filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      Testing if fib[3] (3) is even
    </Info>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        ( fib[i] % 2 ) == 0
      </Original>
      <Expanded>
        1 == 0
      </Expanded>
    </Expression>
    <Info filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      Testing if fib[4] (5) is even
    </Info>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        ( fib[i] % 2 ) == 0
      </Original>
      <Expanded>
        1 == 0
      </Expanded>
    </Expression>
    <Info filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      Testing if fib[5] (8) is even
    </Info>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        ( fib[i] % 2 ) == 0
      </Original>
      <Expanded>
        0 == 0
      </Expanded>
    </Expression>
    <Info filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      Testing if fib[6] (13) is even
    </Info>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        ( fib[i] % 2 ) == 0
      </Original>
      <Expanded>
        1 == 0
      </Expanded>
    </Expression>
    <Info filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      Testing if fib[7] (21) is even
    </Info>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        ( fib[i] % 2 ) == 0
      </Original>
      <Expanded>
        1 == 0
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="makeStream recognizes %debug stream name" tags="[streams]" filename="tests/<exe-name>/IntrospectiveTests/Stream.tests.cpp" >
    <Expression success="true" type="REQUIRE_NOTHROW" filename="tests/<exe-name>/IntrospectiveTests/Stream.tests.cpp" >
      <Original>
        Catch::makeStream( "%debug" )
      </Original>
      <Expanded>
        Catch::makeStream( "%debug" )
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="make_unique reimplementation" tags="[internals][unique-ptr]" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
    <Section name="From lvalue copies" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
      <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
        <Original>
          !(lval.has_moved)
        </Original>
        <Expanded>
          !false
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="From rvalue moves" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
        <Original>
          rval.has_moved
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Variadic constructor" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
        <Original>
          *ptr == std::tuple&lt;int, double, int>{1, 2., 3}
        </Original>
        <Expanded>
          {?} == {?}
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="mean" tags="[benchmark]" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        m == 19.
      </Original>
      <Expanded>
        19.0 == 19.0
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="measure" tags="[benchmark]" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        x == 17
      </Original>
      <Expanded>
        17 == 17
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        x == 23
      </Original>
      <Expanded>
        23 == 23
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        r.elapsed.count() == 42
      </Original>
      <Expanded>
        42 == 42
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        r.result == 23
      </Original>
      <Expanded>
        23 == 23
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        r.iterations == 1
      </Original>
      <Expanded>
        1 == 1
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        s.elapsed.count() == 69
      </Original>
      <Expanded>
        69 == 69
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        s.result == 17
      </Original>
      <Expanded>
        17 == 17
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        s.iterations == 1
      </Original>
      <Expanded>
        1 == 1
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="mix info, unscoped info and warning" tags="[info][unscoped]" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      info
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      unscoped info
    </Info>
    <Warning filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      and warn may mix
    </Warning>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      info
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      unscoped info
    </Info>
    <Warning filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      they are not cleared after warnings
    </Warning>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="more nested SECTION tests" tags="[.][failing][sections]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Section name="doesn't equal" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Section name="equal" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Expression success="false" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
          <Original>
            a == b
          </Original>
          <Expanded>
            1 == 2
          </Expanded>
        </Expression>
        <OverallResults successes="0" failures="1" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="0" failures="1" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="doesn't equal" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Section name="not equal" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
          <Original>
            a != b
          </Original>
          <Expanded>
            1 != 2
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="doesn't equal" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Section name="less than" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
          <Original>
            a &lt; b
          </Original>
          <Expanded>
            1 &lt; 2
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="nested SECTION tests" tags="[.][failing][sections]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Section name="doesn't equal" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          a != b
        </Original>
        <Expanded>
          1 != 2
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          b != a
        </Original>
        <Expanded>
          2 != 1
        </Expanded>
      </Expression>
      <Section name="not equal" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
          <Original>
            a != b
          </Original>
          <Expanded>
            1 != 2
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="3" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="nested sections can be skipped dynamically at runtime" tags="[skipping]" filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" >
    <Section name="A" filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" >
      <OverallResults successes="0" failures="1" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="B" filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" >
      <Section name="B1" filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" >
        <OverallResults successes="0" failures="1" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="0" failures="1" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="B" filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" >
      <Section name="B2" filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" >
        <Skip filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" />
        <OverallResults successes="0" failures="0" expectedFailures="0" skipped="true"/>
      </Section>
      <OverallResults successes="0" failures="0" expectedFailures="0" skipped="true"/>
    </Section>
    <Section name="B" filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" >
      <OverallResults successes="0" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="false" skips="1">
      <StdOut>
a!
b1!
!
      </StdOut>
    </OverallResult>
  </TestCase>
  <TestCase name="non streamable - with conv. op" tags="[Tricky]" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      <Original>
        s == "7"
      </Original>
      <Expanded>
        "7" == "7"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="non-copyable objects" tags="[.][failing]" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      <Original>
        ti == typeid(int)
      </Original>
      <Expanded>
        {?} == {?}
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="normal_cdf" tags="[benchmark]" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        normal_cdf(0.000000) == Approx(0.50000000000000000)
      </Original>
      <Expanded>
        0.5 == Approx( 0.5 )
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        normal_cdf(1.000000) == Approx(0.84134474606854293)
      </Original>
      <Expanded>
        0.8413447461 == Approx( 0.8413447461 )
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        normal_cdf(-1.000000) == Approx(0.15865525393145705)
      </Original>
      <Expanded>
        0.1586552539 == Approx( 0.1586552539 )
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        normal_cdf(2.809729) == Approx(0.99752083845315409)
      </Original>
      <Expanded>
        0.9975208385 == Approx( 0.9975208385 )
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        normal_cdf(-1.352570) == Approx(0.08809652095066035)
      </Original>
      <Expanded>
        0.088096521 == Approx( 0.088096521 )
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="normal_quantile" tags="[benchmark]" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        normal_quantile(0.551780) == Approx(0.13015979861484198)
      </Original>
      <Expanded>
        0.1301597986 == Approx( 0.1301597986 )
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        normal_quantile(0.533700) == Approx(0.08457408802851875)
      </Original>
      <Expanded>
        0.084574088 == Approx( 0.084574088 )
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        normal_quantile(0.025000) == Approx(-1.95996398454005449)
      </Original>
      <Expanded>
        -1.9599639845 == Approx( -1.9599639845 )
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="not allowed" tags="[!throws]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="not prints unscoped info from previous failures" tags="[.][failing][info][unscoped]" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      this MAY be seen only for the FIRST assertion IF info is printed for passing assertions
    </Info>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      <Original>
        true
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      this MAY be seen only for the SECOND assertion IF info is printed for passing assertions
    </Info>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      <Original>
        true
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      this SHOULD be seen
    </Info>
    <Expression success="false" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      <Original>
        false
      </Original>
      <Expanded>
        false
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="null strings" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        makeString( false ) != static_cast&lt;char*>(0)
      </Original>
      <Expanded>
        "valid string" != {null string}
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        makeString( true ) == static_cast&lt;char*>(0)
      </Original>
      <Expanded>
        {null string} == {null string}
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="null_ptr" tags="[Tricky]" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      <Original>
        ptr.get() == 0
      </Original>
      <Expanded>
        0 == 0
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="pair&lt;pair&lt;int,const char *,pair&lt;std::string,int> > -> toString" tags="[pair][toString]" filename="tests/<exe-name>/UsageTests/ToStringPair.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringPair.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify( pair ) == "{ { 42, \"Arthur\" }, { \"Ford\", 24 } }"
      </Original>
      <Expanded>
        "{ { 42, "Arthur" }, { "Ford", 24 } }"
==
"{ { 42, "Arthur" }, { "Ford", 24 } }"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="parseEnums" tags="[enums][Strings]" filename="tests/<exe-name>/IntrospectiveTests/ToString.tests.cpp" >
    <Section name="No enums" filename="tests/<exe-name>/IntrospectiveTests/ToString.tests.cpp" >
      <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/IntrospectiveTests/ToString.tests.cpp" >
        <Original>
          parseEnums( "" ), Equals( std::vector&lt;Catch::StringRef>{} )
        </Original>
        <Expanded>
          {  } Equals: {  }
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="One enum value" filename="tests/<exe-name>/IntrospectiveTests/ToString.tests.cpp" >
      <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/IntrospectiveTests/ToString.tests.cpp" >
        <Original>
          parseEnums( "ClassName::EnumName::Value1" ), Equals(std::vector&lt;Catch::StringRef>{"Value1"} )
        </Original>
        <Expanded>
          { Value1 } Equals: { Value1 }
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/IntrospectiveTests/ToString.tests.cpp" >
        <Original>
          parseEnums( "Value1" ), Equals( std::vector&lt;Catch::StringRef>{"Value1"} )
        </Original>
        <Expanded>
          { Value1 } Equals: { Value1 }
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/IntrospectiveTests/ToString.tests.cpp" >
        <Original>
          parseEnums( "EnumName::Value1" ), Equals(std::vector&lt;Catch::StringRef>{"Value1"} )
        </Original>
        <Expanded>
          { Value1 } Equals: { Value1 }
        </Expanded>
      </Expression>
      <OverallResults successes="3" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Multiple enum values" filename="tests/<exe-name>/IntrospectiveTests/ToString.tests.cpp" >
      <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/IntrospectiveTests/ToString.tests.cpp" >
        <Original>
          parseEnums( "ClassName::EnumName::Value1, ClassName::EnumName::Value2" ), Equals( std::vector&lt;Catch::StringRef>{"Value1", "Value2"} )
        </Original>
        <Expanded>
          { Value1, Value2 } Equals: { Value1, Value2 }
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/IntrospectiveTests/ToString.tests.cpp" >
        <Original>
          parseEnums( "ClassName::EnumName::Value1, ClassName::EnumName::Value2, ClassName::EnumName::Value3" ), Equals( std::vector&lt;Catch::StringRef>{"Value1", "Value2", "Value3"} )
        </Original>
        <Expanded>
          { Value1, Value2, Value3 } Equals: { Value1, Value2, Value3 }
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/IntrospectiveTests/ToString.tests.cpp" >
        <Original>
          parseEnums( "ClassName::EnumName::Value1,ClassName::EnumName::Value2 , ClassName::EnumName::Value3" ), Equals( std::vector&lt;Catch::StringRef>{"Value1", "Value2", "Value3"} )
        </Original>
        <Expanded>
          { Value1, Value2, Value3 } Equals: { Value1, Value2, Value3 }
        </Expanded>
      </Expression>
      <OverallResults successes="3" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="pointer to class" tags="[Tricky]" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Tricky.tests.cpp" >
      <Original>
        p == 0
      </Original>
      <Expanded>
        0 == 0
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="print unscoped info if passing unscoped info is printed" tags="[info][unscoped]" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      this MAY be seen IF info is printed for passing assertions
    </Info>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      <Original>
        true
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="prints unscoped info on failure" tags="[.][failing][info][unscoped]" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      this SHOULD be seen
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      this SHOULD also be seen
    </Info>
    <Expression success="false" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      <Original>
        false
      </Original>
      <Expanded>
        false
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="prints unscoped info only for the first assertion" tags="[.][failing][info][unscoped]" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      this SHOULD be seen only ONCE
    </Info>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      <Original>
        false
      </Original>
      <Expanded>
        false
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      <Original>
        true
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      this MAY also be seen only ONCE IF info is printed for passing assertions
    </Info>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      <Original>
        true
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      <Original>
        true
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="random SECTION tests" tags="[.][failing][sections]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Section name="doesn't equal" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          a != b
        </Original>
        <Expanded>
          1 != 2
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          b != a
        </Original>
        <Expanded>
          2 != 1
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="not equal" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          a != b
        </Original>
        <Expanded>
          1 != 2
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="replaceInPlace" tags="[string-manip]" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
    <Section name="replace single char" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
        <Original>
          Catch::replaceInPlace(letters, "b", "z")
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
        <Original>
          letters == "azcdefcg"
        </Original>
        <Expanded>
          "azcdefcg" == "azcdefcg"
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="replace two chars" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
        <Original>
          Catch::replaceInPlace(letters, "c", "z")
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
        <Original>
          letters == "abzdefzg"
        </Original>
        <Expanded>
          "abzdefzg" == "abzdefzg"
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="replace first char" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
        <Original>
          Catch::replaceInPlace(letters, "a", "z")
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
        <Original>
          letters == "zbcdefcg"
        </Original>
        <Expanded>
          "zbcdefcg" == "zbcdefcg"
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="replace last char" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
        <Original>
          Catch::replaceInPlace(letters, "g", "z")
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
        <Original>
          letters == "abcdefcz"
        </Original>
        <Expanded>
          "abcdefcz" == "abcdefcz"
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="replace all chars" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
        <Original>
          Catch::replaceInPlace(letters, letters, "replaced")
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
        <Original>
          letters == "replaced"
        </Original>
        <Expanded>
          "replaced" == "replaced"
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="replace no chars" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
      <Expression success="true" type="CHECK_FALSE" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
        <Original>
          !(Catch::replaceInPlace(letters, "x", "z"))
        </Original>
        <Expanded>
          !false
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
        <Original>
          letters == letters
        </Original>
        <Expanded>
          "abcdefcg" == "abcdefcg"
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="escape '" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
        <Original>
          Catch::replaceInPlace(s, "'", "|'")
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
        <Original>
          s == "didn|'t"
        </Original>
        <Expanded>
          "didn|'t" == "didn|'t"
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="request an unknown %-starting stream fails" tags="[streams]" filename="tests/<exe-name>/IntrospectiveTests/Stream.tests.cpp" >
    <Expression success="true" type="REQUIRE_THROWS" filename="tests/<exe-name>/IntrospectiveTests/Stream.tests.cpp" >
      <Original>
        Catch::makeStream( "%somestream" )
      </Original>
      <Expanded>
        Catch::makeStream( "%somestream" )
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="resolution" tags="[benchmark]" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        res.size() == count
      </Original>
      <Expanded>
        10 == 10
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        res[i] == rate
      </Original>
      <Expanded>
        1000.0 == 1000 (0x<hex digits>)
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        res[i] == rate
      </Original>
      <Expanded>
        1000.0 == 1000 (0x<hex digits>)
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        res[i] == rate
      </Original>
      <Expanded>
        1000.0 == 1000 (0x<hex digits>)
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        res[i] == rate
      </Original>
      <Expanded>
        1000.0 == 1000 (0x<hex digits>)
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        res[i] == rate
      </Original>
      <Expanded>
        1000.0 == 1000 (0x<hex digits>)
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        res[i] == rate
      </Original>
      <Expanded>
        1000.0 == 1000 (0x<hex digits>)
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        res[i] == rate
      </Original>
      <Expanded>
        1000.0 == 1000 (0x<hex digits>)
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        res[i] == rate
      </Original>
      <Expanded>
        1000.0 == 1000 (0x<hex digits>)
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        res[i] == rate
      </Original>
      <Expanded>
        1000.0 == 1000 (0x<hex digits>)
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="run_for_at_least, chronometer" tags="[benchmark]" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        meter.runs() >= old_runs
      </Original>
      <Expanded>
        1 >= 1
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        meter.runs() >= old_runs
      </Original>
      <Expanded>
        2 >= 1
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        meter.runs() >= old_runs
      </Original>
      <Expanded>
        4 >= 2
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        meter.runs() >= old_runs
      </Original>
      <Expanded>
        8 >= 4
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        meter.runs() >= old_runs
      </Original>
      <Expanded>
        16 >= 8
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        meter.runs() >= old_runs
      </Original>
      <Expanded>
        32 >= 16
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        meter.runs() >= old_runs
      </Original>
      <Expanded>
        64 >= 32
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        meter.runs() >= old_runs
      </Original>
      <Expanded>
        128 >= 64
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        Timing.elapsed >= time
      </Original>
      <Expanded>
        128 ns >= 100 ns
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        Timing.result == Timing.iterations + 17
      </Original>
      <Expanded>
        145 == 145
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        Timing.iterations >= time.count()
      </Original>
      <Expanded>
        128 >= 100
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="run_for_at_least, int" tags="[benchmark]" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        x >= old_x
      </Original>
      <Expanded>
        1 >= 1
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        x >= old_x
      </Original>
      <Expanded>
        2 >= 1
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        x >= old_x
      </Original>
      <Expanded>
        4 >= 2
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        x >= old_x
      </Original>
      <Expanded>
        8 >= 4
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        x >= old_x
      </Original>
      <Expanded>
        16 >= 8
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        x >= old_x
      </Original>
      <Expanded>
        32 >= 16
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        x >= old_x
      </Original>
      <Expanded>
        64 >= 32
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        x >= old_x
      </Original>
      <Expanded>
        128 >= 64
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        Timing.elapsed >= time
      </Original>
      <Expanded>
        128 ns >= 100 ns
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        Timing.result == Timing.iterations + 17
      </Original>
      <Expanded>
        145 == 145
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        Timing.iterations >= time.count()
      </Original>
      <Expanded>
        128 >= 100
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="second tag" tags="[tag2]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="sections can be skipped dynamically at runtime" tags="[skipping]" filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" >
    <Section name="not skipped" filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" >
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="skipped" filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" >
      <Skip filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" />
      <OverallResults successes="0" failures="0" expectedFailures="0" skipped="true"/>
    </Section>
    <Section name="also not skipped" filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" >
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="1"/>
  </TestCase>
  <TestCase name="send a single char to INFO" tags="[.][failing]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Info filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      3
    </Info>
    <Expression success="false" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        false
      </Original>
      <Expanded>
        false
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="sends information to INFO" tags="[.][failing]" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      hi
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      i := 7
    </Info>
    <Expression success="false" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      <Original>
        false
      </Original>
      <Expanded>
        false
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="shortened hide tags are split apart" tags="[tags]" filename="tests/<exe-name>/IntrospectiveTests/Tag.tests.cpp" >
    <Expression success="true" type="REQUIRE_THAT" filename="tests/<exe-name>/IntrospectiveTests/Tag.tests.cpp" >
      <Original>
        testcase.tags, VectorContains( Tag( "magic-tag" ) ) &amp;&amp; VectorContains( Tag( "."_catch_sr ) )
      </Original>
      <Expanded>
        { {?}, {?} } ( Contains: {?} and Contains: {?} )
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="skipped tests can optionally provide a reason" tags="[skipping]" filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" >
    <Skip filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" >
      skipping because answer = 43
    </Skip>
    <OverallResult success="true" skips="1"/>
  </TestCase>
  <TestCase name="splitString" tags="[string-manip]" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
    <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
      <Original>
        splitStringRef("", ','), Equals(std::vector&lt;StringRef>())
      </Original>
      <Expanded>
        {  } Equals: {  }
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
      <Original>
        splitStringRef("abc", ','), Equals(std::vector&lt;StringRef>{"abc"})
      </Original>
      <Expanded>
        { abc } Equals: { abc }
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK_THAT" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
      <Original>
        splitStringRef("abc,def", ','), Equals(std::vector&lt;StringRef>{"abc", "def"})
      </Original>
      <Expanded>
        { abc, def } Equals: { abc, def }
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="stacks unscoped info in loops" tags="[.][failing][info][unscoped]" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      Count 1 to 3...
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      1
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      2
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      3
    </Info>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      <Original>
        false
      </Original>
      <Expanded>
        false
      </Expanded>
    </Expression>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      Count 4 to 6...
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      4
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      5
    </Info>
    <Info filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      6
    </Info>
    <Expression success="false" type="CHECK" filename="tests/<exe-name>/UsageTests/Message.tests.cpp" >
      <Original>
        false
      </Original>
      <Expanded>
        false
      </Expanded>
    </Expression>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="startsWith" tags="[string-manip]" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
    <Expression success="true" type="CHECK_FALSE" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
      <Original>
        !(startsWith("", 'c'))
      </Original>
      <Expanded>
        !false
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
      <Original>
        startsWith(std::string("abc"), 'a')
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/StringManip.tests.cpp" >
      <Original>
        startsWith("def"_catch_sr, 'd')
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="std::map is convertible string" tags="[toString]" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
    <Section name="empty" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
        <Original>
          Catch::Detail::stringify( emptyMap ) == "{  }"
        </Original>
        <Expanded>
          "{  }" == "{  }"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="single item" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
        <Original>
          Catch::Detail::stringify( map ) == "{ { \"one\", 1 } }"
        </Original>
        <Expanded>
          "{ { "one", 1 } }" == "{ { "one", 1 } }"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="several items" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
        <Original>
          Catch::Detail::stringify( map ) == "{ { \"abc\", 1 }, { \"def\", 2 }, { \"ghi\", 3 } }"
        </Original>
        <Expanded>
          "{ { "abc", 1 }, { "def", 2 }, { "ghi", 3 } }"
==
"{ { "abc", 1 }, { "def", 2 }, { "ghi", 3 } }"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="std::pair&lt;int,const std::string> -> toString" tags="[pair][toString]" filename="tests/<exe-name>/UsageTests/ToStringPair.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringPair.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify(value) == "{ 34, \"xyzzy\" }"
      </Original>
      <Expanded>
        "{ 34, "xyzzy" }" == "{ 34, "xyzzy" }"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="std::pair&lt;int,std::string> -> toString" tags="[pair][toString]" filename="tests/<exe-name>/UsageTests/ToStringPair.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringPair.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify( value ) == "{ 34, \"xyzzy\" }"
      </Original>
      <Expanded>
        "{ 34, "xyzzy" }" == "{ 34, "xyzzy" }"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="std::set is convertible string" tags="[toString]" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
    <Section name="empty" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
        <Original>
          Catch::Detail::stringify( emptySet ) == "{  }"
        </Original>
        <Expanded>
          "{  }" == "{  }"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="single item" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
        <Original>
          Catch::Detail::stringify( set ) == "{ \"one\" }"
        </Original>
        <Expanded>
          "{ "one" }" == "{ "one" }"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="several items" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringGeneral.tests.cpp" >
        <Original>
          Catch::Detail::stringify( set ) == "{ \"abc\", \"def\", \"ghi\" }"
        </Original>
        <Expanded>
          "{ "abc", "def", "ghi" }"
==
"{ "abc", "def", "ghi" }"
        </Expanded>
      </Expression>
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="std::vector&lt;std::pair&lt;std::string,int> > -> toString" tags="[pair][toString]" filename="tests/<exe-name>/UsageTests/ToStringPair.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringPair.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify( pr ) == "{ { \"green\", 55 } }"
      </Original>
      <Expanded>
        "{ { "green", 55 } }"
==
"{ { "green", 55 } }"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="stdout and stderr streams have %-starting name" tags="[streams]" filename="tests/<exe-name>/IntrospectiveTests/Stream.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Stream.tests.cpp" >
      <Original>
        Catch::makeStream( "%stderr" )->isConsole()
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Stream.tests.cpp" >
      <Original>
        Catch::makeStream( "%stdout" )->isConsole()
      </Original>
      <Expanded>
        true
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="stringify ranges" tags="[toString]" filename="tests/<exe-name>/UsageTests/ToStringWhich.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringWhich.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify(streamable_range{}) == "op&lt;&lt;(streamable_range)"
      </Original>
      <Expanded>
        "op&lt;&lt;(streamable_range)"
==
"op&lt;&lt;(streamable_range)"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringWhich.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify(stringmaker_range{}) == "stringmaker(streamable_range)"
      </Original>
      <Expanded>
        "stringmaker(streamable_range)"
==
"stringmaker(streamable_range)"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringWhich.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify(just_range{}) == "{ 1, 2, 3, 4 }"
      </Original>
      <Expanded>
        "{ 1, 2, 3, 4 }" == "{ 1, 2, 3, 4 }"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringWhich.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify(disabled_range{}) == "{?}"
      </Original>
      <Expanded>
        "{?}" == "{?}"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="stringify( has_maker )" tags="[toString]" filename="tests/<exe-name>/UsageTests/ToStringWhich.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringWhich.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify( item ) == "StringMaker&lt;has_maker>"
      </Original>
      <Expanded>
        "StringMaker&lt;has_maker>"
==
"StringMaker&lt;has_maker>"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="stringify( has_maker_and_operator )" tags="[toString]" filename="tests/<exe-name>/UsageTests/ToStringWhich.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringWhich.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify( item ) == "StringMaker&lt;has_maker_and_operator>"
      </Original>
      <Expanded>
        "StringMaker&lt;has_maker_and_operator>"
==
"StringMaker&lt;has_maker_and_operator>"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="stringify( has_neither )" tags="[toString]" filename="tests/<exe-name>/UsageTests/ToStringWhich.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringWhich.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify(item) == "{?}"
      </Original>
      <Expanded>
        "{?}" == "{?}"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="stringify( has_operator )" tags="[toString]" filename="tests/<exe-name>/UsageTests/ToStringWhich.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringWhich.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify( item ) == "operator&lt;&lt;( has_operator )"
      </Original>
      <Expanded>
        "operator&lt;&lt;( has_operator )"
==
"operator&lt;&lt;( has_operator )"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="stringify( has_template_operator )" tags="[toString]" filename="tests/<exe-name>/UsageTests/ToStringWhich.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringWhich.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify( item ) == "operator&lt;&lt;( has_template_operator )"
      </Original>
      <Expanded>
        "operator&lt;&lt;( has_template_operator )"
==
"operator&lt;&lt;( has_template_operator )"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="stringify( vectors&lt;has_maker> )" tags="[toString]" filename="tests/<exe-name>/UsageTests/ToStringWhich.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringWhich.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify( v ) == "{ StringMaker&lt;has_maker> }"
      </Original>
      <Expanded>
        "{ StringMaker&lt;has_maker> }"
==
"{ StringMaker&lt;has_maker> }"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="stringify( vectors&lt;has_maker_and_operator> )" tags="[toString]" filename="tests/<exe-name>/UsageTests/ToStringWhich.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringWhich.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify( v ) == "{ StringMaker&lt;has_maker_and_operator> }"
      </Original>
      <Expanded>
        "{ StringMaker&lt;has_maker_and_operator> }"
==
"{ StringMaker&lt;has_maker_and_operator> }"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="stringify( vectors&lt;has_operator> )" tags="[toString]" filename="tests/<exe-name>/UsageTests/ToStringWhich.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringWhich.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify( v ) == "{ operator&lt;&lt;( has_operator ) }"
      </Original>
      <Expanded>
        "{ operator&lt;&lt;( has_operator ) }"
==
"{ operator&lt;&lt;( has_operator ) }"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="strlen3" tags="[generators]" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        data.str.size() == data.len
      </Original>
      <Expanded>
        3 == 3
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        data.str.size() == data.len
      </Original>
      <Expanded>
        3 == 3
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        data.str.size() == data.len
      </Original>
      <Expanded>
        5 == 5
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        data.str.size() == data.len
      </Original>
      <Expanded>
        4 == 4
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="tables" tags="[generators]" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        strlen(std::get&lt;0>(data)) == static_cast&lt;size_t>(std::get&lt;1>(data))
      </Original>
      <Expanded>
        5 == 5
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        strlen(std::get&lt;0>(data)) == static_cast&lt;size_t>(std::get&lt;1>(data))
      </Original>
      <Expanded>
        6 == 6
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        strlen(std::get&lt;0>(data)) == static_cast&lt;size_t>(std::get&lt;1>(data))
      </Original>
      <Expanded>
        5 == 5
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Generators.tests.cpp" >
      <Original>
        strlen(std::get&lt;0>(data)) == static_cast&lt;size_t>(std::get&lt;1>(data))
      </Original>
      <Expanded>
        6 == 6
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="tags with dots in later positions are not parsed as hidden" tags="[tags]" filename="tests/<exe-name>/IntrospectiveTests/Tag.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Tag.tests.cpp" >
      <Original>
        testcase.tags.size() == 1
      </Original>
      <Expanded>
        1 == 1
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/Tag.tests.cpp" >
      <Original>
        testcase.tags[0].original == "magic.tag"_catch_sr
      </Original>
      <Expanded>
        magic.tag == magic.tag
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="tests can be skipped dynamically at runtime" tags="[skipping]" filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" >
    <Skip filename="tests/<exe-name>/UsageTests/Skip.tests.cpp" />
    <OverallResult success="true" skips="1"/>
  </TestCase>
  <TestCase name="thrown std::strings are translated" tags="[!throws][.][failing]" filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
    <Exception filename="tests/<exe-name>/UsageTests/Exception.tests.cpp" >
      Why would you throw a std::string?
    </Exception>
    <OverallResult success="false" skips="0"/>
  </TestCase>
  <TestCase name="toString on const wchar_t const pointer returns the string contents" tags="[toString]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        result == "\"wide load\""
      </Original>
      <Expanded>
        ""wide load"" == ""wide load""
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="toString on const wchar_t pointer returns the string contents" tags="[toString]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        result == "\"wide load\""
      </Original>
      <Expanded>
        ""wide load"" == ""wide load""
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="toString on wchar_t const pointer returns the string contents" tags="[toString]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        result == "\"wide load\""
      </Original>
      <Expanded>
        ""wide load"" == ""wide load""
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="toString on wchar_t returns the string contents" tags="[toString]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        result == "\"wide load\""
      </Original>
      <Expanded>
        ""wide load"" == ""wide load""
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="toString(enum class w/operator&lt;&lt;)" tags="[enum][enumClass][toString]" filename="tests/<exe-name>/UsageTests/EnumToString.tests.cpp" >
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/EnumToString.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify(e0) == "E2/V0"
      </Original>
      <Expanded>
        "E2/V0" == "E2/V0"
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/EnumToString.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify(e1) == "E2/V1"
      </Original>
      <Expanded>
        "E2/V1" == "E2/V1"
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/EnumToString.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify(e3) == "Unknown enum value 10"
      </Original>
      <Expanded>
        "Unknown enum value 10"
==
"Unknown enum value 10"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="toString(enum class)" tags="[enum][enumClass][toString]" filename="tests/<exe-name>/UsageTests/EnumToString.tests.cpp" >
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/EnumToString.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify(e0) == "0"
      </Original>
      <Expanded>
        "0" == "0"
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/EnumToString.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify(e1) == "1"
      </Original>
      <Expanded>
        "1" == "1"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="toString(enum w/operator&lt;&lt;)" tags="[enum][toString]" filename="tests/<exe-name>/UsageTests/EnumToString.tests.cpp" >
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/EnumToString.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify(e0) == "E2{0}"
      </Original>
      <Expanded>
        "E2{0}" == "E2{0}"
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/EnumToString.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify(e1) == "E2{1}"
      </Original>
      <Expanded>
        "E2{1}" == "E2{1}"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="toString(enum)" tags="[enum][toString]" filename="tests/<exe-name>/UsageTests/EnumToString.tests.cpp" >
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/EnumToString.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify(e0) == "0"
      </Original>
      <Expanded>
        "0" == "0"
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/EnumToString.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify(e1) == "1"
      </Original>
      <Expanded>
        "1" == "1"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="tuple&lt;>" tags="[toString][tuple]" filename="tests/<exe-name>/UsageTests/ToStringTuple.tests.cpp" >
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/ToStringTuple.tests.cpp" >
      <Original>
        "{ }" == ::Catch::Detail::stringify(type{})
      </Original>
      <Expanded>
        "{ }" == "{ }"
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/ToStringTuple.tests.cpp" >
      <Original>
        "{ }" == ::Catch::Detail::stringify(value)
      </Original>
      <Expanded>
        "{ }" == "{ }"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="tuple&lt;float,int>" tags="[toString][tuple]" filename="tests/<exe-name>/UsageTests/ToStringTuple.tests.cpp" >
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/ToStringTuple.tests.cpp" >
      <Original>
        "1.2f" == ::Catch::Detail::stringify(float(1.2))
      </Original>
      <Expanded>
        "1.2f" == "1.2f"
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/ToStringTuple.tests.cpp" >
      <Original>
        "{ 1.2f, 0 }" == ::Catch::Detail::stringify(type{1.2f,0})
      </Original>
      <Expanded>
        "{ 1.2f, 0 }" == "{ 1.2f, 0 }"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="tuple&lt;int>" tags="[toString][tuple]" filename="tests/<exe-name>/UsageTests/ToStringTuple.tests.cpp" >
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/ToStringTuple.tests.cpp" >
      <Original>
        "{ 0 }" == ::Catch::Detail::stringify(type{0})
      </Original>
      <Expanded>
        "{ 0 }" == "{ 0 }"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="tuple&lt;string,string>" tags="[toString][tuple]" filename="tests/<exe-name>/UsageTests/ToStringTuple.tests.cpp" >
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/ToStringTuple.tests.cpp" >
      <Original>
        "{ \"hello\", \"world\" }" == ::Catch::Detail::stringify(type{"hello","world"})
      </Original>
      <Expanded>
        "{ "hello", "world" }"
==
"{ "hello", "world" }"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="tuple&lt;tuple&lt;int>,tuple&lt;>,float>" tags="[toString][tuple]" filename="tests/<exe-name>/UsageTests/ToStringTuple.tests.cpp" >
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/UsageTests/ToStringTuple.tests.cpp" >
      <Original>
        "{ { 42 }, { }, 1.2f }" == ::Catch::Detail::stringify(value)
      </Original>
      <Expanded>
        "{ { 42 }, { }, 1.2f }"
==
"{ { 42 }, { }, 1.2f }"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="uniform samples" tags="[benchmark]" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        e.point == 23
      </Original>
      <Expanded>
        23.0 == 23
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        e.upper_bound == 23
      </Original>
      <Expanded>
        23.0 == 23
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        e.lower_bound == 23
      </Original>
      <Expanded>
        23.0 == 23
      </Expanded>
    </Expression>
    <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        e.confidence_interval == 0.95
      </Original>
      <Expanded>
        0.95 == 0.95
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="unique_ptr reimplementation: basic functionality" tags="[internals][unique-ptr]" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
    <Section name="Default constructed unique_ptr is empty" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
      <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
        <Original>
          !(ptr)
        </Original>
        <Expanded>
          !{?}
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
        <Original>
          ptr.get() == 0
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Take ownership of allocation" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
        <Original>
          ptr
        </Original>
        <Expanded>
          {?}
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
        <Original>
          *ptr == 0
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
        <Original>
          ptr.get() == naked_ptr
        </Original>
        <Expanded>
          0x<hex digits> == 0x<hex digits>
        </Expanded>
      </Expression>
      <Section name="Plain reset deallocates" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
        <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
          <Original>
            !(ptr)
          </Original>
          <Expanded>
            !{?}
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
          <Original>
            ptr.get() == 0
          </Original>
          <Expanded>
            0 == 0
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="5" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Take ownership of allocation" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
        <Original>
          ptr
        </Original>
        <Expanded>
          {?}
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
        <Original>
          *ptr == 0
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
        <Original>
          ptr.get() == naked_ptr
        </Original>
        <Expanded>
          0x<hex digits> == 0x<hex digits>
        </Expanded>
      </Expression>
      <Section name="Reset replaces ownership" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
          <Original>
            ptr
          </Original>
          <Expanded>
            {?}
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
          <Original>
            ptr.get() != 0
          </Original>
          <Expanded>
            0x<hex digits> != 0
          </Expanded>
        </Expression>
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
          <Original>
            *ptr == 2
          </Original>
          <Expanded>
            2 == 2
          </Expanded>
        </Expression>
        <OverallResults successes="3" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="6" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Release releases ownership" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
      <Expression success="true" type="CHECK_FALSE" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
        <Original>
          !(ptr)
        </Original>
        <Expanded>
          !{?}
        </Expanded>
      </Expression>
      <Expression success="true" type="CHECK" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
        <Original>
          ptr.get() == 0
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Move constructor" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
      <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
        <Original>
          !(ptr1)
        </Original>
        <Expanded>
          !{?}
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
        <Original>
          ptr2
        </Original>
        <Expanded>
          {?}
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
        <Original>
          *ptr2 == 1
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <OverallResults successes="3" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="Move assignment" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
      <Expression success="true" type="REQUIRE_FALSE" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
        <Original>
          !(ptr2)
        </Original>
        <Expanded>
          !{?}
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
        <Original>
          ptr1
        </Original>
        <Expanded>
          {?}
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
        <Original>
          *ptr1 == 2
        </Original>
        <Expanded>
          2 == 2
        </Expanded>
      </Expression>
      <OverallResults successes="3" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="free swap" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
        <Original>
          *ptr1 == 2
        </Original>
        <Expanded>
          2 == 2
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/UniquePtr.tests.cpp" >
        <Original>
          *ptr2 == 1
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="vec&lt;vec&lt;string,alloc>> -> toString" tags="[toString][vector,allocator]" filename="tests/<exe-name>/UsageTests/ToStringVector.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringVector.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify(v) == "{  }"
      </Original>
      <Expanded>
        "{  }" == "{  }"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringVector.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify(v) == "{ { \"hello\" }, { \"world\" } }"
      </Original>
      <Expanded>
        "{ { "hello" }, { "world" } }"
==
"{ { "hello" }, { "world" } }"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="vector&lt;bool> -> toString" tags="[containers][toString][vector]" filename="tests/<exe-name>/UsageTests/ToStringVector.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringVector.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify(bools) == "{  }"
      </Original>
      <Expanded>
        "{  }" == "{  }"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringVector.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify(bools) == "{ true }"
      </Original>
      <Expanded>
        "{ true }" == "{ true }"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringVector.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify(bools) == "{ true, false }"
      </Original>
      <Expanded>
        "{ true, false }" == "{ true, false }"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="vector&lt;int,allocator> -> toString" tags="[toString][vector,allocator]" filename="tests/<exe-name>/UsageTests/ToStringVector.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringVector.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify(vv) == "{  }"
      </Original>
      <Expanded>
        "{  }" == "{  }"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringVector.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify(vv) == "{ 42 }"
      </Original>
      <Expanded>
        "{ 42 }" == "{ 42 }"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringVector.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify(vv) == "{ 42, 250 }"
      </Original>
      <Expanded>
        "{ 42, 250 }" == "{ 42, 250 }"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="vector&lt;int> -> toString" tags="[toString][vector]" filename="tests/<exe-name>/UsageTests/ToStringVector.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringVector.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify(vv) == "{  }"
      </Original>
      <Expanded>
        "{  }" == "{  }"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringVector.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify(vv) == "{ 42 }"
      </Original>
      <Expanded>
        "{ 42 }" == "{ 42 }"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringVector.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify(vv) == "{ 42, 250 }"
      </Original>
      <Expanded>
        "{ 42, 250 }" == "{ 42, 250 }"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="vector&lt;string> -> toString" tags="[toString][vector]" filename="tests/<exe-name>/UsageTests/ToStringVector.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringVector.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify(vv) == "{  }"
      </Original>
      <Expanded>
        "{  }" == "{  }"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringVector.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify(vv) == "{ \"hello\" }"
      </Original>
      <Expanded>
        "{ "hello" }" == "{ "hello" }"
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/ToStringVector.tests.cpp" >
      <Original>
        ::Catch::Detail::stringify(vv) == "{ \"hello\", \"world\" }"
      </Original>
      <Expanded>
        "{ "hello", "world" }"
==
"{ "hello", "world" }"
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="vectors can be sized and resized" tags="[vector]" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.size() == 5
      </Original>
      <Expanded>
        5 == 5
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.capacity() >= 5
      </Original>
      <Expanded>
        5 >= 5
      </Expanded>
    </Expression>
    <Section name="resizing bigger changes size and capacity" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.size() == 10
        </Original>
        <Expanded>
          10 == 10
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.capacity() >= 10
        </Original>
        <Expanded>
          10 >= 10
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.size() == 5
      </Original>
      <Expanded>
        5 == 5
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.capacity() >= 5
      </Original>
      <Expanded>
        5 >= 5
      </Expanded>
    </Expression>
    <Section name="resizing smaller changes size but not capacity" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.size() == 0
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.capacity() >= 5
        </Original>
        <Expanded>
          5 >= 5
        </Expanded>
      </Expression>
      <Section name="We can use the 'swap trick' to reset the capacity" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
          <Original>
            v.capacity() == 0
          </Original>
          <Expanded>
            0 == 0
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
      </Section>
      <OverallResults successes="3" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.size() == 5
      </Original>
      <Expanded>
        5 == 5
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.capacity() >= 5
      </Original>
      <Expanded>
        5 >= 5
      </Expanded>
    </Expression>
    <Section name="reserving bigger changes capacity but not size" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.size() == 5
        </Original>
        <Expanded>
          5 == 5
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.capacity() >= 10
        </Original>
        <Expanded>
          10 >= 10
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.size() == 5
      </Original>
      <Expanded>
        5 == 5
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Original>
        v.capacity() >= 5
      </Original>
      <Expanded>
        5 >= 5
      </Expanded>
    </Expression>
    <Section name="reserving smaller does not change size or capacity" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.size() == 5
        </Original>
        <Expanded>
          5 == 5
        </Expanded>
      </Expression>
      <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
        <Original>
          v.capacity() >= 5
        </Original>
        <Expanded>
          5 >= 5
        </Expanded>
      </Expression>
      <OverallResults successes="2" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="warmup" tags="[benchmark]" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        (iterations * rate) > Catch::Benchmark::Detail::warmup_time.count()
      </Original>
      <Expanded>
        160000000 (0x<hex digits>) > 100
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        (end - start) > Catch::Benchmark::Detail::warmup_time
      </Original>
      <Expanded>
        310016000 ns > 100 ms
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="weighted_average_quantile" tags="[benchmark]" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        q1 == 14.5
      </Original>
      <Expanded>
        14.5 == 14.5
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        med == 18.
      </Original>
      <Expanded>
        18.0 == 18.0
      </Expanded>
    </Expression>
    <Expression success="true" type="REQUIRE" filename="tests/<exe-name>/IntrospectiveTests/InternalBenchmark.tests.cpp" >
      <Original>
        q3 == 23.
      </Original>
      <Expanded>
        23.0 == 23.0
      </Expanded>
    </Expression>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <TestCase name="xmlentitycheck" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
    <Section name="embedded xml: &lt;test>it should be possible to embed xml characters, such as &lt;, &quot; or &amp;, or even whole &lt;xml>documents&lt;/xml> within an attribute&lt;/test>" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <Section name="encoded chars: these should all be encoded: &amp;&amp;&amp;&quot;&quot;&quot;&lt;&lt;&lt;&amp;&quot;&lt;&lt;&amp;&quot;" filename="tests/<exe-name>/UsageTests/Misc.tests.cpp" >
      <OverallResults successes="1" failures="0" expectedFailures="0" skipped="false"/>
    </Section>
    <OverallResult success="true" skips="0"/>
  </TestCase>
  <OverallResults successes="2048" failures="145" expectedFailures="32" skips="12"/>
  <OverallResultsCases successes="308" failures="84" expectedFailures="11" skips="6"/>
</Catch2TestRun>
